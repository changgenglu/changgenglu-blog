(self["webpackChunkchanggenglu_blog"]=self["webpackChunkchanggenglu_blog"]||[]).push([[594],{2256:function(n,e,t){"use strict";t.r(e),t.d(e,{default:function(){return w}});var o=t(641),a=t(3751),r=t(33);const s={class:"container-lg mt-3 mb-5"},i={id:"toggle-menu-btn",class:"col-12 mb-3"},l=(0,o.Lk)("i",{class:"fa-solid fa-bars"},null,-1),c=[l];function p(n,e,t,l,p,u){const d=(0,o.g2)("Markdown"),m=(0,o.g2)("scroll-to-top-button");return(0,o.uX)(),(0,o.CE)(o.FK,null,[(0,o.Lk)("div",s,[(0,o.bo)((0,o.Lk)("div",i,[(0,o.Lk)("button",{class:"btn btn-outline-light w-100",onClick:e[0]||(e[0]=(...n)=>u.toggleMenu&&u.toggleMenu(...n))},c)],512),[[a.aG,p.isMobile&&""!==p.markdownMenu]]),(0,o.Lk)("div",{class:(0,r.C4)({"d-flex":!p.isMobile})},[(0,o.bo)((0,o.Lk)("div",{class:(0,r.C4)({"col-3":!p.isMobile,"col-12":p.isMobile})},[(0,o.bo)((0,o.bF)(d,{class:"sticky-sm-top",id:"menu",source:p.markdownMenu},null,8,["source"]),[[a.aG,p.showMenu]])],2),[[a.aG,p.showMenu&&p.markdownMenu]]),(0,o.Lk)("div",{class:(0,r.C4)(["markdown-content px-3 position-sticky-end",{"col-9":p.markdownMenu&&!p.isMobile,"col-12":p.markdownMenu&&p.isMobile,"w-100":!p.markdownMenu}])},[(0,o.bF)(d,{source:p.markdownContent},null,8,["source"])],2)],2)]),(0,o.bo)((0,o.bF)(m,null,null,512),[[a.aG,p.isMobile]])],64)}const u=(0,o.Lk)("i",{class:"fa fa-arrow-up"},null,-1),d=[u];function m(n,e,t,a,r,s){return r.showButton?((0,o.uX)(),(0,o.CE)("div",{key:0,class:"scroll-to-top-button",onClick:e[0]||(e[0]=(...n)=>s.scrollToTop&&s.scrollToTop(...n))},d)):(0,o.Q3)("",!0)}var h={data(){return{showButton:!1}},methods:{handleScroll(){const n=window.innerHeight,e=70,t=30;this.showButton=window.scrollY>n-e-t},scrollToTop(){window.scrollTo({top:0,behavior:"smooth"})}},mounted(){window.addEventListener("scroll",this.handleScroll)},beforeMount(){window.removeEventListener("scroll",this.handleScroll)}},b=t(6262);const g=(0,b.A)(h,[["render",m]]);var f=g,v=t(7758),y=t.n(v),_={components:{Markdown:y(),ScrollToTopButton:f},name:"MarkdownComponent",data(){return{markdownContent:"",markdownMenu:"",fileName:this.$route.params.title,showMenu:!1,isMobile:!1,htmlContent:""}},methods:{async loadMarkdown(){const n=t(6968)(`./${this.fileName.split(".")[0]}.json`),e=await n;e.tocContent&&(this.markdownMenu=e.tocContent,this.showMenu=!0),this.markdownContent=e.content},scrollToFooter(){window.scrollTo(0,0)},toggleMenu(){""===this.markdownMenu?this.showMenu=!1:this.showMenu=!this.showMenu},checkDevice(){window.innerWidth<=768?(this.isMobile=!0,this.showMenu=!1):(this.isMobile=!1,this.showMenu=!0)}},mounted(){this.loadMarkdown(),this.checkDevice(),addEventListener("resize",this.checkDevice)}};const $=(0,b.A)(_,[["render",p]]);var w=$},6968:function(n,e,t){var o={"./Bootstrap 學習筆記.json":3957,"./CSS學習筆記.json":8370,"./Carbon 學習筆記.json":9550,"./D3.js 學習筆記.json":7401,"./Design Pattern.json":2755,"./Docker 學習筆記.json":305,"./Git 學習筆記.json":2727,"./Home Assistant 開發環境.json":4206,"./Hyper-v 設定.json":8343,"./Javascript 事件.json":6813,"./Javascript 學習筆記.json":4732,"./Javascript 陣列.json":810,"./Laravel API Format.json":8615,"./Laravel Artisan command.json":3911,"./Laravel Collections & Helper.json":9073,"./Laravel Eloquent ORM.json":9813,"./Laravel Excel.json":47,"./Laravel HTTP Client.json":7499,"./Laravel Middleware.json":7028,"./Laravel Migration & Seeder & Factory.json":2692,"./Laravel Request.json":7609,"./Laravel Test.json":8992,"./Laravel 中大型專案架構.json":3658,"./Laravel 事件.json":2773,"./Laravel 命名原則.json":6712,"./Laravel 學習筆記.json":564,"./Laravel 實作權限.json":2596,"./Laravel 服務容器.json":343,"./Laravel 環境設置.json":9750,"./Laravel 表單驗證.json":3626,"./Laravel 資料庫設計範例.json":2189,"./MQTT 學習筆記.json":4903,"./Markdown 學習筆記.json":3078,"./MySQL學習筆記.json":1023,"./PHP namespace.json":4882,"./PHP 學習筆記.json":1471,"./PHP 物件導向.json":3965,"./Postman 學習筆記.json":7573,"./RESTful API.json":9568,"./Redis 學習筆記.json":4142,"./SOLID 物件導向原則.json":9442,"./TCP 連線溝通方式.json":4780,"./Ubuntu 學習筆記.json":2416,"./Visual Studio Code環境設置.json":3138,"./Vue Router 學習筆記.json":2590,"./Vue 學習筆記.json":1263,"./VueX 學習筆記.json":8697,"./Vuex 學習筆記.json":3721,"./phpDoc.json":7581,"./併發控制.json":6891,"./前端工具.json":8515,"./在 GCP 部署 laravel 專案.json":418,"./多線程與多進程.json":3606,"./撰寫 API 文件.json":4859,"./數位憑證(SSL)要錢，誰還要數位憑證？.json":1187,"./物聯網.json":4171,"./網域設定.json":9099,"./語意化版本.json":2554,"./電腦概論.json":1830};function a(n){var e=r(n);return t(e)}function r(n){if(!t.o(o,n)){var e=new Error("Cannot find module '"+n+"'");throw e.code="MODULE_NOT_FOUND",e}return o[n]}a.keys=function(){return Object.keys(o)},a.resolve=r,n.exports=a,a.id=6968},3957:function(n){"use strict";n.exports=JSON.parse('{"name":"Bootstrap 學習筆記.md","content":"# Bootstrap 學習筆記\\n\\n## html 引入\\n\\n```html\\n<head>\\n  <meta charset=\\"UTF-8\\" />\\n  <link rel=\\"stylesheet\\" href=\\"../_css/bootstrap.min.css\\" />\\n  <script src=\\"../_js/jquery.min.js\\"><\/script>\\n  <script src=\\"../_js/popper.min.js\\"><\/script>\\n  <script src=\\"../_js/bootstrap.min.js\\"><\/script>\\n  <title>Document</title>\\n</head>\\n```\\n\\n## 表格\\n\\n```html\\n<div class=\\"row\\">\\n  <div class=\\"col-6\\"></div>\\n  <div class=\\"col-6\\"></div>\\n</div>\\n```\\n\\n## 部分顏色名稱\\n\\n- primary 主要的\\n- secondary 副標\\n- success 成功\\n- danger 危險\\n- warning 警告\\n- info 訊息\\n- light 明亮(帶有淺邊框)\\n- dark 深色\\n- white 白色\\n\\n## 改變字型的外觀\\n\\n- font-weight-bold\\n- font-weight-normal\\n- font-weight-light\\n- fon-italic(斜體)\\n\\n## 文字位置設定\\n\\n- text-left\\n- text-center\\n- text-right\\n\\n## 輪播牆\\n\\n```html\\n<div id=\\"mydemo1\\" class=\\"carousel slide\\" data-ride=\\"carousel\\">\\n  <ol class=\\"carousel-indicators\\">\\n    <li data-target=\\"#mydemo1\\" data-slide-to=\\"0\\" class=\\"active\\"></li>\\n    <li data-target=\\"#mydemo1\\" data-slide-to=\\"1\\"></li>\\n    <li data-target=\\"#mydemo1\\" data-slide-to=\\"2\\"></li>\\n  </ol>\\n  <div class=\\"carousel-inner\\">\\n    <div class=\\"carousel-item active\\">\\n      <img src=\\"https://dummyimage.com/1200x300/00ff5e/ffffff\\" alt=\\"\\" />\\n    </div>\\n    <div class=\\"carousel-item\\">\\n      <img src=\\"https://dummyimage.com/1200x300/ff8400/ffffff\\" alt=\\"\\" />\\n    </div>\\n    <div class=\\"carousel-item\\">\\n      <img src=\\"https://dummyimage.com/1200x300/f057c5/ffffff\\" alt=\\"\\" />\\n    </div>\\n  </div>\\n  <a class=\\"carousel-control-prev\\" href=\\"#mydemo1\\" role=\\"button\\" data-slide=\\"prev\\">\\n    <span class=\\"carousel-control-prev-icon\\" aria-hidden=\\"true\\"></span>\\n    <span class=\\"sr-only\\">Previous</span>\\n  </a>\\n  <a class=\\"carousel-control-next\\" href=\\"#mydemo1\\" role=\\"button\\" data-slide=\\"next\\">\\n    <span class=\\"carousel-control-next-icon\\" aria-hidden=\\"true\\"></span>\\n    <span class=\\"sr-only\\">Next</span>\\n  </a>\\n</div>\\n```\\n\\n## drop down\\n\\n```html\\n<li class=\\"nav-item dropup\\">\\n  <a class=\\"nav-link active \\" id=\\"navbardrop\\" data-toggle=\\"dropdown\\"> 珈琲體驗 </a>\\n  <div class=\\"dropdown-menu\\">\\n    <a class=\\"dropdown-item\\" href=\\"#\\"> 手沖珈琲 </a>\\n    <a class=\\"dropdown-item\\" href=\\"#\\"> 珈琲特調體驗 </a>\\n    <a class=\\"dropdown-item\\" href=\\"#\\"> 拿鐵拉花 </a>\\n  </div>\\n</li>\\n```\\n","tocContent":""}')},8370:function(n){"use strict";n.exports=JSON.parse('{"name":"CSS學習筆記.md","content":"# CSS 學習筆記\\n\\n>\\n\\n> 參考資料：\\n>\\n> [Super Easy CSS，極度簡單：寫出好的 CSS，從零開始前端生涯](https://ithelp.ithome.com.tw/users/20103650/ironman/6126)\\n>\\n> 將所有物件加上外框\\n>\\n> ```css\\n> * {\\n>   outline: 1px solid #000;\\n> }\\n> ```\\n\\n## 後裔選擇器\\n\\n### 基本類型\\n\\n- 標籤 `#id` `.class`\\n\\n- div 標籤和 span 標籤\\n\\n  ```css\\n  div,\\n  span {\\n  }\\n  ```\\n\\n### 複合型\\n\\n- div 標籤底下，為 span 標籤\\n\\n  ```css\\n  div > span {\\n  }\\n  ```\\n\\n- div 標籤內所有的 span 標籤\\n\\n  ```css\\n  div span {\\n  }\\n  ```\\n\\n- div 標籤之後的第一個 span 標籤\\n\\n  ```css\\n  div + span {\\n  }\\n  ```\\n\\n- div 標籤之後的所有 span 標籤\\n\\n  ```css\\n  div ~ span {\\n  }\\n  ```\\n\\n## 屬性選擇器`[]`\\n\\n可直接查找任何屬性內元素(ex:`class`, `div`, `title`, `href`,....)，亦可使用於直接指定屬性\\n\\n- `|` 符號為屬性，包含`[foo]`且必在開頭，須為獨立字元、特定單詞，以及字元後加上連接符號 `-`\\n\\n  ```css\\n  p[class|=\\"red\\"] {\\n  }\\n  ```\\n\\n- `~` 符號為屬性只要有包含`[foo]`，無順序問題，需為獨立字元、特定單詞\\n\\n  ```css\\n  a[herf~=\\"apple\\"] {\\n  }\\n  ```\\n\\n- `^` 符號為屬性使用`[foo]`開頭，不特定獨立字元\\n\\n  ```css\\n  a[herf^=\\"http\\"] {\\n  }\\n  ```\\n\\n- `$` 符號為屬性使用`[foo]`結尾，不特定獨立字元\\n\\n  ```css\\n  a[herf$=\\"selectors.asp\\"] {\\n  }\\n  ```\\n\\n- `*` 符號為屬性內含有`[foo]`，不特定獨立字元\\n\\n  ```css\\n  a[herf*=\\"pseudo\\"] {\\n  }\\n  ```\\n\\n## 表格\\n\\n- 將標籤做成表格\\n\\n  ```css\\n  .class {\\n    display: grid;\\n  }\\n  ```\\n\\n## 偽元素\\n\\n- 在原本的元素「之前」加入內容\\n\\n  ```css\\n  ::before ;\\n  ```\\n\\n- 在原本的元素「之後」加入內容\\n\\n  ```css\\n  ::after ;\\n  ```\\n\\n- 兩者都是以 display: inline-block;屬性存在\\n- 偽元素會「繼承」原本元素的屬性\\n- 偽元素一定要加上 content 的屬性，沒有 content 偽元素不會出現在畫面上\\n\\n## `display:none`和`visibility:hidden`的差別\\n\\n當使用 `visibility:hidden` 時，物件是確實的被隱藏的，但依然保有物件的位置\\n\\n例如：當表格內的標籤加上 `visibility:hidden` 時，其儲存格中的值會被隱藏，但儲存格不會消失\\n\\n當使用 `display:none` 時，物件及其原本的位置都會被隱藏\\n\\n## css 命名\\n\\n> 盡量使用 class，將 id 留給 javascript 使用\\n>\\n> 參考資料：\\n>\\n> [談 CSS 命名](https://editor.leonh.space/2020/css-naming/)\\n\\n### OOCSS 物件導向\\n\\n代表框架：`Bootstrap`\\n\\n#### 結構與樣式分離\\n\\n```html\\n\x3c!-- 舊有寫法 --\x3e\\n<button type=\\"button\\" class=\\"btn-login\\">登入</button>\\n\x3c!-- 新寫法 --\x3e\\n<button type=\\"button\\" class=\\"btn btn-primary\\">登入</button>\\n```\\n\\n```css\\n/* 舊有寫法 */\\n.btn-login {\\n  padding: 0.5rem 1rem;\\n  border-radius: 0.5rem;\\n  background-color: blue;\\n}\\n/* 新寫法 */\\n/* 獨立出結構 */\\n.btn {\\n  padding: 0.5rem 1rem;\\n  border-radius: 0.5rem;\\n}\\n/* 獨立出樣式 */\\n.btn-primary {\\n  background-color: blue;\\n}\\n```\\n\\n將結構與樣式獨立後，即可重複使用於其他地方。\\n\\n```css\\n.w-100 {\\n  width: 100%;\\n}\\n.w-50 {\\n  width: 50%;\\n}\\n.p-0 {\\n  padding: 0;\\n}\\n.pt-1 {\\n  padding-top: 1rem;\\n}\\n```\\n\\n#### 容器與內容分離\\n\\n抽出重複樣式\\n\\n```css\\n/* 舊有寫法： */\\nheader {\\n  max-width: 1000px;\\n  margin: auto;\\n  background-color: #ccc;\\n  ...;\\n}\\nfooter {\\n  max-width: 1000px;\\n  margin: auto;\\n  background-color: #aaa;\\n  ...;\\n}\\n\\n/* 「容器」：獨立出共用的部分 */\\n.container {\\n  max-width: 1000px;\\n  margin: auto;\\n}\\n/* 「內容」：額外撰寫各自的樣式 */\\nheader {\\n  background-color: #ccc;\\n  ...;\\n}\\nfooter {\\n  background-color: #aaa;\\n  ...;\\n}\\n```\\n\\n### SMACSS 擴展性與模組化原則\\n\\n將 CSS 分成五個層級\\n\\n- Base\\n  - 全域設定，用來定義 HTML 元素的基本樣式，例如`h1`, `h2`...，通常會透過 CSS Reset 來統一個瀏覽器的差異。\\n- Layout\\n  - 定義網頁的版面架構，如：`.container`, 格線系統等等。\\n- Module\\n  - 用來定義獨立、可重複使用的文件，如：`.btn`, `.nav`\\n- State\\n  - 用來定義元素狀態，如：`.active`, `.disabled`\\n- Theme\\n  - 用來定義元素的顏色、字體等主題，如：`.theme-dark`, `.theme-light`\\n\\n### BEN 區塊元素\\n\\n將命名方法分為塊(Block)、元素(Element)、修飾符(Modifier)。其好處為依用途進行命名，缺點為名稱可能會變的很長。\\n\\n- Block 一個獨立的元件，應以小寫字母命名。如：`.header`, `.menu`\\n- Element 元素為塊的一部分，使用兩個下底線連接，如：`.header__text`, `.menu__item`\\n- Modifier 用於修改塊或元素的外觀或狀態，使用兩個破折號連接。如：`.header--dark`, `.menu__item--active`\\n\\n### RECSS 獨立元件原則\\n\\n> 參考文件：\\n>\\n> [官方網站](https://ricostacruz.com/rscss/) / [中文翻譯](https://eddiewen.gitbooks.io/rscss/content/)\\n\\n將網頁各部為拆解成一塊一塊的元件(component)，例如 `header` 元件，而元件可以再容納子元件，例如：`header` 元件中有 `brand`, `navigation`, `search` 三個子元件，而他們可能也會有各自的子元件。一直到最後的最小單位稱為元素(element)，如導覽區(nav)內的單一連結或是搜尋框(search)的文字框。\\n\\n主要分為：\\n\\n- 元件(components)\\n- 元素(elements)\\n- 變形(variants)\\n- 巢狀元件(nested components)\\n- 佈局(layouts)\\n- 輔助類別(helpers)\\n\\n#### 元件 components\\n\\n由多個元素(elements)構成元件。名稱至少為兩個單字，並以破折號相連。如：`.search-form`, `.article-card`\\n\\n若元件只需要一個詞既可以表達他的意思，如`.alert`，依然建議加上簡單後綴，如：`.alert-box`, `.alert-card`\\n\\n#### 元素 elements\\n\\n名稱只能為一個字，由多個元素組成元件(component)。\\n\\n建議使用 `>` 選擇元素中的樣式，避免使用巢狀時污染子層元件。\\n\\n```css\\n.search-form > .filed {\\n}\\n```\\n\\n#### 變形 variants\\n\\n#### 巢狀元件 nested components\\n\\n#### 佈局 layouts\\n\\n#### 輔助類 helpers\\n\\n## Background\\n\\n### attachment 固定樣式\\n\\n- scroll 預設：當設定背景圖的區域有捲軸時，當捲動該區域，背景圖會固定位置不變，但當捲動整個網頁時，該區域的背景圖會跟著網頁捲軸滾動。\\n- fixed：無論在捲動設定背景圖區快內的捲軸，或是整個網頁的捲軸，背景都會固定位置不變。\\n- local：和 fixed 相反，捲動任意捲軸，背景圖都會跟著捲軸移動。\\n\\n### blend-mode 圖層混合模式\\n\\n類似套濾鏡的效果\\n\\n### clip 定義背景延伸的範圍\\n\\n- border-box 背景範圍為 content + padding + border\\n- padding-box 背景範圍為 content + padding\\n- content-box 背景範圍為 content\\n\\n### color 背景顏色\\n\\n預設為透明，當未設定背景圖片時顯示。\\n\\n### image 背景圖片\\n\\n```css\\ndiv {\\n  background-image: url(\\"./images/background/001.png\\");\\n}\\n```\\n\\n### origin 設定背景起使位置\\n\\n- border-box 起始位置為左上角，包含 border + padding + content\\n- padding-box 起始位置為左上角，包含 padding + content\\n- content-box 起始位置為左上角，包含 content\\n\\n### position 設定背景圖片的位置\\n\\n- left top\\n- left center\\n- left bottom\\n- right top\\n- right center\\n- right bottom\\n- center top\\n- center center\\n- center bottom\\n- x% y%\\n- xops yops\\n\\n### repeat 重複\\n\\n- repeat 預設：於 x 軸與 y 軸重複背景\\n- repeat-x：只於 x 軸重複背景\\n- repeat-y：只於 y 軸重複背景\\n- no-repeat：不重複\\n- space：背景尺寸不變，自動調整圖片間距填滿畫面\\n- round：調整背景尺寸填滿畫面\\n\\n### size 背景圖片尺寸\\n\\n- auto 預設：顯示原圖尺寸\\n- length：設定圖片 width & height，若只輸入一個值，則 width & height 相同。\\n- percentage：設定背景圖片在區域中要顯示的比例，若 width & height 其中一值未設定則為 auto\\n- cover：不改變圖片比例的情況下，用背景圖片將區塊塞滿後裁切\\n- contain：不改變圖片比例，完整呈現圖片。若為 no-repeat，圖片尺寸若小於區域尺寸，則會出現空白區域\\n\\n## Display\\n\\n### Block 區塊元素\\n\\n- 總是以新的一行開始，所以無論設定多少寬度，他基本容器的寬度，還是會撐滿整個空間。\\n- 即使容器中的元素已經被調整成 50%，但他還是會將後面的元素排擠在下面。\\n\\n### Inline 行內元素\\n\\n- 又稱線內元素，元素本身高度多少他就是多少，無法調整寬高，此外他可以設定 padding 的上下左右，而 margin 只能設定他的左右。\\n- inline 屬性預設元素的排列為由左到右，直到裝滿容器。\\n\\n### Table\\n\\n- 可以將元素直接模擬成 table 來使用。\\n  - row 對應 `<tr>`\\n  - row-group 對應 `<tbody>`\\n  - cell `<td>`\\n  - caption `<caption`\\n  - column `<col>`\\n  - column-group `<colgroup>`\\n  - header-group `<thead>`\\n  - footer-group `<footer>`\\n\\n### Flex\\n\\n- 設定 flex 屬性之前，需先設定父層容器 display: flex\\n\\n#### 外容器\\n\\n##### flex-direction 方向性\\n\\n- 決定 flex 的軸線方向，也就是「單行排列方向」，預設是橫的\\n  - 水平方向(瀏覽器預設)：row, row-reverse(水平方向反轉)\\n  - 垂直方向：column, column-reverse(垂直方向反轉)\\n\\n##### flex-wrap 斷行\\n\\n- 當內元件排列超過外容器主軸時的行為\\n  - nowrap：強制不斷行。\\n  - wrap：裝滿容器會強制斷行。\\n  - wrap-reverse：裝滿容器會強制斷行，但排列順序是相反的。\\n\\n##### justify-content 調整內容\\n\\n- 改變 flex 物件在主軸上的對齊(預設為水平方向)，若 flex-direction 為 column，則對齊方向改為垂直方向(y 軸)\\n  - flex-start 以起點為基準\\n  - flex-end 以尾端為基準\\n  - center 以中間為基準\\n  - space-between 會將物件依容器大小均分\\n  - space-around 會將物件依容器大小均分，並會給左右空間\\n\\n##### align-items 物件對齊\\n\\n- 改變橫軸上所有 flex 物件的對齊(預設為垂直方向)，若 flex-direction 為 column，則對其方向會改為水平方向(x 軸)\\n  - flex-start 以起點為基準\\n  - flex-end 以尾端為基準\\n  - center 以中間為基準\\n  - baseline 以物件基準線為基準\\n  - stretch 以起點為基準，但會撐滿容器(瀏覽器預設)\\n\\n##### align-content 多行物件對齊\\n\\n- 和 align-items 類似，差別為他是多行的排列方式。\\n  - flex-start\\n  - flex-end\\n  - center\\n  - baseline\\n  - stretch\\n\\n#### 內元件\\n\\n```html\\n<div class=\\"container d-flex\\">\\n  <div class=\\"item item1\\">內元件1</div>\\n  <div class=\\"item item2\\">內元件2</div>\\n  <div class=\\"item item3\\">內元件3</div>\\n</div>\\n```\\n\\n##### flex-grow 元件的延伸性\\n\\n- 為一個數值，當空間分配還有剩餘的當前元件的伸展性，預設為 0，如果設置為 0 則不會縮放\\n\\n```css\\n.container {\\n  width: 100%;\\n}\\n\\n.item {\\n  width: 100px;\\n}\\n```\\n\\n將 item1 加上 grow，此時元件 1 會擴大將空間填滿。\\n\\n```css\\n.item1 {\\n  flex-grow: 1;\\n}\\n```\\n\\n將 item2 設定為 grow: 2，此時元件 2 比元件 1 還大。\\n\\n```css\\n.item2 {\\n  flex-grow: 2;\\n}\\n```\\n\\nflex-grow 的數值為外容器按剩餘空間依比例進行分配。\\n\\n- 內元件 1：佔據剩餘空間 1/3\\n- 內元件 2：佔據剩餘空間 2/3\\n\\n##### flex-shrink 元件的收縮\\n\\n- 當空間分配不足時，當前元件的收縮性。預設為 0\\n\\n和 flex-grow 相反，內元件相加總和超過外容器的數值，依比例減少。\\n\\n```css\\n.container {\\n  width: 600px;\\n}\\n\\n.item {\\n  width: 300px;\\n}\\n\\n.item1 {\\n  flex-shrink: 3;\\n}\\n.item2 {\\n  flex-shrink: 2;\\n}\\n.item3 {\\n  flex-shrink: 1;\\n}\\n```\\n\\n三個 item 其總和大於 container，因此預設是會自動縮小，使用 flex-shrink 設定各個元件的縮小比例。\\n\\n##### flex-basis 元件基準值\\n\\n- 可使用不同單位的基準值\\n\\n```css\\n.container {\\n  width: 1200px;\\n}\\n.item1 {\\n  flex-basis: 300px;\\n}\\n.item {\\n  width: 200px;\\n}\\n```\\n\\n預設為 auto，當設定後，會覆蓋原先設定的 width 值。\\n\\n##### align-self 自身對齊\\n\\n- 單獨改變內元件在橫軸上的對齊(預設為垂直方向)，若 flex-direction 為 column，則對齊方向則改為水平方向(x 軸)\\n  - flex-start 以起點為基準\\n  - flex-end 以尾端為基準\\n  - center 以中間為基準\\n  - baseline 以物件基準線為基準\\n  - stretch 以起點為基準，但會撐滿容器(瀏覽器預設)\\n\\n##### order 調整順序\\n\\n預設為 0，所想將其中一個元件，移動到前面，可以將其設定為 -1。\\n\\n```css\\n.item2 {\\n  order: -1;\\n}\\n```\\n\\n自訂排列順序：\\n\\n```css\\n.item1 {\\n  order: 4;\\n}\\n.item2 {\\n  order: 1;\\n}\\n.item3 {\\n  order: 3;\\n}\\n.item4 {\\n  order: 2;\\n}\\n```\\n\\n### Global 全域屬性\\n\\n- 除了 display 以外，其他任意屬性都能使用\\n\\n#### inherit 跟隨父層屬性\\n\\n- 當父層屬性為 block，子層下 display:inherit 時，子層屬性也會變成 block\\n\\n#### initial 變回原本屬性\\n\\n- 假如我 div 屬性在某種情況下更改為 inline 屬性，那我後面有吃到同樣 CSS 的 div 想改回 block，我只要下 display:initial，就會變回 div 原本的 block 屬性\\n\\n### Display-Box 影響用箱子裝起來的所有元素\\n\\n#### none\\n\\n- 若被 display: none; 的 div 裝起來的元素，會被隱藏。\\n\\n### Display-Legacy 此屬性繼承兩者的特性\\n\\n#### inline-block\\n\\n- 讓許多區塊自動浮起來水平排列，且不用額外設定 clear 也不會讓接著的元素浮上來蓋住區塊\\n\\n#### inline-table\\n\\n#### inline-flex\\n\\n- flex 時父元素為 block，而 inline-flex 則是父元素變成 inline，他會根據子元素所有的 div 大小自適應寬度和高度\\n\\n## HTML 佈局\\n\\n### 盒子模型\\n\\n在 HTML 中元素的盒子模型分為兩種，塊狀元素(block)和行內元素(inline)。其兩種元素和 display 屬性中的 inline block 兩個屬性不盡相同。\\n\\n盒子模型中的 inline, block 類似於 display 屬性的父類，如：display 屬性中的 list-item 屬性質是屬於塊狀(block)類型。\\n\\n塊狀(block)和行內(inline)的區別:\\n\\n- block 可以設置 width, height 屬性。inline 設置無效。\\n- block 類型的元素會獨佔一行，而 inline 會在同一行內顯示\\n- block 元素的 width 預設為 100%，而 inline 則是根據自身的 內容及子元素來決定寬度。\\n\\n下面是一些常見的元素分類\\n\\n- block: p, div, ul, il, dd, dt......\\n- inline: a, img, span, strong\\n\\n### Position\\n\\n> 設定物件定位時所要的參考對象\\n\\n- 目前可以用的\\n  - static 靜態的\\n  - relative 相對定位\\n  - fixed 固定定位\\n  - absolute 絕對定位\\n  - sticky 黏貼定位\\n\\n#### Static\\n\\n靜態定位，將其他定位特性取消，回到最原始的狀態，為一般網頁最原始的預設值。\\n\\n#### Relative\\n\\n相對定位，將設定的物件其參考空間，設定為自身原始的資料流位置，且此種定位值並不會將物件獨立一層，搭配其他 css 屬性如：`top`, `bottom`, `left`, `right`可以做到顯示位置的偏移。\\n\\n#### Absolute\\n\\n絕對定位，將設定的物件，其參考空間設定為「階層離自身最近，且具備定位設定的父層空間」，若沒有任何父層空間具備定位設定，該物件將採用視窗空間座位參考空間，而父層只要具備以下四種定位類型之一，即可被絕對定位當作參考空間：\\n\\n- relative\\n- absolute\\n- fixed\\n- sticky\\n\\n此外當物件設定了 abstract 後，將會自己獨立一層，不在其他物件關連，可以利用此一特性，進行物件堆疊的視覺效果。\\n\\n#### Fixed\\n\\n固定定位，將設定的物件，將其參考空間設定為視窗，因此無論如何捲動視窗捲軸，這個物件都會固定在原位。固定定位和絕對定位一樣，都會自己獨立一層。\\n\\n#### sticky\\n\\n黏貼定位，結合 relative 和 fixed 兩大特性\\n\\n1. 預設定位在父層空間\\n2. 當視窗捲動到該物件時，會依據對該物件設定的 top 值來讓該物件呈現 fixed 在視窗中的效果。\\n3. 當物件呈現 fixed 的效果時，其所能 fixed 的空間是該物件的父層空間。\\n4. 當視窗向下捲動超過 sticky 物件的父層空間時，該物件不會再呈現 fixed 效果，而是被捲離視窗範圍。\\n\\n### float\\n\\nfloat 的屬性只有 none, left, right。\\n\\n1. 只有橫向浮動，沒有縱向浮動\\n2. 當元素應用了 float 時將會脫離一般資料流，其容器元素將得不到脫離原始資料流的子元素高度\\n3. 一個元素會圍繞著浮動元素(文繞圖)，與應用了 position 的元素相比，浮動元素並不會遮蓋後一個元素。\\n4. 浮動元素前一個元素不會受到任何影響，若想將兩塊狀元素並排顯示，則需將兩個塊狀元素都應用 float。\\n5. 會將元素的 display 屬性更變為 block\\n\\n### float 和 position 的兼容問題\\n\\n元素若同時應用 position: relative, float, (top, bottom, right and left) 屬性時，則元素會先浮動到相對應位置，再根據 (top, bottom, right and left)設置的距離來發生偏移。\\n\\n若不將 float 元素的 position 設置為 relative，此時若要設置 float 的 z-index 來實現覆蓋 position: absolute 會無效。\\n\\n同理可證，float 元素若下面存在 position: absolute 的子元素，若不將 float 元素的 position 設為 relative，absolute 元素是無法定位到 float 元素的。\\n\\n## CSS 簡易暗黑模式\\n\\n```css\\n@media (prefers-color-scheme: dark) {\\n  html {\\n    filter: invert(90%) hue-rotate(180deg);\\n  }\\n\\n  img,\\n  video,\\n  svg,\\n  code[class*=\\"language-\\"] {\\n    filter: invert(110%) hue-rotate(180deg);\\n    opacity: 0.8;\\n  }\\n\\n  img {\\n    background: #fff;\\n  }\\n}\\n```\\n\\n- `invert` 將所有色值反轉，hue-rotate 將黑白以外的其他主題色調再反轉過來(防止頁面主題色出現過大變化)\\n- `code[class*=\\"language-\\"]` 為 markdown 語法中的程式碼區塊\\n- 若 html 反轉 90% 則圖片等元素需反轉 110%\\n- 去背圖片在黑暗模式中因為背景變成黑底色，可能就會造成深色內容被深色背景吃掉的問題，為了避免這個問題，建議 img 的背景一律調成跟正常模式的背景色\\n\\n## 變數宣告\\n\\n- 定義變數：必需要定義在 css 選取器中，建議定義在 `:root` 最高層及的選取器以便於使用，使用 `--自訂名稱` 作為屬性的方式來宣告變數\\n- 取用變數值：`var(變數名稱)`\\n\\n```css\\n:root {\\n  --dangerous-color: red;\\n}\\n\\n.table {\\n  background-color: var(--dangerous-color);\\n}\\n```\\n\\n## RWD 範例\\n\\n- max-width: 表示這個數字以下(包含)都適用 (<=)\\n- min-width: 表示這個數字以上(包含)都適用 (>=)\\n\\n- landscape 縱向顯示(直式螢幕)\\n  - @media all and (orientation:landscape) { … }\\n- portrait 橫向顯示(橫式螢幕)\\n  - @media all and (orientation:portrait) { … }\\n\\n```css\\n/***----- media -----***/\\n/*** media max1024 ***/\\n\\n@media (max-width: 1024px) {\\n}\\n\\n/*** screen and media max800 ***/\\n\\n@media screen and (max-width: 800px) {\\n}\\n\\n/*** media max800 ***/\\n\\n@media (max-width: 800px) {\\n}\\n\\n/*** media max768 ***/\\n\\n@media (max-width: 768px) {\\n}\\n\\n/*** media min768 ***/\\n@media (min-width: 768px) {\\n}\\n\\n/*** media max640 ***/\\n\\n@media (max-width: 640px) {\\n}\\n\\n/*** media max480 ***/\\n\\n@media (max-width: 480px) {\\n}\\n\\n/*** media max320 ***/\\n\\n@media (max-width: 320px) {\\n}\\n```\\n","tocContent":"- [CSS 學習筆記](#css-學習筆記)\\n  - [後裔選擇器](#後裔選擇器)\\n    - [基本類型](#基本類型)\\n    - [複合型](#複合型)\\n  - [屬性選擇器`[]`](#屬性選擇器)\\n  - [表格](#表格)\\n  - [偽元素](#偽元素)\\n  - [`display:none`和`visibility:hidden`的差別](#displaynone和visibilityhidden的差別)\\n  - [css 命名](#css-命名)\\n    - [OOCSS 物件導向](#oocss-物件導向)\\n      - [結構與樣式分離](#結構與樣式分離)\\n      - [容器與內容分離](#容器與內容分離)\\n    - [SMACSS 擴展性與模組化原則](#smacss-擴展性與模組化原則)\\n    - [BEN 區塊元素](#ben-區塊元素)\\n    - [RECSS 獨立元件原則](#recss-獨立元件原則)\\n      - [元件 components](#元件-components)\\n      - [元素 elements](#元素-elements)\\n      - [變形 variants](#變形-variants)\\n      - [巢狀元件 nested components](#巢狀元件-nested-components)\\n      - [佈局 layouts](#佈局-layouts)\\n      - [輔助類 helpers](#輔助類-helpers)\\n  - [Background](#background)\\n    - [attachment 固定樣式](#attachment-固定樣式)\\n    - [blend-mode 圖層混合模式](#blend-mode-圖層混合模式)\\n    - [clip 定義背景延伸的範圍](#clip-定義背景延伸的範圍)\\n    - [color 背景顏色](#color-背景顏色)\\n    - [image 背景圖片](#image-背景圖片)\\n    - [origin 設定背景起使位置](#origin-設定背景起使位置)\\n    - [position 設定背景圖片的位置](#position-設定背景圖片的位置)\\n    - [repeat 重複](#repeat-重複)\\n    - [size 背景圖片尺寸](#size-背景圖片尺寸)\\n  - [Display](#display)\\n    - [Block 區塊元素](#block-區塊元素)\\n    - [Inline 行內元素](#inline-行內元素)\\n    - [Table](#table)\\n    - [Flex](#flex)\\n      - [外容器](#外容器)\\n        - [flex-direction 方向性](#flex-direction-方向性)\\n        - [flex-wrap 斷行](#flex-wrap-斷行)\\n        - [justify-content 調整內容](#justify-content-調整內容)\\n        - [align-items 物件對齊](#align-items-物件對齊)\\n        - [align-content 多行物件對齊](#align-content-多行物件對齊)\\n      - [內元件](#內元件)\\n        - [flex-grow 元件的延伸性](#flex-grow-元件的延伸性)\\n        - [flex-shrink 元件的收縮](#flex-shrink-元件的收縮)\\n        - [flex-basis 元件基準值](#flex-basis-元件基準值)\\n        - [align-self 自身對齊](#align-self-自身對齊)\\n        - [order 調整順序](#order-調整順序)\\n    - [Global 全域屬性](#global-全域屬性)\\n      - [inherit 跟隨父層屬性](#inherit-跟隨父層屬性)\\n      - [initial 變回原本屬性](#initial-變回原本屬性)\\n    - [Display-Box 影響用箱子裝起來的所有元素](#display-box-影響用箱子裝起來的所有元素)\\n      - [none](#none)\\n    - [Display-Legacy 此屬性繼承兩者的特性](#display-legacy-此屬性繼承兩者的特性)\\n      - [inline-block](#inline-block)\\n      - [inline-table](#inline-table)\\n      - [inline-flex](#inline-flex)\\n  - [HTML 佈局](#html-佈局)\\n    - [盒子模型](#盒子模型)\\n    - [Position](#position)\\n      - [Static](#static)\\n      - [Relative](#relative)\\n      - [Absolute](#absolute)\\n      - [Fixed](#fixed)\\n      - [sticky](#sticky)\\n    - [float](#float)\\n    - [float 和 position 的兼容問題](#float-和-position-的兼容問題)\\n  - [CSS 簡易暗黑模式](#css-簡易暗黑模式)\\n  - [變數宣告](#變數宣告)\\n  - [RWD 範例](#rwd-範例)"}')},9550:function(n){"use strict";n.exports=JSON.parse("{\"name\":\"Carbon 學習筆記.md\",\"content\":\"# Carbon 學習筆記\\n\\n>\\n\\n> php 常用處理時間格式的套件\\n>\\n> 在 laravel 5.0 之後為預設套件\\n>\\n> 底層是使用 PHP `Datetime` 的 `strtotime` 方法\\n>\\n> ---\\n>\\n> 參考資料：\\n>\\n> [Carbon 使用技巧整理 (上)](https://reurl.cc/eWWbLm)\\n>\\n> [Carbon 使用技巧整理 (下)](https://reurl.cc/X55rGD)\\n>\\n> [Laravel 5 學習筆記 - Carbon 時間套件](https://www.kancloud.cn/kancloud/laravel-5-learning-notes/50163)\\n\\n## 物件建立\\n\\n### 建立當下時間\\n\\n```php\\n$now = new Carbon();\\n$now = Carbon::now();\\n$now = new Carbon('first day of January 2022', 'America/Vancouver');  //  2022-01-01 00:00:00.0 America/Vancouver (-08:00)\\n```\\n\\n- 直接建立可以解析文字，且指定時區\\n\\n### 解析並產生時間物件\\n\\n```php\\nCarbon::parse('first day of December 2022');    // 2022-12-01 00:00:00.0 UTC (+00:00)\\nCarbon::parse('2022/4/01');                     // 2022-04-01\\nCarbon::parse('2022/04/01');                    // 2022-04-01\\nCarbon::parse('2022-04-01');                    // 2022-04-01\\n```\\n\\n### 依規則建立\\n\\n```php\\nCarbon::create($year, $month, $day, $hour, $minute, $second, $tz);  // 通用變數順序\\nCarbon::createFromDate($year, $month, $day, $tz);\\nCarbon::createFromTime($hour, $minute, $second, $tz);\\nCarbon::createFromTimeStamp('1601735792.198956');                   // 2020-10-03 14:36:32.198956\\n```\\n\\n- 若傳入的資料不完整，亦能產生時間物件，預設為最小值\\n- 也可以用 `parse` 的方式操作 `create`\\n- 若不帶值，則會產生 `0001-01-01`\\n\\n```php\\nCarbon::create($year, $month);  // 2020-10-03 00:00:00\\nCarbon::create('2022/4/01');    // 2022-04-01 00:00:00.0\\nCarbon::create();               // 0000-01-01\\n```\\n\\n### Bug 與安全模式\\n\\n- `createFrom()` 其預設帶值的特性是取的當下時間，因此若在大月的月底使用，容易有跨月的問題\\n\\n```php\\nCarbon::createFromDate(2022, 4);    // 未帶入的參數，會預設為當下的時間\\n// 當下為 30 號：2022-04-30\\n// 若為 31 號：2022-05-01\\n```\\n\\n- 使用 `createSafe()` 安全模式建立，會幫忙檢查其合理性。若傳入不合法的數值，會回傳 Exception。\\n\\n```php\\nCarbon::create(2022, 1, 35);        // 2022-02-04\\nCarbon::createSafe(2022, 1, 35);    //  throw InvalidDateException\\n```\\n\\n## 時間格式 時區、本地化\\n\\n|         單位          | 縮寫 |\\n| :-------------------: | :--: |\\n|      年(四位數)       |  Y   |\\n|      年(二位數)       |  y   |\\n|       月(英文)        |  F   |\\n|     月(英文縮寫)      |  M   |\\n|   月(補 0 至二位數)   |  m   |\\n|   日(補 0 至二位數)   |  d   |\\n|          日           |  j   |\\n|      星期(英文)       |  l   |\\n|    星期(英文縮寫)     |  D   |\\n| 星期(英文縮寫 + 逗號) |  r   |\\n|      星期(數字)       |  w   |\\n|        時(24)         |  G   |\\n|        時(12)         |  g   |\\n| 時(24, 補 0 至二位數) |  H   |\\n| 時(12, 補 0 至二位數) |  h   |\\n|          分           |  i   |\\n|          秒           |  s   |\\n|         毫秒          |  S   |\\n|         時區          |  e   |\\n|         時區          |  T   |\\n|         時差          |  P   |\\n|        時間戳         |  U   |\\n\\n### 本地語系\\n\\n- Laravel 程式預設\\n\\n```php\\n$date = Carbon::now()->locale('zh-tw');\\n$date->diffForHumans();     // 1 秒前\\n$date->monthName;           // 十一月\\n$date->isoFormat('LLLL');   // 2022年11月17日星期四 02:01\\n```\\n\\n- 手動設定\\n\\n```php\\n// 通用設定\\n$factory = new Factory([\\n    'locale' => 'zh-tw',\\n    'timezone' => 'Asia/Taipei'\\n]);\\n$factory->now();\\n\\n// 暫時設定\\nCarbon:now()->settings([\\n    'locale' => 'fr-FR',\\n    'timezone' => 'Europe/Paris'\\n]);\\n```\\n\\n### Format\\n\\n```php\\nCarbon::now()->format('Y-m-d H:m:s l');             // 2022-11-17 02:11:55 Thursday\\nCarbon::now()->translatedFormat('Y-m-d H:m:s l');   // 2022-11-17 02:11:55 星期四\\n```\\n\\n- 除了利用 `format()` 輸出時間格式，也可以使用 `toDateString()`, `toTimeString()`, `toISOString()` 等方法，將時間物件轉換成字串，亦有提供 `toArray()`, `toObject()` 方法。\\n\\n```php\\nCarbon::hasFormat('2022-11-11', 'Y-m-d')                // true\\nCarbon::hasFormat('2022~11~11', 'Y~m~d')                // true\\nCarbon::hasFormatWithModifiers('2022-11-11', 'Y#m#d')   // true\\nCarbon::hasFormatWithModifiers('2022/11/11', 'Y#m#d')   // true\\nCarbon::hasFormatWithModifiers('2022~11~11', 'Y#m#d')   // false\\n```\\n\\n- 利用 `hasFormat()` 來判斷 `format` 格式\\n- `hasFormatWithModifiers()` 為模糊比對，可以用 `#` 區隔時間縮碼，可以同時判斷 `/`, `-`\\n\\n## Getter & Setter\\n\\n### 時間屬性\\n\\n```php\\n$date = Carbon::parse('2022-02-28');\\n$date->year;        // 2022\\n$date->month;       // 2\\n$date->dayOfYear;   // 59\\n$date->dayOfMonth;  // 28\\n```\\n\\n### 時間與語系\\n\\n- 判斷時間事件的語系有沒有符合應用程式，及有沒有使用 UTC 國際標準時區\\n\\n```php\\nCarbon::now()->local;                       // bool(true)，檢查時區符合應用程式\\nCarbon::now('America/Vancouver')->local;    // bool(false)\\nCarbon::now()->utc;                         // bool(false)，檢查標準時區\\n```\\n\\n### Setter\\n\\n- 直接依單位設定時間\\n\\n```php\\n$date = Carbon::now();\\n$date->setYear(2005);\\n$date->year;           // 2005\\n```\\n\\n```php\\n$sourcel = new Carbon('2010-05-16 22:40:10.1');\\n$date-> new Carbon('2001-01-01 01:01:01.2');\\n$date->setTimeFrom($sourcel);   // 2001-01-01 22:40:10\\n```\\n\\n- `setTimeFrom()` 保持日期，只設定時分秒\\n- `setDateFrom()`\\n- `setDateTimeFrom()`\\n- **注意！以上作法不會改變時區**\\n\\n## 比較\\n\\n### 大於、小於和等於\\n\\n```php\\n$first = Carbon::create(2022, 11, 11, 0, 0, 0);\\n$second = Carbon::create(2022, 11, 11, 0, 0, 0, 'America/Vancouver'); // 時區設定\\n\\n$first->equalTo($second); // false\\n$first->notEqualTo($second); // true\\n```\\n\\n```php\\n$first = Carbon::parse('2022-11-11 00:00:00');\\n$second = Carbon::parse('2022-11-11 12:00:00');\\n\\n$first->greaterThan($second);           // false  大於\\n$first->greaterThanOrEqualTo($second);  // false 大於等於\\n$first->gt($second);                    // 可以使用縮寫\\n$first->gte($second);\\n$first >= $second;                      // 也可以使用運算式\\n\\n$first->lessThan($second);              // true  小於\\n$first->lessThanOrEqualTo($second);     // true 小於等於\\n$first->lt($second);\\n$first->lte($second);\\n$first <= $second;\\n\\n$first>equalTo($second);                // false 等於\\n$first>notEqualTo($second);             // true 不等於\\n```\\n\\n### 之間、最小最大與最近最遠\\n\\n```php\\n$first = Carbon::parse('2022-11-11');\\n$second = Carbon::parse('2022-11-15');\\n$data = Carbon::parse('2022-11-15');\\n$data->between($first, $second);        // true\\n$data->between($first, $second, false); // 嚴格模式 false\\n```\\n\\n```php\\n$first = Carbon::parse('2022-11-11');\\n$second = Carbon::parse('2022-11-15');\\n\\n$first->min($second);   // '2022-11-11'\\n$first->max($second);   // '2022-11-15'\\n\\n$data = Carbon::parse('2022-11-14');\\n$data->closest($first, $second);    // 2022-11-15\\n$data->farthest($first, $second);   // 2022-11-11\\n```\\n\\n- `closest` 和 `farthest` 函式可以找出兩個時間物件中，與特定時間物件最接近或最遙遠的物件\\n\\n### 和今天比較\\n\\n```php\\n// 假設今天是 2022-11-10\\n$date = Carbon::parse('2022-11-11');\\n\\n$date->isSameWeek();    // true\\n$date->isSameMonth();   // true\\n$date->isCurrentDay();  // false\\n```\\n\\n- 另外還有 `isMonday()` `isTomorrow()` `isToday()`，`isBirthday()` 可以判斷是否為不同年的同一天\\n\\n## 時間運算\\n\\n**重要觀念**：carbon 物件在運算過程中會改變原始物件，因此在運算之前要加上 `copy()` 語法。\\n\\n```php\\n$date = Carbon::create(2022, 11, 11);\\n$date->copy()->addDay();    // 2022-11-12\\n// 複數運算，時間單位要加上 s\\n$date->addDays(2);          // 2022-11-13\\nprint_r($date);             // 2022-11-13\\n\\n$date->copy()->subDay(); // 2022-11-12\\n```\\n\\n### Overflow 溢出\\n\\n```php\\n$date = Carbon::create(2022, 1, 31);\\n$date->copy()->addMonth(); // 2022-03-03\\n```\\n\\n- 一般而言，加上一個月後應該要是二月底(2/28 或 2/29)，為避免不合理的狀況發生，須加上 `NoOverflow` 關鍵字，讓運算結果不會溢出\\n\\n```php\\n$date = Carbon::create(2022, 1, 31);\\n$date->copy()->addMonthNoOverflow(); // 2022-02-28\\n$date->copy()->subMonthNoOverflow(2); // 2022-11-30\\n```\\n\\n另外亦可以使用 `addUnitNoOverflow` 針對溢出的單位做控管，也可以在設定值，規定不可以溢出\\n\\n```php\\n$date = Carbon::parse('2022-01-31');\\n\\n// UnitNoOverflow(運算單位，值，限制防溢出單位)\\n$date->copy()->addUnitNoOverflow('hour', 7, 'day') // 07:00\\n$date->copy()->addUnitNoOverflow('hour', 48, 'day') // 23:59\\n\\nCarbon::parse('2022-02-01')->copy()->setUnitNoOverflow('day', 31, 'month'); // 2022-02-28\\n```\\n\\n## 差異\\n\\n### 一般差異\\n\\n- 無條件捨去，滿一個時間單位，才會回傳 1\\n\\n```php\\n$date->diffInMinths($date->copy()->addMonthNoOverflow()); // 1\\n```\\n\\n- 除了整數的差異，也可以比對到小數點單位的時間差\\n\\n```php\\nCarbon::parse('06:01:23')->floatDiffInminutes('06:02:34');              // 1.1833\\nCarbon::parse('2022-01-01 12:00')->floatDiffInDays('2022-02-11 06:00')  // 40.75\\n```\\n\\n- 不建議用做計算月份，會有 bug\\n\\n```php\\nCarbon::parse('2022-01-31')->floatDiffInmonthss('2022-03-01');\\n// 一般而言應回傳 1.xx，但實際回傳 0.9xx 因為跨到二月不足三十天\\n```\\n\\n### Real Difference\\n\\n```php\\n$date = new Carbon('2014-03-30 00:00:00', 'Europe/London');]\\n$date->addRealHours(25);      // 2014-03-31 02:00:00.0 Europe/London (+01:00)\\n\\n$date->diffInRealHours('2014-03-30 00:00:00');  // 25\\n$date->diffInHours('2014-03-30 00:00:00');      // 26\\n```\\n\\n- 運算時，若出現跨日的情形，時間物件的時區會自動針對該值做增減，而在比較兩個時間點的差異時，若未用 `real` 則會計算出表面的時間差。\\n\\n## 口語化修改器\\n\\n```php\\n$date = Carbon::parse('2022-11-11 12:00:00');\\n$date->startOfDay();    // 2022-11-11 00:00:00\\n$date->endOfDay();      // 2022-11-11 23:59:59\\n\\n$date->startOfMonth();  // 2022-11-01 00:00:00\\n$date->endOfMonth();    // 2022-11-30 23:59:59\\n```\\n\\n- 亦支援 `today()`, `yesterday()`, `next()`\\n\",\"tocContent\":\"- [Carbon 學習筆記](#carbon-學習筆記)\\n  - [物件建立](#物件建立)\\n    - [建立當下時間](#建立當下時間)\\n    - [解析並產生時間物件](#解析並產生時間物件)\\n    - [依規則建立](#依規則建立)\\n    - [Bug 與安全模式](#bug-與安全模式)\\n  - [時間格式 時區、本地化](#時間格式-時區本地化)\\n    - [本地語系](#本地語系)\\n    - [Format](#format)\\n  - [Getter \\\\& Setter](#getter--setter)\\n    - [時間屬性](#時間屬性)\\n    - [時間與語系](#時間與語系)\\n    - [Setter](#setter)\\n  - [比較](#比較)\\n    - [大於、小於和等於](#大於小於和等於)\\n    - [之間、最小最大與最近最遠](#之間最小最大與最近最遠)\\n    - [和今天比較](#和今天比較)\\n  - [時間運算](#時間運算)\\n    - [Overflow 溢出](#overflow-溢出)\\n  - [差異](#差異)\\n    - [一般差異](#一般差異)\\n    - [Real Difference](#real-difference)\\n  - [口語化修改器](#口語化修改器)\"}")},7401:function(n){"use strict";n.exports=JSON.parse('{"name":"D3.js 學習筆記.md","content":"# D3.js 學習筆記\\n\\n## 環境設定\\n\\n## 方法\\n\\n### union() 合併多個集合\\n\\n```js\\n// 合併兩個集合\\nvar a = [1, 2, 3];\\nvar b = [4, 5, 6];\\nvar c = d3.union(a, b);\\nconsole.log(c); // [1, 2, 3, 4, 5, 6]\\n\\n// 合併三個集合\\nvar a = [1, 2, 3];\\nvar b = [4, 5, 6];\\nvar c = [7, 8, 9];\\nvar d = d3.union(a, b, c);\\nconsole.log(d); // [1, 2, 3, 4, 5, 6, 7, 8, 9]\\n```\\n\\n```js\\n// 合併兩個集合，僅合併相等的元素\\nvar a = [1, 2, 3];\\nvar b = [4, 5, 6];\\nvar c = d3.union(a, b, function (a, b) {\\n  return a === b;\\n});\\nconsole.log(c); // [2]\\n```\\n\\n### index() 多維排序\\n\\n```js\\nconst data = [\\n  { name: \\"ABC\\", amount: \\"34.0\\", date: \\"11/12/2015\\" },\\n  { name: \\"DEF\\", amount: \\"120.11\\", date: \\"11/12/2015\\" },\\n  { name: \\"MNO\\", amount: \\"12.01\\", date: \\"01/04/2016\\" },\\n  { name: \\"XYZ\\", amount: \\"34.05\\", date: \\"01/04/2016\\" },\\n];\\n\\nconst index_a = d3.index(data, (d) => d.name);\\nconst index_b = d3.index(\\n  data,\\n  (d) => d.name,\\n  (d) => d.date\\n);\\n\\nconsole.log(index_a);\\nconsole.log(index_b);\\n```\\n\\n```log\\n# index_a\\nMap {\\n  \'ABC\' => { name: \'ABC\', amount: \'34.0\', date: \'11/12/2015\' },\\n  \'DEF\' => { name: \'DEF\', amount: \'120.11\', date: \'11/12/2015\' },\\n  \'MNO\' => { name: \'MNO\', amount: \'12.01\', date: \'01/04/2016\' },\\n  \'XYZ\' => { name: \'XYZ\', amount: \'34.05\', date: \'01/04/2016\' }\\n}\\n\\n# index_b\\nMap {\\n    \'ABC\' => Map {\\n        \'11/12/2019\' => { name: \'ABC\', amount: \'34.0\', date: \'11/12/2019\' }\\n    },\\n    \'DEF\' => Map {\\n        \'11/02/2020\' => { name: \'DEF\', amount: \'120.11\', date: \'11/02/2020\' }\\n    },\\n    \'MNO\' => Map {\\n        \'01/04/2020\' => { name: \'MNO\', amount: \'12.01\', date: \'01/04/2020\' }\\n    },\\n    \'XYZ\' => Map {\\n        \'03/04/2020\' => { name: \'XYZ\', amount: \'34.05\', date: \'03/04/2020\' }\\n    }\\n}\\n```\\n\\n### entries() 回傳包含和指定物件的屬性名稱和屬性值的陣列或關聯數組\\n\\n```js\\n// Initialising an object\\nvar month = { January: 1, February: 2, March: 3 };\\n\\n// Calling the d3.entries() function\\nA = d3.entries(month);\\n\\nconsole.log(A);\\n// [{\\"key\\":\\"January\\",\\"value\\":1},{\\"key\\":\\"February\\",\\"value\\":2}, {\\"key\\":\\"March\\",\\"value\\":3}]\\n```\\n\\n```js\\n// Initialising an object\\nvar month = { GeeksforGeeks: 0, Geeks: 2, Geek: 3, gfg: 4 };\\n\\n// Calling the d3.entries() function\\nA = d3.entries(month);\\n\\nconsole.log(A);\\n// [{\\"key\\":\\"GeeksforGeeks\\",\\"value\\":0},{\\"key\\":\\"Geeks\\",\\"value\\":2}, {\\"key\\":\\"Geek\\",\\"value\\":3},{\\"key\\":\\"gfg\\",\\"value\\":4}]\\n```\\n","tocContent":""}')},2755:function(n){"use strict";n.exports=JSON.parse('{"name":"Design Pattern.md","content":"# 設計模式 Design Pattern\\n\\n> 參考資料\\n>\\n> [設計模式系列文](https://kimlin20011.medium.com/%E4%BB%80%E9%BA%BC%E6%98%AF%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F-design-pattern-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E6%96%87-%E4%B8%8A-5988dacfda4a)\\n\\n## 什麼是設計模式\\n\\n> 每一個模式(Pattern)都是在某個特定情境(context)下，針對某問題(Problem)提出的解決方案(solution)。\\n\\n在軟體工程中將 Pattern 分為：\\n\\n- Architecture Pattern: 解決軟體系統架構層面的問題。如：MVC 架構、Layer...\\n- Design Pattern: 提供改善軟體系統中子系統與元件(components)的方案。常見如：Observer, Facade, Adapter...\\n- Idioms: 是一種 lowest-level pattern，為 programming(程式撰寫)層級提供程式改善方案，主要透過程式語言的解決方案來實現。\\n\\n### 範例\\n\\n情境(context)：每個人都喜歡坐在窗邊，有低矮的大窗台與舒適的椅子，若一個房間中沒有如此環境，很難讓人感到舒服。\\n\\n此時的問題(problem)正是：如何讓人感到舒服自在？\\n\\n此時有兩個需求(Force)：\\n\\n- 你想要舒服地坐下\\n- 你想要面對窗戶\\n\\n但往往兩個需求會互相衝突：\\n\\n- 舒服的椅子背對窗戶\\n- 面對窗戶只有一張壞掉的椅子\\n\\n最好的方法就是當你每次在安排室內布局時，雖然房間可能沒有太多擺設的選擇，但至少依循著一個\\"面對窗戶有一個舒服的位置\\"這樣的模式。\\n\\n## 如何描述設計模式\\n\\n設計模式的發表雖然也是學術的一環，但其講求的重點與一般學術論文不同。\\n\\n比起一般學術論文要求深入嚴謹，設計模式更像是一個產品說明，須具備高度結構性的方法與淺顯易懂的行文來表達。\\n\\n這裡主要使用的是 POSA 中，設計模式的描述結構。\\n\\n### Name\\n\\n名字是一個讀者了解模式最快的方法，也是總結一個模式的重要方法。而且要對 pattern 命名有很多種方法，常見的有：\\n\\n- 取自 solution 的抽象特徵，如：\\n  - Adapter 模式(像是一個轉接器，轉介不同規格的物品)\\n  - Observer 模式(像一個觀察者，若訂閱的標的有狀態的變化，則馬上通知訂閱者)\\n- 取自 solution 中元件的名稱，像是 MVC (取自系統中的 model、view、controller 三個元件的頭一個字母)\\n\\n### Context\\n\\n舉出模式可能適用的情況。主要是整理 problem 可能發生的情境來界定 problem 可能發生的範圍。雖然 context 不能列出所有情境，但至少可以提供重要的指引。\\n\\n### Problem\\n\\nproblem 是描述會在 context 中重複發生的問題。另一方面 problem 也是 pattern 的核心元素，說明主要模式的設計議題。\\nproblem 中有一個很重要的元素：force。在前面的範例中有提到，force 是導致設計問題中存在的具體的力，同時，force 幫助 context 中具體形塑出 solution 的邊界。主要列出幾個需要解決的層面：\\n\\n- solution 需要滿足的需求\\n- solution 需要考慮的限制\\n- solution 需要包含的特性\\n\\n但不幸的是，force 常常是互相矛盾且衝突的，在設計 solution 時常常需要權衡不同的 force 來得到最適合的解決方案。\\n\\n### Solution(解決方案)\\n\\n以高階的方式描述 pattern 解決方案原理。solution 提供解決重複發生的 problem 的方法，並盡可能平衡相關的 force (前文提到 force 常常是互相矛盾的)。另一方面，solution 又以 structure(建構) (像是以 UML 類別圖描述各個類別元件之間的關係)與 Dynamics(動力學) (像是以 UML 的循環圖描述元件之間的動態行為與協作)層面來描述 pattern 中不同元件之間的靜態關連與動態協作。\\n\\n### Implementation(執行)\\n\\n引導讀者實作 pattern。此部分可以依照 pattern 描述的需求採用，並適當提供實作範例(如：程式碼等等)，通常提供與 Example 部分相關的實作方案。\\n\\n### Example\\n\\n透過舉實際案例來補足在 solution 與 Implementation 部分沒有被涵蓋但又為解決方案中重要的層面。\\n\\n### Variants(變體)\\n\\n此部分可以依照 pattern 描述的需求採用。簡述 pattern 相關變形的其他 pattern。\\n\\n### Known uses\\n\\n列舉與 pattern 相關的現存系統。用來證明提出的 pattern 是真實世界中相關情境存在的設計問題，pattern 的解決方案已被應用且能有效的解決問題。\\n\\n### Consequences(結果)\\n\\n列舉 pattern 的優劣勢。一個 pattern 不可能是完美的，因此也需要列出在特定情境下可能造成的限制或缺陷。\\n\\n### Related pattern\\n\\n列舉用來解決相似情境下的設計問題或能與該 pattern 整合協作的其他 pattern。\\n\\n## 撰寫設計模式時需要的思考脈絡\\n\\n再次列舉上面提到的例子：\\n\\n1. 首先，先確定目標的情境。\\n   > 我們要設計一個工作室，而這個工作室只有兩扇窗，幾張舒適的椅子，幾張難坐的椅子\\n2. 確定設計問題\\n   > 如何讓工作室工作的人一整天都能舒服自在。\\n3. 接著思考影響上述問題發生的具體作用力，以形塑解決方案的邊界\\n   > 需要舒適的坐著\\n   > 想要靠窗，才能偶爾看看窗外來紓解壓力。\\n4. 列出這些 force 後，接著可以開始設計解決方案\\n   > 需要舒服地坐著：在工作位置上挑選舒適的椅子\\n   > 想要靠窗：將辦工作桌與辦公椅，盡可能的緊靠窗戶\\n5. 可以用繪圖的方式輔助說明解決方案，列出工作室擺設的動態(這個模式可能不需要)與靜態(擺設圖)關係\\n6. 透過舉例，引導參考此模式的施工人員，實作本模式提出的方法\\n   > 例如：列出椅子的規格、窗戶和椅子的距離、擺放角度等等\\n7. 為了證明此方案是有效的，也可以利用幾個經典的室內設計案例來佐證\\n8. 完成大部分的設計模式內容後，可以透過列舉優點與限制來為設計模式做個總結\\n   > 優點：可以使人長時間舒適的待在工作室工作\\n   > 缺點：選擇舒適的椅子，需花費較高的成本。窗戶須有不同高度(人坐著可以直接看到窗外的高度)\\n9. 透過提出的解決方案的特徵，來為此設計模式命名\\n   > 椅子與窗戶的對向模式\\n\\n## 設計模式撰寫時的思考脈絡\\n\\n- 界定情境(context)\\n- 定義設計問題(problem)\\n- 從設計問題中列出會影響該問題發生具體的力(force)\\n- 依循所列出的 force 來設計解決方法(solution)\\n- 統整解決方案，以靜態(structure)與動態(dynamics)的描述方式表述之\\n- 最後引導讀者實作 pattern 並提出相關的範例(example)\\n- 為了證明 pattern 的實用性，可列舉出已知應用 pattern 中相似解法的例子(known uses)\\n- 最後列出應用該 pattern 後產生的優點與限制(consequences)\\n- 通常在 pattern 完成之後可以依據 pattern 的特性為 pattern 命名(name)，也可以邊撰寫時邊思考。\\n\\n## 如何完善已完成的設計模式？\\n\\n### Big Picture\\n\\n- 如何掌握設計模式的主旨：\\n\\n  - 設計模式的初稿通常難以理解。而描述得太簡潔往往缺乏實質的內容；相反的，內容太過龐大（描述的多而深入）通常因為太專注細節的描述而模糊了模式的核心概念。\\n\\n- ThereFore\\n  - shepherd 在剛剛接觸設計模式的時候必須先閱讀 problem 與 solution 的部分來掌握該模式的大綱，這主要是因為 sheep 通常最注重再解決方案的設計部分，並將所有對模式的想法，灌輸在 solution 中。\\n\\n### Matching Problem and Solution\\n\\n- 如何確定模式真的是模式的樣子(pattern-ish)\\n\\n  - 在撰寫模式時，常會先寫好 solution （因為可能在不斷實作中領悟到通用解決方法），而後在去設計模式的問題，所以在審稿的時候，常常讀起來不清楚這個模式的真正目的是什麼。\\n\\n- ThereFore\\n  - 審稿的時候要確認設計模式的 solution 有完整的針對 problem 解決，解決方案也不能超過 problem 的範圍（剛好就好，不能多餘），之後再加強其中不足的部分（problem 或是 solution ）。\\n\\n### Convincing Solution\\n\\n- 如何提高設計模式的可信度(believable)\\n  - 有時候 solution 提供的解法根本無濟於事，看起來沒有實現的能力。\\n- therefore\\n  - 一般的 pattern 在看完 solution 後通常要有「原來可以者麼解決」的感覺。如果沒有，則比需要提供真正實作應用的細節，才能使人信服。\\n\\n### Forces Define Problem\\n\\n- 如何更深層的瞭解問題\\n  - 很多設計模式的初稿，對於 problem 的描述都很薄弱。\\n- Therefore\\n  - 須要透過 Force 來具體化對 problem 的敘述。而作者須要以迭代的方式不對斷修正與增強對 Force 與 Problem 的敘述，透過列出具體化不同的 Force，尋找交集後，最後為其總結出核心問題。\\n\\n### Balance Context\\n\\n- 如何為 pattern 劃定出合適的範圍\\n  - 在撰寫設計模式的 context 時，常常不小心把情境的範圍界定的太大或太小，也往往忽略了界定該情境應用 pattern 之後可能的結果。\\n- Therefore\\n  - 在撰寫設計模式時，必須要具體思考並說明情境使用與不適用這個模式前後的差異，這樣不僅能夠賦予模式的使用者對模式應有的期望，也能幫助我們界定剛好符合所提出的模式範圍。\\n\\n### War Store\\n\\n- 如何推進模式前進？\\n  - 有時不管如何 sheep 如何修改或是更正 shepherd 的建議，shepherd 還是覺得設計模式描述的不清楚、缺乏對該模式的實際應用想像。\\n- Therefore\\n  - 這時 shepherd 應要求 sheep 提供設計模式應用的真實案例，幫助對模式的想像更為生動實際。\\n\\n### Form Follows Function\\n\\n- 如何將設計模式套用到一個新的格式(form)\\n  - 有時 sheep 所選擇得 patten 格式，沒辦法完表達(或是不適合)所提出的設計模式，這可能是因為 sheep 對 patten 的格式不熟悉(可能只知道一兩個)，或是因為要把格式整個換掉，須要花費相當大的功夫，因此選擇不換。\\n- Therefore\\n  - shepherd 須要一步一步的引導 sheep 修改原本模式所應用的格式(一次改一些就好)，而終極目的是「making the form serve the patten」\\n\\n### Small Patterns\\n\\n- 如何使設計模式變的更可消化\\n  - 設計模式常常經由不斷修正(可能是因為 sheep 不願意對已完成的內容做刪減)後，內容變的很龐大。\\n- Therefore\\n  - 先放任內容增加，最後再做刪減。刪減可以透過移除不必要的區塊，或是將過於龐大模式，拆分成多個小模式(要做到一個模式只能有一個 context, problem 與 solution)\\n","tocContent":""}')},305:function(n){"use strict";n.exports=JSON.parse('{"name":"Docker 學習筆記.md","content":"# Docker 學習筆記\\n\\n>\\n\\n> 參考資料：\\n>\\n> [Docker 基本知識 以及 Docker Compose 實戰經驗](https://hackmd.io/@leonsnoopy/Sya_DevI7#Docker-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AD%98-%E4%BB%A5%E5%8F%8A-Docker-Compose%E5%AF%A6%E6%88%B0%E7%B6%93%E9%A9%97)\\n>\\n> [基礎系統及 docker hub 指令](https://joshhu.gitbooks.io/dockercommands/content/Basics/Basics.html)\\n>\\n> [How to Deploy Laravel with Docker on Ubuntu 18.04](https://help.clouding.io/hc/en-us/articles/360010679999-How-to-Deploy-Laravel-with-Docker-on-Ubuntu-18-04)\\n>\\n> [Laravel 實戰經驗分享 - Day26 Dockerize 你的 Laravel 專案](https://ithelp.ithome.com.tw/articles/10251844)\\n\\n## 安裝 Docker: Docker for Windows\\n\\n> Windows 10\\n> 需啟用 Hyper-v\\n> 控制台 -> 程式和功能 -> 開啟或關閉 Windows 功能\\n> 將\\"Hyper-v\\"和\\"容器\\"設為開啟\\n\\n- 下載[Docker for Windows](https://docs.docker.com/desktop/get-started/)\\n\\n## 基本概念\\n\\n- docker 主要元件：\\n  - `image` 映像檔\\n  - `container` 容器\\n  - `repository` 倉庫\\n\\n執行 docker 的主機稱為 Host，當 Host 執行 `docker run` 指令時，Docker 會操作這三個元素。\\n\\n- Image、container、repository 之間的關係就像光碟一樣：早期世紀帝國等光碟遊戲，會需要搭配其他可讀寫空間（如硬碟），才有辦法執行。\\n  - image 像光碟片，唯獨且無法獨立執行。\\n  - container 像硬碟，可讀可寫可執行。\\n  - repository 像光碟盒，儲存 image。\\n  - registry 則是光碟零售商。\\n\\n### Image\\n\\n- image 包裝了一個執行特定環境所需要的資源。\\n  每個 image 都有獨一無二的 digest，這是從 image 內容作 sha256 產生的。這個是能讓 image 無法隨意更變內容，維持資料的一致性。\\n\\n雖然 image 裡有必要的資源，但他無法獨立執行，必須靠 container 間接執行。\\n\\n### Container\\n\\n- 基於 image 可以建立出 Container。\\n  他的概念像是建立一個可讀寫內容的外層，架在 image 之上。實際存取 container 會經過可讀寫層與 image，因此看到的內容會是兩者合併後的結果。\\n\\nContainer 特性與 image 不一樣，因為有可讀寫層，所以 container 可以讀寫，也可以拿來執行。\\n\\n### Repository\\n\\n- repository 是存放 image 的空間\\n  docker 的設計類似`分散式版本控制`的方法來存的方法來存放各種 image，而分散式架構就會有類似 git 的 pull/push 行為，實際做的事情也跟 git 類似：為了要跟遠端的 repository 同步。\\n\\n另一個與 repository 很像，但容易混用的詞為 Registry。Registry 涵蓋範圍更廣，包含了更多 repository 與身分驗證功能等，通常比較常討論的也是 registry。\\n\\n目前 docker 上面預設的 registry 為 DockerHub，大多數程式或服務的 image 都可以在上面找到。\\n\\n## Hello World\\n\\n```bash\\n$ docker run hello-world\\nUnable to find image \'hello-world:latest\' locally\\nlatest: Pulling from library/hello-world\\n0e03bdcc26d7: Pull complete\\nDigest: sha256:7f0a9f93b4aa3022c3a4c147a449bf11e0941a1fd0bf4a8e6c9408b2600777c5\\nStatus: Downloaded newer image for hello-world:latest\\n\\nHello from Docker!\\n```\\n\\n- `docker run <image name>` 會建立一個 container 並執行，而因為 container 需要基於 image 建立，所以 docker run 有一個必要參數為 `image name`。\\n\\n### 確認 Image 存在於 Repository\\n\\n首先先確認 `hello-world` 是否存在於本機的 repository，本機找不到的話，就需要從遠端的 repository 下載。\\n\\n```bash\\nUnable to find image \'hello-world:latest\' locally\\nlatest: Pulling from library/hello-world\\n0e03bdcc26d7: Pull complete\\nDigest: sha256:7f0a9f93b4aa3022c3a4c147a449bf11e0941a1fd0bf4a8e6c9408b2600777c5\\nStatus: Downloaded newer image for hello-world:latest\\n```\\n\\n### 建立 Container 並執行\\n\\n確認 image 存在後，即可建立 container 並執行。\\n\\n- `docker run` 預設的行為是：\\n  1. 前景建立並執行 container\\n  2. 等待執行程式結束後，會回到前景的命令提示字元\\n  3. 該 container 會被標記為結束狀態。\\n\\n### 列出所有已建立的 container\\n\\n```bash\\ndocker ps -a\\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES\\n6d7e00198a56        hello-world         \\"/hello\\"            12 seconds ago      Exited (0) 11 seconds ago                       relaxed_bhabha\\n```\\n\\n`STATUS` 表示 container 的狀態，`Exited(0)` 後面的數字為程式結束後回傳的狀態碼，通常 0 為正常結束，非 0 則唯有錯誤。\\n\\n`CONTAINER ID` 和 `NAMES` 為獨一無二，執行多次 `docker run` 後，會生不一樣名字的 container。\\n\\n### 移除 container\\n\\n若一直執行 `docker run` 會使 container 數量不斷增加，一般而言沒有再用到的 container 就會將他移除\\n\\n```bash\\n# 移除時使用 CONTAINER ID 和 NAMES 都可以。\\ndocker rm 6d7e00198a56\\n\\n#移除後再檢查一次\\ndocker ps -a\\n```\\n\\n## ubuntu\\n\\n### pull\\n\\n```bash\\n# 搜尋 ubuntu\\ndocker search ubuntu\\n# 將 ubuntu 的 image pull 下來\\ndocker pull ubuntu\\n```\\n\\n查看 docker 的 image，應可以看到最新版本的 ubuntu\\n\\n```bash\\ndocker images\\n```\\n\\n| REPOSITORY | TAG    | IMAGE ID     | CREATED     | SIZE   |\\n| ---------- | ------ | ------------ | ----------- | ------ |\\n| ubuntu     | latest | 6b7dfa7e8fdb | 3 weeks ago | 77.8MB |\\n\\n### 啟動\\n\\n```bash\\n> docker run -itd --name ubuntu-test ubuntu\\n6ffebdd2bce193afe7e3fbaa53c6f2e1dffa845e2c8ec55fef899ba191470dbc\\n```\\n\\n進入容器\\n\\n```bash\\n> docker exec -it ubuntu-test bash\\nroot@6ffebdd2bce1:/#\\n```\\n\\n## For Laravel: Laradock\\n\\n### 環境要求\\n\\n> Git\\n> docker\\n> docker-compose\\n\\n- 將 laradock 的 repository clone 下來\\n\\n  ```bash\\n  git clone https://github.com/Laradock/laradock.git Laradock\\n  ```\\n\\n### 資料結構\\n\\n#### laradock/.env\\n\\n- 在 laradock 的資料夾中複製 .env.example 並改名為 .env\\n\\n  ```bash\\n  cp .env.example .env\\n  ```\\n\\n- 編輯 .env 中的設定\\n\\n```vim\\n### Paths #################################################\\n# Point to the path of your applications code on your host\\n# 專案要放在本機的哪個資料夾中\\n# 這邊放在與 laradock 同層級的 test 資料夾中\\nAPP_CODE_PATH_HOST=../test\\n\\n# Point to where the `APP_CODE_PATH_HOST` should be in the container\\n# 設定專案要同步到 container 中的哪一個路徑，預設為 /var/www\\nAPP_CODE_PATH_CONTAINER=/var/www\\n\\n# You may add flags to the path `:cached`, `:delegated`. When using Docker Sync add `:nocopy`\\nAPP_CODE_CONTAINER_FLAG=:cached\\n\\n# Choose storage path on your machine. For all storage systems\\n# 設定你的儲存資料(ex. database, redis 內的數據)要存放在哪。\\n# 這邊是放在跟 laradock 專案同層級的 data 資料夾中\\nDATA_PATH_HOST=../data\\n```\\n\\n#### mysql\\n\\n若 PhpMyAdmin 登不進去，可能是版本問題\\n\\n```vim\\n# 預設值\\nMYSQL_VERSION=latest\\n\\n# 改為\\nMYSQL_VERSION=5.7\\n```\\n\\n#### PhpMyAdmin\\n\\n```vim\\n### PHP MY ADMIN ##########################################\\n\\n# Accepted values: mariadb - mysql\\n# 連接的 BD (預設為 mysql)\\nPMA_DB_ENGINE=mysql\\n\\n# Credentials/Port:\\n\\n# 預設的使用者\\nPMA_USER=default\\n# 預設密碼\\nPMA_PASSWORD=secret\\n# sql root 帳號的密碼\\nPMA_ROOT_PASSWORD=secret\\n# phpMyAdmin 執行的 port 號\\nPMA_PORT=8081\\nPMA_MAX_EXECUTION_TIME=600\\nPMA_MEMORY_LIMIT=256M\\nPMA_UPLOAD_LIMIT=2G\\n```\\n\\n#### apache2\\n\\n#### nginx\\n\\n### 啟動\\n\\n- 啟動 laradock\\n\\n```bash\\ndocker-compose up -d apache2 phpMyAdmin nginx ...想啟動的服務\\n```\\n\\nLaradock 會自動啟動包括 php-fpm 在內的 php-fpm 及 workspace，啟動 phpMyAdmin 時也會連帶啟動 mysql\\n\\n- 進入 laravel 專案\\n\\n在啟動 laradock 之後，會建立一個 workspace 的 container，此時進入 workspace 建立 laravel 專案\\n\\n```bash\\ndocker-compose exec workspace bash\\n```\\n\\n進入後，terminal 會顯示自己在 `/var/www` 中，此時 `/var/www` 是連接我們在 .env 中設定的資料夾 `../test`\\n","tocContent":"- [Docker 學習筆記](#docker-學習筆記)\\n  - [安裝 Docker: Docker for Windows](#安裝-docker-docker-for-windows)\\n  - [基本概念](#基本概念)\\n    - [Image](#image)\\n    - [Container](#container)\\n    - [Repository](#repository)\\n  - [Hello World](#hello-world)\\n    - [確認 Image 存在於 Repository](#確認-image-存在於-repository)\\n    - [建立 Container 並執行](#建立-container-並執行)\\n    - [列出所有已建立的 container](#列出所有已建立的-container)\\n    - [移除 container](#移除-container)\\n  - [ubuntu](#ubuntu)\\n    - [pull](#pull)\\n    - [啟動](#啟動)\\n  - [For Laravel: Laradock](#for-laravel-laradock)\\n    - [環境要求](#環境要求)\\n    - [資料結構](#資料結構)\\n      - [laradock/.env](#laradockenv)\\n      - [mysql](#mysql)\\n      - [PhpMyAdmin](#phpmyadmin)\\n      - [apache2](#apache2)\\n      - [nginx](#nginx)\\n    - [啟動](#啟動-1)"}')},2727:function(n){"use strict";n.exports=JSON.parse('{"name":"Git 學習筆記.md","content":"# Git 學習筆記\\n\\n>\\n\\n## 常用指令\\n\\n### Git 常用指令\\n\\n- `git init` 將目前的目錄初始化為 Git 目錄, 建立本地儲存庫\\n- `git config` 設定或檢視 Git 設定檔資訊\\n- `git add` 將檔案加入 Git 暫存區\\n- `git rm` 將檔案移出 Git 暫存區\\n- `git status` 顯示 Git 狀態\\n- `git commit` 將暫存區的檔案提交至儲存庫納入版本控制\\n- `git log` 顯示過去歷次的版本異動\\n- `git reflog` 顯示完整的版本異動歷史紀錄\\n- `git show` 顯示指定版本的異動內容\\n- `git branch` 建立一個新分支 (branch)\\n- `git checkout` 取出分支內容還原為工作目錄\\n- `git merge` 合併分支\\n- `git reset` 重設某一版本\\n- `git clone` 從遠端儲存庫 (GitHub 或 Bitbucket) 複製副本至本地儲存庫\\n- `git push` 將本地儲存庫內容推送到遠端儲存庫\\n- `git pull` 將遠端儲存庫拉回合併更新到本地儲存庫\\n\\n## Git Flow 開發流程觀念\\n\\n> [參考資料：Git Flow 是什麼？為什麼需要這種東西？](https://gitbook.tw/chapters/gitflow/why-need-git-flow)\\n>\\n> [參考資料：Git flow 分支策略](https://git-tutorial.readthedocs.io/zh/latest/branchingmodel.html)\\n\\n### 分支介紹\\n\\n#### 長期分支\\n\\n- **main**(原為 master, 於 2020/10 變更)\\n  主要為穩定，上線的版本。不該允許開發者直接 commit 到此分支。\\n  一般在專案初期，環境建置好就會拉 develop 分支出去，以維持 main 獨立性。\\n- **develop**\\n  所有開發分支的基礎，當新增/修改功能時，會從此分支切出去，完成後再合併回來。\\n\\n#### Topic 任務分支\\n\\n- **feature**\\n\\n  開發新功能時，會從 develop 切出 feature 分支，其命名方式採`feature/功能名稱`。只要新功能未完成，功 能分支就會持續存在，直到開發完成並合併回開發分支，或直到放棄此新功能。\\n\\n  此分支通常只會存在於該功能的開發者的本機端 repository，不會出現在遠端的庫中。\\n\\n  - 原則：\\n    - 從 develop 分支分離\\n    - 合併回 develop 分支\\n    - 分支命名原則：除了 master, develop, release-\\\\*, hotfix 之外的功能名稱都可以\\n\\n  詳細步驟：\\n\\n  1. 開新功能分支\\n\\n     ```bash\\n     # 從 develop 分支開一個命為 new-feature 的分支\\n     $ git checkout -b feature/new-feature develop\\n     ```\\n\\n  2. 將已開發完成之功能合併回 develop 分支\\n\\n     ```bash\\n     # 切換至開發分支\\n     $ git checkout develop\\n\\n     # 將 new-feature 分支合併到開發分支\\n     $ git merge --no-ff feature/new-feature\\n\\n     # 刪除 new-feature 分支\\n     $ git branch -d feature/new-feature\\n\\n     # 將開發分支push到遠端的origin\\n     $ git push origin develop\\n     ```\\n\\n  `--no-ff` 可保存 feature 上面的歷史資訊，讓開發者可以更瞭解開發的來龍去脈(No Fast Forward)。\\n\\n- **release**\\n\\n  由 develop 切出來，正式上線前的最終測試分支，通過後會將 release 合併到 main 以及 develop 確保在 release 時修正的一些問題能同步到 main 與 develop。\\n\\n  制訂版本號碼的最佳時機是在發布分支時。\\n\\n  - 原則\\n    - 從 develop 分離\\n    - 合併回 develop 與 main 分支\\n    - 分支命名規則：release-\\\\*(版本號)\\n\\n  詳細步驟：\\n\\n  1. 開發佈分支\\n\\n     ```bash\\n     # 從開發分支開一支名為「release-1.2」的分支，開完後切換到release-1.2分支。\\n     $ git checkout -b release-1.2 develop\\n     ```\\n\\n  2. 制訂版本號\\n\\n     ```bash\\n     # commit 一個版本，commmit 訊息為「版本跳躍至1.2]\\n     $ git commit -a -m \\"Bump version number to 1.2\\"\\n     ```\\n\\n  3. 將已制訂好的 metadata 或已修復錯誤的發佈分支，合併到主分支\\n\\n     ```bash\\n     # 切換至主要分支\\n     $ git checkout master\\n\\n     # 將release-1.2分支合併到主要分支\\n     $ git merge --no-ff release-1.2\\n\\n     # 上tag\\n     $ git tag -a 1.2\\n     ```\\n\\n  4. 將已制訂好 metadata 或已修復錯誤的發佈分支，合併回開發分支\\n\\n     ```bash\\n     # 切換至開發分支\\n     $ git checkout develop\\n\\n     # 將release-1.2分支合併回開發分支\\n     $ git merge --no-ff release-1.2\\n     ```\\n\\n  5. 刪除 release-1.2 分支\\n\\n     ```bash\\n     # 刪除分支\\n     $ git branch -d release-1.2\\n     ```\\n\\n- **hotfix**\\n\\n  上線版本需緊急修復時，由 main 直接切出的 hotfix 分支，修復完成也會合併至 main 分支。\\n\\n  由於 develop 在開發中，若從 develop 切 hotfix 分支，再合併至 main 分支時可能會出現更嚴重的問題。\\n\\n  當 bug 修復後，可合併到開發分支，或是合併回主分支，並標上另一版本號的 tag。\\n\\n  - 原則：\\n    - 從主分支分離\\n    - 合併回開發分支或主分支\\n    - 分支命名規則為：hotfix-\\\\*\\n\\n  詳細步驟：\\n\\n  1. 開修復分支\\n\\n     ```bash\\n     # 從主要分支開一支名為「hotfix-1.2.1」的分支，開完後切換到hotfix-1.2.1分支。\\n     $ git checkout -b hotfix-1.2.1 master\\n     ```\\n\\n  2. 制訂版本號\\n\\n     ```bash\\n     # commit 一個版本，commit 訊息為「版本號跳躍至1.2.1」\\n     $ git commit -a -m \\"Bumped version number to 1.2.1\\"\\n     ```\\n\\n  3. 修正 bug 並 commit 一版\\n\\n     ```bash\\n     # commit 修正版\\n     $ git commit -m \\"Fixed severe production problem\\"\\n     ```\\n\\n  4. 將修好的分支合併回主分支\\n\\n     ```bash\\n     # 切換至主要分支\\n     $ git checkout master\\n\\n     # 將hotfix-1.2.1分支合併到主要分支\\n     $ git merge --no-ff hotfix-1.2.1\\n\\n     # 上tag\\n     $ git tag -a 1.2.1\\n     ```\\n\\n  5. 將修好的分支合併回 develop 分支\\n\\n     ```bash\\n     # 切換至開發分支\\n     $ git checkout develop\\n\\n     # 將hotfix-1.2.1分支合併回開發分支\\n     $ git merge --no-ff hotfix-1.2.1\\n     ```\\n\\n     **特別注意** 若修復分支與發佈分支同時存在，則當 bug 修正後，就不是合併回開發分支而是發佈分支。修 補程式就會在從未來發布分支合併回開發分支時，一併將 bug 修補完。\\n\\n  6. 刪除 hotfix 分支\\n\\n     ```bash\\n     # 刪除分支\\n     $ git branch -d hotfix-1.2.1\\n     ```\\n\\n### Git Commit 規範\\n\\n> [Git Commit Message 這樣寫會更好，替專案引入規範與範例](https://ithelp.ithome.com.tw/articles/10228738)\\n\\n#### Commit Message 格式\\n\\n```bash\\n\\n# 標題: <type>(<scope>): <subject>\\n# - type: feat, fix, docs, style, refactor, test, chore\\n# - scope: 如果修改範圍為全局修改或難以分配給單個組件，可略\\n# - subject: 以動詞開頭的簡短描述\\n#\\n# 正文: 內文需包含:\\n# * 程式碼更訂的原因(問題、原因、需求)\\n# * 調整項目\\n# * 與先前行為的對比\\n#\\n# 結尾:\\n# - 任務編號(如果有)\\n# - 重大變化(紀錄不兼容的更動)，\\n#   以 BREAKING CHANGE: 開頭，後面是對變動的描述、以及變動原因和遷移方法。\\n#\\n```\\n\\n#### 標題\\n\\n- Type 類型\\n  - **feat** - 新增/修改功能 (Feature)\\n  - **fix** - 修正 Bug (bug fix)\\n  - **docs** - 修改內容/新增文件 (documentation)\\n  - **style** - 修改程式碼格式或風格，不影響原有運作，包含修改縮排、新增縮排...等等\\n  - **refactor** - 重構程式碼，不屬於 bug 修正，也不屬於新功能\\n  - **perf** - 改善效能 (A code change that improves performance)\\n  - **test** - 增加/修改測試功能 (when adding missing tests)\\n  - **chore** - 增加或修改第三方套件(輔助工具)等 (maintain)\\n  - **revert** - 撤銷回覆先前的 commit 例如：revert: type(scope): subject (回覆版本：xxxx)。\\n  - **build** - 改變打包流程\\n- scope 範圍\\n  - 任何可以劃分程式碼改變的範圍，例如：page, router, compile, component...等等。\\n- subject 主題\\n  - 對程式碼修改做簡單描述\\n\\n#### 正文\\n\\n描述測次程式碼變更的動機，並說出這個提交與改變前的對比。\\n\\n1. 為什麼這個提交是必要的？\\n2. 他如何解決問題？\\n3. 這個提交會對專案產生什麼副作用？\\n   - 可以有效辨認次提交是做了太多改變。若有一兩個副作用尚可接受，但若五、六個以上，則表示改變幅度太大。\\n\\n#### Footer\\n\\n結尾通常會有兩種：\\n\\n1. 標註 Breaking Changes 應以單詞 BREAKING CHANGE 開頭：用空格或兩個換行符。後面是對變動的描述和變動的理由。\\n\\n```bash\\nBREAKING CHANGE: isolate scope bindings definition has changed.\\n\\n    To migrate the code follow the example below:\\n\\n    Before:\\n\\n    scope: {\\n      myAttr: \'attribute\',\\n    }\\n\\n    After:\\n\\n    scope: {\\n      myAttr: \'@\',\\n    }\\n\\n    \\"The removed `inject` wasn\'t generally useful for directives so there should be no code using it.\\"\\n```\\n\\n如果當前 commit 還原了先前的 commit，則應以 revert：開頭，後跟還原的 commit 的 header。在 body 中必須寫成：This reverts commit \\\\<hash>。其中 hash 是要還原的 commit 的 SHA 標識。\\n\\n```bash\\nrevert: feat(pencil): add \'delete\' option\\n\\nThis reverts commit 667ecc1654a317a13331b17617d973392f415f02.\\n```\\n\\n#### commit 模板\\n\\n在~/.gitconfig 新增\\n\\n```config\\n[commit]\\ntemplate = ~/.gitmessage\\n```\\n\\n新建 ~/.gitmessage\\n\\n```vim\\n\\n# 標題: <type>(<scope>): <subject>\\n# - type: feat, fix, docs, style, refactor, test, chore\\n# - scope: 如果修改範圍為全局修改或難以分配給單個組件，可略\\n# - subject: 以動詞開頭的簡短描述\\n#\\n# 正文: 內文需包含:\\n# * 程式碼更訂的原因(問題、原因、需求)\\n# * 調整項目\\n# * 與先前行為的對比\\n#\\n# 結尾:\\n# - 任務編號(如果有)\\n# - 重大變化(紀錄不兼容的更動)，\\n#   以 BREAKING CHANGE: 開頭，後面是對變動的描述、以及變動原因和遷移方法。\\n#\\n```\\n\\n## Git 本地操作情境\\n\\n### 將 git 預設的編輯器改為 vim\\n\\n```bash\\ngit config --global core.editor \\"vim\\"\\n```\\n\\n### 取消 commit：git reset\\n\\nGit 的 `reset`指令，比較像是「前往」或是「變成」，並不會真的重新設定。\\n\\n`reset`後的東西都還可以撿的回來。\\n\\n- 確認 git 紀錄\\n\\n  ```bash\\n  git log --oneline\\n  af75a42 (HEAD -> develop) 0327\\n  1baa403 (origin/develop) no message\\n  13fd2dc 0223\\n  a640c49 0222新增\\n  e09ecae init commit\\n  ```\\n\\n- 利用相對位置取消 commit\\n\\n  ```bash\\n  git reset af75a42^\\n  ```\\n\\n  `^`符號表示「前一次」的意思，`af75a42^`是指`af75a42`這個 commit 的「前一次」，`af75a42^^`則是往前 兩次，以此類推。\\n\\n  如果要倒退五次可以寫成`af75a42~5`。\\n\\n  另外`HEAD`和`develop`也都指向`af75a42`這個 commit，所以也可以寫成\\n\\n  ```bash\\n  git reset develop^\\n  &\\n  git reset HEAD^\\n  ```\\n\\n- 利用絕對位置取消 commit\\n\\n  ```bash\\n  git reset 1baa403\\n  ```\\n\\n  他會切會到`1baa403`這個 commit，剛好是`af75a42`的前一個 commit，和取消最後一次 commit 的效果一 樣。\\n\\n### git commit 打錯字\\n\\n```bash\\ngit commit --amend\\n```\\n\\n編輯最後一個提交的 commit\\n\\n### 將未完成的工作暫存：git stash\\n\\n工作做到一半，需要切換到別的分支進行其他任務。\\n先看一下目前的狀態：\\n\\n```bash\\ngit status\\nOn branch feature/admin_controller\\nChanges not staged for commit:\\n  (use \\"git add <file>...\\" to update what will be committed)\\n  (use \\"git restore <file>...\\" to discard changes in working directory)\\n        modified:   app/Http/Controllers/RegionController.php\\n        modified:   app/Models/Room.php\\n        modified:   app/Models/User.php\\n\\nno changes added to commit (use \\"git add\\" and/or \\"git commit -a\\")\\n```\\n\\n- 將現階段工作暫存\\n\\n  目前正在修改 `app/Http/Controllers/RegionController.php` `app/Models/Room.php` `app/Models/   User.php`，使用 `git stash` 把他們存起來。\\n\\n  ```bash\\n  git stash\\n  Saved working directory and index state WIP on feature/admin_controller: c745ccb style    (MemberController): 修改response的資料與取消註解\\n  ```\\n\\n  > **注意**\\n  >\\n  > Untracked 狀態的檔案無法被 stash，需要額外使用 `-u` 參數\\n\\n  看一下目前的狀態\\n\\n  ```bash\\n  git status\\n  On branch cat\\n  nothing to commit, working tree clean\\n  ```\\n\\n  `git stash list` 可以查看暫存檔案\\n\\n  ```bash\\n  git stash list\\n  stash@{0}: WIP on cat: b174a5a add cat 2\\n  ```\\n\\n- 取出暫存\\n\\n  當任務完成，要把剛剛暫存的東西拿回來\\n\\n  ```bash\\n  git stash pop stash@{0}\\n  On branch feature/add_new_api_route\\n  Changes not staged for commit:\\n    (use \\"git add <file>...\\" to update what will be committed)\\n    (use \\"git restore <file>...\\" to discard changes in working directory)\\n          modified:   app/Http/Controllers/RegionController.php\\n          modified:   app/Models/Room.php\\n          modified:   app/Models/User.php\\n\\n  no changes added to commit (use \\"git add\\" and/or \\"git commit -a\\")\\n  Dropped stash@{0} (8810ecbe89e1c1412c0c47d7fb7ded9f3e29aa53)\\n  ```\\n\\n  使用 `pop` 指令，可以將某個 `stash` 拿出來並套到目前的分支上。套用成功之後，套用過的 `stash` 就會 被刪除。\\n  如果沒有指定 `pop` 哪一個 `stash`，將會從編號小的也就是 `stash@{0}` 開始使用，也就是最後存進來的。\\n\\n  要刪除 `stash` 可以用 `drop` 指令\\n\\n  ```bash\\n  git stash drop stash@{0}\\n  Dropped stash@{0} (87390c02bbfc8cf7a38fb42f6f3a357e51ce6cd1)\\n  ```\\n\\n  如果要把 `stash` 撿回來，但不想刪除，可以使用 `apply`\\n\\n  ```bash\\n  git stash apply stash@{0}\\n  ```\\n\\n- 主要指令\\n\\n  - git stash 將當前分支的修改內容加入暫存\\n  - git stash -u 將 untracked 檔案加入暫存\\n  - git stash save -u \\"\\" 將 untracked 檔案加入暫存並撰寫註解\\n  - git stash push 將修改內容加入暫存(完整指令)\\n  - git stash push -m 將修改內容加入暫存，並加入註解\\n  - git stash list 瀏覽所有暫存項目\\n  - git stash pop 將最新暫存套用至當前分支，成功後刪除暫存\\n  - git stash pop stash@{1} 將指定暫存套用至當前分支，成功後刪除暫存\\n  - git stash apply 套用最新暫存，成功後保留暫存\\n  - git stash apply stash@{1} 套用指定暫存，成功後保留暫存\\n  - git stash drop 清除最新暫存\\n  - git stash drop stash@{1} 清除指定暫存\\n  - git stash clear 清除全部暫存\\n\\n### 解決合併衝突\\n\\n當在不同分支中，修改同一檔案的不同行，此時合併不會發生問題。\\n倘若修改的是同一行，就會發生合併衝突。\\n\\n```bash\\ngit merge feature/create_device_model\\nAuto-merging app-src/app/Http/Controllers/UserController.php\\nCONFLICT (content): Merge conflict in app-src/app/Http/Controllers/UserController.php\\nAuto-merging app-src/app/Models/Room.php\\nAuto-merging app-src/app/Models/User.php\\nCONFLICT (content): Merge conflict in app-src/app/Models/User.php\\nAutomatic merge failed; fix conflicts and then commit the result.\\n```\\n\\n有出現 CONFLICT (content)提示的檔案，為發生合併衝突的檔案。\\n此時在檔案中，Git 會將衝突位置標示出來。\\n\\n```php\\n<<<<<<< HEAD\\n當前內容。\\n=======\\n要合併的目標分支上歧異的內容。\\n>>>>>>> feature/i_am_old_branch\\n```\\n\\n修正衝突點後，將修改的檔案暫存，最後進行提交。\\n\\n```bash\\ngit add --all\\ngit commit\\n```\\n\\n### 取消 merge 清除合併紀錄\\n\\n> [Git 實戰技巧 - 取消合併](https://blog.darkthread.net/blog/git-undo-merge/)\\n\\n當 feature 與 develop 分支的合併位置有誤，想要拆掉重做\\n\\n```bash\\ndb7915e (HEAD -> dev, feature/mqtt_test) feat: 測試mqtt連線\\nb65d2d2 (tag: release_v2.0.0, origin/dev) no message\\n0a198be refactor(firmware index page): 優化firmware前端頁面\\n539942f (origin/master, origin/HEAD, master) Merge branch \'feature/fix_firmware_download\' into dev\\n1a4515a fix(firmwareController): 修復firmware下載問題\\nd1e204f docs(README): 修改上線環境設定\\n```\\n\\n`git rebase -i` ：重整目標 commit 之後的 commit：重整清單中不會有下指令的 commit 而是顯示其後所有的 commit。\\n\\n```bash\\ngit rebase -i 0a198be\\n```\\n\\n輸入指令之後會進入編輯器\\n\\n```vim\\npick db7915e feat: 測試mqtt連線\\npick b65d2d2 no message\\n\\n# Rebase 539942f..879c462 onto 539942f (3 commands)\\n#\\n# Commands:\\n# p, pick <commit> = use commit\\n# r, reword <commit> = use commit, but edit the commit message\\n# e, edit <commit> = use commit, but stop for amending\\n# s, squash <commit> = use commit, but meld into previous commit\\n# f, fixup [-C | -c] <commit> = like \\"squash\\" but keep only the previous\\n#                    commit\'s log message, unless -C is used, in which case\\n#                    keep only this commit\'s message; -c is same as -C but\\n#                    opens the editor\\n```\\n\\n並將要取消的 commit 改為 drop\\n\\n```vim\\ndrip db7915e feat: 測試mqtt連線\\npick b65d2d2 no message\\n```\\n\\n```bash\\nb65d2d2 (HEAD -> dev, tag: release_v2.0.0, origin/dev) no message\\n0a198be refactor(firmware index page): 優化firmware前端頁面\\n539942f (origin/master, origin/HEAD, master) Merge branch \'feature/fix_firmware_download\' into dev\\n1a4515a fix(firmwareController): 修復firmware下載問題\\n```\\n\\n### Git 別名\\n\\n修改 `~/.gitconfig`\\n\\n```vim\\n[alias]\\nst = status\\nptlg = log --color --graph --pretty=format:\'%C(yellow)%h%Creset %C(bold brightred)%d%Creset %C()%s%Creset \\\\n %C(blue italic dim)-- %an%Creset %C(green italic dim)(%cr)%Creset\'\\n# 若出現錯誤訊息：\\n#   error: 無效的顏色值：bold brightred\\n#   fatal: 不能解析 --pretty 格式\\n# 則修改為下面指令 \\nptlg = log --color --graph --pretty=format:\'%C(yellow)%h%Creset %C(bold red)%d%Creset %C(reset)%s%Creset \\\\n %C(blue italic dim)-- %an%Creset %C(green italic dim)(%cr)%Creset\'\\nadal = add --all\\n```\\n\\n### Git rebase 修改歷史訊息\\n\\n1. 進入互動模式\\n\\n   ```shell\\n   git rebase -i 1de2076\\n   ```\\n\\n   `-i` 進入互動模式\\n\\n   `1de2076` 此次互動的應用範圍為，從現在到`1de2076`這個 commit\\n\\n2. 編輯訊息\\n\\n   此時會跳出 Vim 編輯器\\n\\n   ```shell\\n   pick 382a2a5 add database settings\\n   pick cd82f29 add cat 1\\n   pick 1de2076 add cat 2\\n\\n   # Rebase bb0c9c2..27f6ed6 onto bb0c9c2 (6 commands)\\n   #\\n   # Commands:\\n   # p, pick = use commit\\n   # r, reword = use commit, but edit the commit message\\n   # e, edit = use commit, but stop for amending\\n   # s, squash = use commit, but meld into previous commit\\n   # f, fixup = like \\"squash\\", but discard this commit\'s log message\\n   # x, exec = run command (the rest of the line) using shell\\n   # d, drop = remove commit\\n   #\\n   # These lines can be re-ordered; they are executed from top to bottom.\\n   #\\n   # If you remove a line here THAT COMMIT WILL BE LOST.\\n   #\\n   # However, if you remove everything, the rebase will be aborted.\\n   #\\n   # Note that empty commits are commented out\\n   ```\\n\\n   此順序和 git log 的順序相反\\n\\n   - 將要編輯的 commit 修改前面的指令\\n\\n     - `p, pick` 使用提交，不進行修改\\n     - `r, reword` 使用提交，但編輯提交訊息\\n     - `e, edit` 使用提交，但停止修改\\n     - `s, squash` 使用提交，但合併到先前的提交中\\n     - `f, fixup` 就像“squash”，但丟棄此提交的日誌訊息\\n     - `x, exec` 使用 shell 執行指令（該行的其餘部分）\\n     - `d, drop` 刪除提交\\n\\n   若要修改`1de2076`的提交內容錯字，則將 `pick 1de2076 add cat 2`修改成 `r 1de2076 add cat 2`。\\n\\n   存檔並離開後，就會再跳出另一個 vim 編輯器，此為欲修改的 commit 內容。\\n\\n3. 取消這次的 rebase\\n\\n   ```shell\\n   git reset ORIG_HEAD --hard\\n   ```\\n\\n## git 遠端操作\\n\\n### 更改 git remote 位置\\n\\n當修改 git repo 的名稱或是路徑時，若要在本機進行 push 或是 pull 的指令時，會出現：remote: This repository moved. Please use the new location [new location]\\n\\n- 解決辦法：重新設定 remote url\\n\\n  ```bash\\n  git remote set-url origin https://XXX.git\\n  ```\\n\\n  檢查 remote url 是否修改成功\\n\\n  ```bash\\n  git remote -v\\n  ```\\n\\n### 在 git server 建立新儲存庫\\n\\n> 主機架設 ssh server\\n>\\n> 主機安裝好 git\\n\\n1. 在要建立遠端 repository 的資料夾底下，新增專案資料夾 `<project-name>.git`\\n2. 切換到新建的資要夾底下，初始化遠端倉庫\\n\\n   ```shell\\n    git init --bare\\n   ```\\n\\n3. 確認資料夾中以建立的檔案\\n\\n   ```shell\\n   $ ls\\n   HEAD  config  description  hooks/  info/  objects/  refs/\\n   ```\\n\\n4. 提交本地專案或將本地專案的遠端指向此 repository\\n\\n### 將本地專案新增至遠端儲存庫\\n\\n```bash\\ngit init\\n\\ngit add .\\n\\ngit commit -m \\"First commit\\"\\n```\\n\\n添加遠端儲存庫的路徑\\n\\n```bash\\n## git remote add origin \\"remote repository URL\\"\\ngit remote add origin //fishbone/研發部/軟體區/GitServer/V5/*.git\\n```\\n\\n將遠端儲存庫初始化\\n\\n```bash\\n## git init --bare \\"remote repository URL\\"\\ngit init --bare //fishbone/研發部/韌體區/GitServer/V5/*.git\\n```\\n\\n將本地儲存庫內容推送到遠端\\n\\n```bash\\ngit push --set-upstream origin main\\n```\\n\\n### 轉移資料庫：git mirror\\n\\n可以轉移整個 repository 的資訊，包括 branch, tags\\n\\n將 repo clone --mirror 到本地\\n\\n```bash\\ngit clone --mirror gitolite@git.lab317.org:dinos80152/Authentication\\n```\\n\\n接著在 github 建立新的 repository\\n\\n進到專案資料夾，設定新的遠端 git repo 位置\\n\\n```bash\\ncd your_project.git/\\ngit remote set-url --push origin https://github.com/your_name/your_project.git\\n```\\n\\nlocal 更新 remote branch ,最後將整包 push 上去\\n\\n```bash\\ngit push --mirror\\n```\\n\\n或者一個指令直接指向遠端 repo\\n\\n```bash\\ngit push --mirror https://github.com/your_name/your_project.git\\n```\\n\\n### git push fail\\n\\n> 錯誤訊息：\\n>\\n> error: RPC 失敗。HTTP 400 curl 22 The requested URL returned error: 400\\n>\\n> send-pack: unexpected disconnect while reading sideband packet\\n\\n當 push 到遠端儲存庫時，錯誤通常會在上傳的途中，被伺服器端切斷連線。因此很難判斷錯誤發生原因。\\n造成錯誤的可能原因如下：\\n\\n#### 暫存空間不足\\n\\ngit 有兩種通訊協定，ssh 和 http。若是使用 HTTP 協定，其底層基於 TCP 可能會因為暫存不足導致連接已經關閉，但仍有未處理完的資料。\\n\\n1. 察看 git config\\n\\n```shell\\n  git config -l\\n  # http.postBuffer => 緩衝區大小\\n```\\n\\n2. 加大緩衝區\\n\\n```shell\\n  # 524288000 為 500MB，此緩衝值大小需斟酌設定。\\n  # http.postbuffer=260000000\\n  git config --global http.postBuffer 524288000\\n\\n  # 察看是否設定成功\\n  git config -l | grep postbuffer\\n```\\n\\n#### 欲提交的分支受保護\\n\\n> 錯誤訊息：\\n>\\n> Push rejected\\n>\\n> Push master to changgenglu/master was rejected by remote\\n\\n提交權限不足，需由管理員授權或另外拉 dev 分支後再合併到 master\\n\\n#### 遠端儲存庫板本和本地不一樣\\n\\n將遠端同步到本地：\\n\\n```git\\ngit pull --rebase origin master\\n```\\n\\n## Git 管理\\n\\n### 使用 VSCode 管理 Git\\n\\n> [Visual Studio Code 無需輸入 Git 指令，透過界面按鈕就可輕鬆管理 Github 中的專案檔案](https://www.minwt.com/webdesign-dev/22926.html)\\n\\n## GitHub 操作\\n\\n### 將本地專案上傳到 github\\n\\n1. git init\\n2. git add .\\n3. git commit -m \\"init commit\\"\\n4. git remote add origin `https://github.com/<username>/<repo>.git`\\n5. git push -u origin master\\n\\n### Https 設定 Token\\n\\n- 問題：\\n\\n  當使用推送，輸入 github 密碼會出現錯誤。\\n\\n  ```bash\\n  changgenglu@masenyuandeMacBook-Air ~ % git push -u origin master\\n  remote: Support for password authentication was removed on August 13, 2021. Please use a  personal access token instead.\\n  remote: Please see https://github.blog/ 2020-12-15-token-authentication-requirements-for-git-operations/ for more information.\\n  fatal: unable to access \'https://github.com/changgenglu/your_project.git/\': The requested   URL returned error: 403\\n  ```\\n\\n  大致意思是，密碼驗證於 2021 年 8 月 13 日不再支援，也就是今天不能再用密碼方式去提交程式碼。請用使 用 **personal access token** 替代。\\n\\n- 解決方法：設定 personal access token\\n\\n  - 開啟 GitHub.com -> Setting -> Developer settings -> Personal access tokens\\n  - 按下`Generate new token`\\n  - Note 欄位填入 token 的備註\\n  - Expiration 設定 token 的時效\\n  - Select scopes 設定權限（基本全部開啟）\\n  - 按下`Generate token`\\n  - 複製 token 代碼\\n\\n  再次使用終端機推送\\n\\n  ```bash\\n  git push -u origin master\\n  ```\\n\\n  輸入 github 密碼的地方，貼上 token 代碼\\n\\n### 設定 SSH\\n\\n1. 輸入指令產生 SHH\\n\\n```bash\\nssh-keygen\\n```\\n\\n產生\\n\\n```bash\\n$ Enter file in which to save the key (/Users/changgenglu/.ssh/id_rsa):\\n# 這行只是確定存在哪\\n$ Overwrite (y/n)?\\n# 如果原本就有金鑰會跳出此問題，覆蓋嗎？ (是)\\n$ Enter passphrase (empty for no passphrase):\\n$ Enter same passphrase again:\\n# 輸入密碼，再次確認輸入密碼\\n```\\n\\n此處的輸入密碼為使用至個金鑰的密碼，可以選擇不輸入。\\n\\n2. 產生 SSH 連線所需的公鑰內容\\n\\n```bash\\ncat ~/.ssh/id_rsa.pub\\n```\\n\\n輸出實例\\n\\n```bash\\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDFp+A3qe4qm1Dkw66LN/  vNGlufX5iC9VERfuUiXHNM5L3hQuz6wO8WuzFv+zDIHRPGUl616oLXTHTqommuO0GZavDo+lbUIRkSBM9j/9tr  +hlF4LPTT4ggjOgzLCHTrSyzcmcdykgBfnDgX3aYfZbhCEcWdERUxWFNnDf +YYlNd8L6LMKSIce61nhqiSLNbugDCrE0IH+/1hoS3LNoag9V05Qwo5yZ6srLNJT8uISoqvJv5BwSpBL9ImnePx  +LzDiVXlJMisKf1GSXdVuWmVWlKrZOsadk4ZkSNH2cL1wgkNvAUbydWKG9Ag4TfI/khKwUXyhT  +7V4jWsJusDXZxafylZma4qeOsaLAN4ScSStnOoSm1CxeNqmPsQpAGbtvx49yB2 +c4HFsa68VzcwV1oejhh2E67iqqKK53IFN/  qQmYYfhUukY6rgLLHlLkmjLqdVpVcULCP0mMzn4xacFWLwDgOtZK1i97vWaLPyG6hYQQ108zK9i/Cg13p0Z+CUTCs=  changgenglu@masenyuandeMacBook-Air.local\\n```\\n\\n3. 上傳公鑰\\n\\n到 Github > Settings > SSH and GPG keys 的設定頁面，選擇 New SSH Key。\\n\\n### 部署靜態頁面到 github\\n\\n> 參考資料：\\n>\\n> [[Vue] 將 Vue 專案部署至 Github Pages](https://dean34520.medium.com/vue%E7%B3%BB%E5%88%97%E6%96%87-%E5%B0%87vue%E6%AA%94%E6%A1%88%E9%83%A8%E7%BD%B2%E8%87%B3github-334951cadede)\\n\\n1. 建立與本地專案相同名稱的 repository\\n2. 在專案資料夾中新增 vue.config.js，設定 publishPath\\n\\n   ```javascript\\n   //vue.config.js\\n   module.exports = {\\n     publicPath: process.env.NODE_ENV === \\"production\\" ? \\"/eric-project/\\" : \\"/\\",\\n   };\\n   ```\\n\\n3. 將本地專案推送至雲端\\n4. 在專案目錄下新增 deploy.sh 自動化腳本\\n\\n   ```sh\\n    #!/usr/bin/env sh\\n    # 當發生錯誤時終止腳本運行\\n    set -e\\n    # 打包\\n    npm run build\\n    # 移動至到打包後的dist目錄\\n    cd dist\\n    # 因為dist資料夾預設是被ignore的，因此在進入dist資料夾後初始化git\\n    git init\\n    git add -A\\n    git commit -m \'deploy\'\\n    # 部署到 https://github.com/<user-name>/<repo-name>.git 分支為 gh-pages\\n    git push -f https://github.com/<user-name>/<repo-name>.git master:gh-pages\\n    # 將dist資料夾中的內容推送至遠端eric-project的gh-pages分支中，並強制無條件將舊有的內容取代成目前的內容（指令 git push -f)\\n    cd -\\n   ```\\n\\n   github 在部署時只允許三種來源：\\n\\n   1. master\\n   2. gh-pages\\n   3. master/docs\\n\\n5. 執行腳本\\n\\n   ```shell\\n   sh ./deploy.sh\\n   ```\\n\\n   完成後，此時 github 上的 gh-pages 分支會和 vue 專案中的 /dist 資料夾內一樣\\n\\n6. 進入 setting 頁面的 pages，將 Source 改為 gh-pages\\n7. 待部署完成，頁面上方會出現專案頁面的連結\\n","tocContent":"- [Git 學習筆記](#git-學習筆記)\\n  - [常用指令](#常用指令)\\n    - [Git 常用指令](#git-常用指令)\\n  - [Git Flow 開發流程觀念](#git-flow-開發流程觀念)\\n    - [分支介紹](#分支介紹)\\n      - [長期分支](#長期分支)\\n      - [Topic 任務分支](#topic-任務分支)\\n    - [Git Commit 規範](#git-commit-規範)\\n      - [Commit Message 格式](#commit-message-格式)\\n      - [標題](#標題)\\n      - [正文](#正文)\\n      - [Footer](#footer)\\n      - [commit 模板](#commit-模板)\\n  - [Git 本地操作情境](#git-本地操作情境)\\n    - [將 git 預設的編輯器改為 vim](#將-git-預設的編輯器改為-vim)\\n    - [取消 commit：git reset](#取消-commitgit-reset)\\n    - [git commit 打錯字](#git-commit-打錯字)\\n    - [將未完成的工作暫存：git stash](#將未完成的工作暫存git-stash)\\n    - [解決合併衝突](#解決合併衝突)\\n    - [取消 merge 清除合併紀錄](#取消-merge-清除合併紀錄)\\n    - [Git 別名](#git-別名)\\n    - [Git rebase 修改歷史訊息](#git-rebase-修改歷史訊息)\\n  - [git 遠端操作](#git-遠端操作)\\n    - [更改 git remote 位置](#更改-git-remote-位置)\\n    - [在 git server 建立新儲存庫](#在-git-server-建立新儲存庫)\\n    - [將本地專案新增至遠端儲存庫](#將本地專案新增至遠端儲存庫)\\n    - [轉移資料庫：git mirror](#轉移資料庫git-mirror)\\n    - [git push fail](#git-push-fail)\\n      - [暫存空間不足](#暫存空間不足)\\n      - [欲提交的分支受保護](#欲提交的分支受保護)\\n      - [遠端儲存庫板本和本地不一樣](#遠端儲存庫板本和本地不一樣)\\n  - [Git 管理](#git-管理)\\n    - [使用 VSCode 管理 Git](#使用-vscode-管理-git)\\n  - [GitHub 操作](#github-操作)\\n    - [將本地專案上傳到 github](#將本地專案上傳到-github)\\n    - [Https 設定 Token](#https-設定-token)\\n    - [設定 SSH](#設定-ssh)\\n    - [部署靜態頁面到 github](#部署靜態頁面到-github)"}')},4206:function(n){"use strict";n.exports=JSON.parse('{"name":"Home Assistant 開發環境.md","content":"# Home Assistant 開發環境\\n\\n> 作業系統：windows 11\\n>\\n> 環境需求：\\n>\\n> Docker,\\n> Visual Studio code,\\n> Git,\\n> Windows Subsystem of Linux (WSL)\\n>\\n> 參考資料：\\n>\\n> [Frontend development](https://developers.home-assistant.io/docs/frontend/development/)\\n>\\n> [Set up Development Environment](https://developers.home-assistant.io/docs/development_environment/)\\n>\\n> [docker container install HACS](https://zhuanlan.zhihu.com/p/400985801)\\n\\n## 設定 HA　核心\\n\\n\\n\\n","tocContent":""}')},8343:function(n){"use strict";n.exports=JSON.parse('{"name":"Hyper-v 設定.md","content":"# Hyper-v 設定\\n\\n- [參考資料](https://ithelp.ithome.com.tw/articles/10128382)\\n\\n## 虛擬交換器\\n\\n- 外部網路：讓虛擬機器可以與外部網路連線，簡單說就是與 host 主機共用實體網路卡\\n- 內部網路：可讓 Host 主機與虛擬機器溝通\\n- 私人網路：讓虛擬機器彼此可以溝通，與外部網路隔離\\n","tocContent":""}')},6813:function(n){"use strict";n.exports=JSON.parse('{"name":"Javascript 事件.md","content":"# Javascript 事件\\n\\n> 參考資料：\\n>\\n> [重新認識 JavaScript: Day 14 事件機制的原理](https://ithelp.ithome.com.tw/articles/10191970)\\n>\\n> [瀏覽器中的事件循環 (Event Loop)](https://www.explainthis.io/zh-hant/swe/what-is-event-loop)\\n\\n## 事件流程\\n\\n假設有兩個元素：outer, inner\\n\\n```html\\n<div id=\\"outer\\">\\n  <div id=\\"inner\\"></div>\\n</div>\\n```\\n\\n此時當點擊 inner 的時候，也代表同時點擊 outer，甚至實際上我們也點擊到整個網頁。\\n\\n事件流程(Event Flow)指的就是`網頁元素接收事件的順序`。\\n\\n- 事件流程可以分為兩種機制：\\n  - 事件冒泡(Event Bubbling)\\n  - 事件捕獲(Event Capturing)\\n\\n### 事件冒泡\\n\\n事件冒泡的意思是：從啟動事件的元素節點開始，逐層向上傳遞，直到整個網頁的根節點，也就是 `document`。\\n\\n```html\\n<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>TITLE</title>\\n  </head>\\n  <body>\\n    <div>CLICK</div>\\n  </body>\\n</html>\\n```\\n\\n如上面程式碼，假設點擊了 click 元素，那在`事件冒泡`的機制下，觸發事件的順序會是：\\n\\n1. `<div>CLICK</div>`\\n2. `<body>`\\n3. `<html>`\\n4. `document`\\n\\n向這樣 click 事件逐層向上依序被觸發，就是事件冒泡。\\n\\n### 事件捕獲\\n\\n事件捕獲和事件冒泡的機制正好相反\\n\\n```html\\n<!DOCTYPE html>\\n<html>\\n  <head>\\n    <title>TITLE</title>\\n  </head>\\n  <body>\\n    <div>CLICK</div>\\n  </body>\\n</html>\\n```\\n\\n今點擊 click 後，事件捕獲的機制會是：\\n\\n1. `document`\\n2. `<html>`\\n3. `<body>`\\n4. `<div>CLICK</div>`\\n\\n### 機制執行邏輯\\n\\n當事件被觸發時，兩種事件傳遞的機制都會執行。\\n\\n```html\\n<!DOCTYPE html>\\n<html lang=\\"en\\">\\n  <head>\\n    <title>title</title>\\n  </head>\\n  <body>\\n    <table>\\n      <tbody>\\n        <tr>\\n          <td>a</td>\\n          <td>b</td>\\n        </tr>\\n        <tr>\\n          <td>c</td>\\n          <td>d</td>\\n        </tr>\\n      </tbody>\\n    </table>\\n  </body>\\n</html>\\n```\\n\\n假設現在的事件為點擊 `<td>c</td>`，當事件發生時，會先執行`事件捕獲(capture phase)`：\\n\\n1. `document`\\n2. `<html>`\\n3. `<body>`\\n4. `<table>`\\n5. `<tbody>`\\n6. `<tr>`\\n7. `<td>` (實際被點擊的元素)\\n\\n由上而下依序觸發他們的 click 事件。\\n\\n藉著再繼續執行`事件冒泡(bubble phase)`，反方向由 `<td>` 一路向上傳至 `document` 結束整個事件流程。\\n\\n若要檢驗事件流程，可以透過`addEventListener()` 方法來綁定 click 事件：\\n\\n```html\\n<div>\\n  <div id=\\"parent\\">\\n    父元素\\n    <div id=\\"child\\">子元素</div>\\n  </div>\\n</div>\\n```\\n\\n```js\\n// 父元素\\nvar parent = document.getElementById(\\"parent\\");\\n// 子元素\\nvar child = document.getElementById(\\"child\\");\\n\\n// 透過 addEventListener 指定事件的綁定\\n// 第三個參數 true / false 分別代表捕獲/ 冒泡 機制\\n\\nparent.addEventListener(\\n  \\"click\\",\\n  function () {\\n    console.log(\\"Parent Capturing\\");\\n  },\\n  true\\n);\\n\\nparent.addEventListener(\\n  \\"click\\",\\n  function () {\\n    console.log(\\"Parent Bubbling\\");\\n  },\\n  false\\n);\\n\\nchild.addEventListener(\\n  \\"click\\",\\n  function () {\\n    console.log(\\"Child Capturing\\");\\n  },\\n  true\\n);\\n\\nchild.addEventListener(\\n  \\"click\\",\\n  function () {\\n    console.log(\\"Child Bubbling\\");\\n  },\\n  false\\n);\\n```\\n\\n當點擊 `子元素`時，透過`console.log()`可以觀察到事件觸發的順序。\\n\\n```text\\n\\"Parent Capturing\\"\\n\\"Child Capturing\\"\\n\\"Child Bubbling\\"\\n\\"Parent Bubbling\\"\\n```\\n\\n若點擊`父元素`，則出現\\n\\n```text\\n\\"Parent Capturing\\"\\n\\"Parent Bubbling\\"\\n```\\n\\n當點擊子元素時，父層的`捕獲` 會先被觸發。然後到子層內部的 `捕獲`接著`冒泡`事件，最後才又回到父層的`冒泡`結束。\\n\\n那子層的`捕獲`或`冒泡`的順序要依程式碼的順序而定。\\n\\n若是`捕獲`在`冒泡`前面：\\n\\n```js\\nchild.addEventListener(\\n  \\"click\\",\\n  function () {\\n    console.log(\\"Child Capturing\\");\\n  },\\n  true\\n);\\n\\nchild.addEventListener(\\n  \\"click\\",\\n  function () {\\n    console.log(\\"Child Bubbling\\");\\n  },\\n  false\\n);\\n```\\n\\n則會得到\\n\\n```text\\n\\"Child Capturing\\"\\n\\"Child Bubbling\\"\\n```\\n\\n若是將兩段程式碼順序相反，結果如下：\\n\\n```js\\nchild.addEventListener(\\n  \\"click\\",\\n  function () {\\n    console.log(\\"Child Bubbling\\");\\n  },\\n  false\\n);\\n\\nchild.addEventListener(\\n  \\"click\\",\\n  function () {\\n    console.log(\\"Child Capturing\\");\\n  },\\n  true\\n);\\n```\\n\\n```text\\n\\"Child Bubbling\\"\\n\\"Child Capturing\\"\\n```\\n\\n## 註冊事件的綁定\\n\\n除了 `addEventListener()`方法，綁定事件的方式還有其他方法。\\n\\n### on-event 處理器 (HTML 屬性)\\n\\n對 html 標籤而言，只要支援某個`事件`的觸發，就可以透過 `on + 事件名`的屬性來註冊事件：\\n\\n```html\\n<button id=\\"btn\\" onclick=\\"console.log(\'HI\');\\">Click</button>\\n```\\n\\n如同上面範例，透過 `onclick`事件，就可以在 `<button>`標籤上面註冊 `click`事件，也就是當使用者按下 `<button>`標籤時，就會執行 `conaole.log(\'HI\');`的程式碼。\\n\\n但基於程式碼的使用性與維護性考量，現在不建議用此方法來綁定事件。\\n\\n### on-event 處理器(非 HTML 屬性)\\n\\n像是 `window`或`document`此類沒有實體元素的情況，一樣可以用 DOM API 提供的`on-event 處理器(on-event handler)`來處理事件\\n\\n```js\\nwindow.onload = function () {\\n  document.write(\\"Hello world!\\");\\n};\\n```\\n\\n上面程式碼會在 `window`觸發 `load` 事件時，執行相對應功能。\\n\\n另外，若是實體元素也可透過 DOM API 取得 DOM 物件後，在透過 on-event 處理器來處理事件。\\n\\n```html\\n<button id=\\"btn\\">Click</button>\\n```\\n\\nㄊ\\n\\n```js\\nconst btn = document.getElementById(\\"btn\\");\\n\\nbtn.onclick = function () {\\n  console.log(\\"HI\\");\\n};\\n```\\n\\n若想解除事件，則重新指定`on-event hendler`為`null`\\n\\n### 事件監聽`EventTarget.addEventListener()`\\n\\n`.addEventListener()`有三個參數，分別為`事件名稱`、`事件處理器`、`執行機制`。\\n\\n- 事件名稱：HTML DOM 事件，為字串\\n- 事件處理器：事件觸發時執行的 function\\n- 執行機制(boolean)：決定事件以捕獲或是冒泡機制執行。\\n\\n用此方法來註冊事件的好處是可以重複指定多個`處理器(handler)`給同一個標籤的同一個事件。\\n\\n```js\\nvar btn = document.getElementById(\\"btn\\");\\n\\nbtn.addEventListener(\\n  \\"click\\",\\n  function () {\\n    console.log(\\"HI\\");\\n  },\\n  false\\n);\\n\\nbtn.addEventListener(\\n  \\"click\\",\\n  function () {\\n    console.log(\\"HELLO\\");\\n  },\\n  false\\n);\\n```\\n\\n點擊觸發事件：\\n\\n```text\\n\\"HI\\"\\n\\"HELLO\\"\\n```\\n\\n若是要解除事件的註冊，則是透過 `removeEventListener()`來取消。\\n\\n## HTML DOM 事件\\n\\n> 參考資料：\\n>\\n> [HTML DOM 事件](https://www.runoob.com/jsref/dom-obj-event.html)\\n\\nHTML DOM 事件允許 javascript 在 html 檔案中註冊不同事件處理程序。\\n\\n事件通常和函式結合使用，函式不會在事件發生前被執行(如使用者點擊按鈕)。\\n\\n### DOM Event 事件名稱整理\\n\\n|     屬性     | 描述                              |\\n| :----------: | --------------------------------- |\\n|     blur     | 物件失去焦點時                    |\\n|    change    | 物件內容改變時                    |\\n|    click     | 滑鼠點擊物件時                    |\\n|   dblclick   | 滑鼠連點二下物件時                |\\n|    error     | 當圖片或文件下載產生錯誤時        |\\n|    focus     | 當物件被點擊或取得焦點時          |\\n|   keydown    | 按下鍵盤按鍵時                    |\\n|   keypress   | 按下並放開鍵盤按鍵後              |\\n|    keyup     | 按下並放開鍵盤按鍵時              |\\n|     load     | 網頁或圖片完成下載時              |\\n|  mousedown   | 按下滑鼠按鍵時                    |\\n|  mousemove   | 介於 over 跟 out 間的滑鼠移動行為 |\\n|   mouseout   | 滑鼠離開某物件四周時              |\\n|  mouseover   | 鼠離開某物件四周時                |\\n|   mouseup    | 放開滑鼠按鍵時                    |\\n|    resize    | 當視窗或框架大小被改變時          |\\n|    scroll    | 當捲軸被拉動時                    |\\n|    select    | 當文字被選取時                    |\\n|    submit    | 當按下送出按紐時                  |\\n| beforeunload | 當使用者關閉(或離開)網頁之前      |\\n|    unload    | 當使用者關閉(或離開)網頁之後      |\\n","tocContent":""}')},4732:function(n){"use strict";n.exports=JSON.parse('{"name":"Javascript 學習筆記.md","content":"# Javascript 學習筆記\\n\\n>\\n\\n> **參考資料：**\\n>\\n> [重新認識 javascript](https://ithelp.ithome.com.tw/users/20065504/ironman/1259)\\n\\n## 基本概念\\n\\n- Javascript 的原始值(基本型別/primitive type)：\\n  - null(empty)\\n  - undefined(預設/未定義)\\n  - string(\\"12345\\")\\n  - number(12345)\\n  - boolean(true/false)\\n  - symbol(ES6)\\n- Javascript 的複合值(物件 => object)：包含一個或多個原始值，像是物件或是物件實字，除了基本型別以外的型別都是物件\\n\\n- 物件：使用 new 關鍵字建立物件\\n\\n```javascript\\nconst name = new type(arguments);\\nconst d = new Date();\\n```\\n\\n- 物件實字\\n\\n```javascript\\nvar obj = {\\n  name: \\"eason\\",\\n  action: \\"haha\\",\\n};\\n```\\n\\n- 陣列\\n\\n```javascript\\nvar arr = [1, 2, 3, 4, 5];\\narr[8] = 12;\\narr = [1, 2, 3, 4, 5, \\"\\", \\"\\", \\"\\", 12];\\n```\\n\\n- 用 new 建構出來的是物件 object\\n\\n```javascript\\n    var a = new String(\\"test\\");\\n    typeof(a) = object\\n```\\n\\n- 只有建構式，則會轉為原始值\\n\\n```javascript\\n    var a = String(\\"test\\");\\n    typeof(a) = string\\n```\\n\\n- 複合值在 javascript 是透過記憶體中的位址來比對\\n\\n```javascript\\nvar a = new String(\\"test\\");\\nvar b = new String(\\"test\\");\\n\\nconsole.log(a === b);\\n// false\\n```\\n\\n- 將不同型態的物件通通轉為字串\\n  \\\\`${}\\\\` 在大括號中加入變數\\n\\n- 宣告原始值：單獨放一個記憶體位址 以 by value 運作\\n- 宣告複合值：包含許多原始值，但是只放在一個記憶體位置 以 by reference(參考) 運作\\n\\n- 更改變數為參考物件(複合值)內的原始值，記憶體位址不變\\n- 更改變數為原始值，會更改變數的記憶體位址\\n\\n- undefined\\n  這地方沒有這個東西，所以你無法使用\\n- NaN\\n  要轉型成數字時傳入參數非數字的時候\\n- null\\n  這地方會有一個值，但這個值目前還沒準備好的意思，所以先填入 `null`\\n\\n- this\\n  - 物件掛在誰身上就是`this`，`this`只在當下單一層的作用域裡有效果，箭頭函式就不會。\\n  - 如果宣告變數，則在宣告當層以及內層為有效範圍。\\n  - 單純的呼叫`this`，`this`會變成 Global\\n\\n.bind //定義 function 內的 this 是什麼\\n\\n### 宣告與命名\\n\\n- 命名規則\\n  - 開頭字元需要是 ASCII 字元(英文小寫)，或是下底線(\\\\_)、錢號($)。開頭字元不得使用數字。\\n  - 大小寫敏感\\n  - 名稱不得使用保留字\\n\\n**注意** 下底線開頭的命名常為特別用途：如類別中的私有變數、常數或方法。錢符號也通常為特殊用途命名。\\n\\n變數與方法名稱都用小駝峰式的命名，類別用大駝峰式命名。\\n\\n在 ES5 之前都只會用 `var` 宣告變數，在 ES6 之後加入 `let` 和 `const`，現在應以新加入的特性進行宣告。\\n\\n### let, const 特性\\n\\n- 區塊作用域\\n\\n  - 變數只存活在 {} 花括號裡面，外面不能調用\\n\\n  ```javascript\\n  {\\n    const x = 10;\\n  }\\n  console.log(x); //Uncaught ReferenceError: x is not defined\\n\\n  {\\n    let y = 20;\\n  }\\n  console.log(y); //Uncaught ReferenceError: y is not defined\\n\\n  {\\n    var z = 30;\\n  }\\n  console.log(z); //30\\n  ```\\n\\n- 變量會提升，但若未宣告該變數，會回報錯誤，而非 undefined\\n  - var 變數的宣告，初始預設值為 undefined，但 let, const 不會有這個預設，當執行 let 變數宣告語句時，才會初始化且能夠被訪問。\\n- 不允許重複宣告\\n- 全域變數不會成為 window 的屬性\\n\\n### 如何分辨使用 let 和 const 的時機？\\n\\n> 如果變數會變，就使用 let，不變就用 const\\n\\n更改指的是記憶體地址的改變，而不是值的改變\\n\\n- 記憶體存放變數的原則：\\n  - 基本型別值：\\n    - 字串、數值、undefined、null、symbol\\n    - 以上不能更改他的值，只能重新賦值，此時會更改記憶體位址\\n- 引用值：\\n  - 物件、陣列、函式\\n  - 可以修改裡面的值，這樣不會更改記憶體位置，但若重新賦予一個新的值，就會更改記憶體位址。\\n\\n### let 和 const 解決了什麼問題？\\n\\n用 var 宣告時，容易導致意外汙染全域變數的問題，例如，區域變數覆蓋全域變數\\n\\n```javascript\\nvar food = \\"apple\\";\\nfunction func() {\\n  var result = \\"I eat \\" + food;\\n  console.log(result);\\n}\\nfunc(); //I eat apple\\n```\\n\\n在 func 方法中用到全域變數 food，組合字串及回傳。\\n\\n但如果程式碼變得複雜時，沒注意到 food 已經在第一行宣告過了\\n\\n### javascript 參數傳遞方式\\n\\n> 可能是 Call by sharing\\n\\n下面的例子，原始型別的 mtString 傳遞給 target 的結果符合 call by value 的行為\\n\\n但當我們將 myObj 傳遞給 target 時，為何也出現和 call by value 的行為相同的結果？\\n\\n```javascript\\nvar myString = \\"hello world\\";\\nvar myObj = { prop1: 123 };\\nfunction setAsLiteralObj(target) {\\n  console.log(\\"target_1: \\");\\n  console.log(target);\\n  target = {};\\n  console.log(\\"target_2: \\");\\n  console.log(target);\\n}\\nsetAsLiteralObj(myString);\\nconsole.log(myString); // \'hello world\'\\nsetAsLiteralObj(myObj);\\nconsole.log(myObj);\\n```\\n\\n```txt\\n\x3c!-- setAsLiteralObj(myString) --\x3e\\n\\"target_1: \\"\\n\\"hello world\\"\\n\\"target_2: \\"\\n[object Object] { ... }\\n\x3c!-- setAsLiteralObj(myString) --\x3e\\n\\n\x3c!-- console.log(myString); // \'hello world\' --\x3e\\n\\"hello world\\"\\n\x3c!-- console.log(myString); // \'hello world\' --\x3e\\n\\n\x3c!-- setAsLiteralObj(myObj); --\x3e\\n\\"target_1: \\"\\n[object Object] {\\n  prop1: 123\\n}\\n\\"target_2: \\"\\n[object Object] { ... }\\n\x3c!-- setAsLiteralObj(myObj); --\x3e\\n\\n\x3c!-- console.log(myObj); --\x3e\\n[object Object] {\\n  prop1: 123\\n}\\n\x3c!-- console.log(myObj); --\x3e\\n```\\n\\n當宣告完 `function setAsLiteralObj()` 後的記憶體位置狀況，`setAsLiteralObj()` 其實是被當成一個變數，指向 `function setAsLiteralObj()` 的內容。\\n\\n當呼叫 `setAsLiteralObj()`，此時 `myString` 會將記憶體位置指派給 function 中的 `target` 參數，可以理解為在乎叫 function 時，宣告參數：\\n\\n```javascript\\nvar target = myString;\\n```\\n\\n因此記憶體位置會變成 `myString` 與 `target` 都會指向同一個位置。\\n\\n此時在 function 中，將 `target` 透過字面值賦值 `{}`，所以 `target` 會從原本指向 `hello world` 改成指向我們剛創造出來的 `{}`\\n\\n當呼叫 function 時傳入的參數為 `object` 時，也是一樣的概念 `setAsLiteralObj(myObj)`，`myObj` 會被指派給 function 的參數 `target`。此時，`target` 與執行 `setAsLiteralObj(myString)` 時的 `target` 不同，下面將以 `target\'` 代稱被指配 `myObj` 的新 `target`。\\n\\n在 `target = {}` 時，`target\'` 被賦值 `{}`，因此原來 `target\'` 從原本指向 `{prop1: 123}` 改成指向剛剛創造出來的 `{}` 位置。\\n\\n結果就是 `myString` 和 `myObj` 依然指向原來的記憶體物件，而這些記憶體物件的內容都沒有被改變，改變的只有 `target` 和 `target\'` 指向的記憶體位置而已\\n\\n## 存取資料的方法\\n\\n- 基本類型：傳值(pass by value)\\n- 物件類型：傳址(pass by reference)、pass by sharing\\n\\n### 基本型別\\n\\n當一個變數被賦予基本型別的值時，整個值就會存在記憶體中。\\n\\n當複製基本型別的值到另一個變數時，只會複製他們的值，而該兩變數並不會影響到對方。\\n\\n這個情況稱作傳值。\\n\\n```javascript\\nvar box1 = 10;\\nvar box2 = \\"hello\\";\\n\\n//拷貝box1,box2的值\\nvar boxA = box1;\\nvar boxB = box2;\\n\\nboxA = 30;\\nboxB = \\"goodbye\\";\\n\\nconsole.log(box1, box2, boxA, boxB); // 10,\\"hello\\",30,\\"goodbye\\"\\n```\\n\\n一開始 boxA 和 boxB 只是各自複製了 box1 和 box2 的值，boxA 和 box1，以及 boxB 和 box2 是沒有關係的，所以當要重新賦值給 boxA. boxB 時，box1, box2 不會受到影響。\\n\\n### 物件型別\\n\\n當變數被賦予是物件型別的資料時，記憶體會被存放該物件在記憶體中的位置，並引用該地址來指向該物件。\\n\\n當複製一個物件到另一個變數時，複製的是該物件的地址，若此物件有被修改，所有引用該物件的變數，值都會被修改\\n\\n```javascript\\nvar user = {\\n  name: \\"Mary\\",\\n  age: 30,\\n};\\n\\n//拷貝user物件的地址\\nvar userCopy = user;\\nuserCopy.age = 20;\\n\\nconsole.log(user); // {name: \'Mary\', age:20}\\nconsole.log(userCopy); // {name: \'Mary\', age:20}\\nconsole.log(user === userCopy); // true\\n```\\n\\n但若將變數重新賦予一個新變數\\n\\n```javascript\\nvar user = {\\n  name: \\"Mary\\",\\n  age: 30,\\n};\\n\\nvar userCopy = user;\\n\\nuserCopy = {\\n  name: \\"Mary\\",\\n  age: 20,\\n};\\n\\nconsole.log(user); // {name: Mary\\", age: \\"30\\"}\\nconsole.log(userCopy); // {name: Mary\\", age: \\"20\\"}\\nconsole.log(user === userCopy); // false\\n```\\n\\n當一個變數被重新賦予一個新的物件，並非修改該物件，因此地址整個變了，並指向另一個新的物件。\\n\\n### 把基本型別當作參數傳入函式\\n\\n當我們把基本型別當作參數傳入函式時，函式的參數會複製那些基本型別的值，所以在函式外的變數並不會被影響。\\n\\n```javascript\\nvar box1 = 100;\\nvar box2 = 200;\\n\\nfunction add(a, b) {\\n  a = 10;\\n  b = 20;\\n}\\n\\nadd(box1, box2);\\nconsole.log(box1, box2); //100,200\\n```\\n\\n以上例子中，像之前提及的傳值概念一樣，a 和 b 複製了 box1, box2 的值。即使修改 a 和 b，box1, box2 都不會被修改。\\n\\n### Function\\n\\n> 可以將 javascript 的 function 看做是可執行的物件，其有兩大特性：\\n>\\n> 是 first-class Object\\n> 有自己的 Scope\\n\\n#### First-class Object\\n\\n對物件型別能做的事情，也能對 function 做\\n\\n- 將 function 自由指派給變數或屬性\\n\\n  ```javascript\\n  function myFunction() {\\n    console.log(\\"This is myFunction\\");\\n  }\\n  var a = myFunction,\\n    myObj = { fn: myFunction };\\n  console.log(a); // f myFunction() { console.log(\'This is  myFunction\'); }\\n  console.log(myObj.fn); // f myFunction() { console.log(\'This is  myFunction\'); }\\n  a(); // \\"This is myFunction\\"\\n  myObj.fn(); // \\"This is myFunction\\"\\n  ```\\n\\n  function 可以自由指派給其他參數，當印出 `a`/`myObj.fn` 時，會 log 整個 `myFunction` 的內容。此時變數/屬性的內容是 `myFunction`，因此當加上 `()`，就會執行 function。\\n\\n- 為 function 加上屬性\\n\\n  ```javascript\\n  function myFunction() {\\n    console.log(\\"This is myFunction\\");\\n  }\\n  myFunction.prop1 = \\"This is prop1\\";\\n  console.log(myFunction.prop1); // \\"This is prop1\\"\\n  myFunction(); // \\"This is myFunction\\"\\n  ```\\n\\n- 當作 Expression 使用\\n  `function` 可以搭配各種運算元用，甚至也可以放在 if 中判斷\\n\\n  if 判斷的是 `function` 是否被正式宣告，未加上 `()` 時，`function` 不會被執行\\n\\n  ```javascript\\n  function myFunction() {\\n    console.log(\\"This is myFunction\\");\\n  }\\n  console.log(!myFunction); // false\\n  ```\\n\\n- 可以在任何地方宣告\\n  和物件一樣，可以在任何地方宣告，也可以在 function 中宣告一個 function，甚至在傳入參數時宣告\\n\\n  ```javascript\\n  function myFunction(callback) {\\n    console.log(\\"This is myFunction\\"); // This is myFunction\\n    callback(); // This is myCallback\\n    function myInnerFunction() {\\n      console.log(\\"This is myInnerFunction\\");\\n    }\\n    myInnerFunction(); // This is myInnerFunction\\n  }\\n  myFunction(function myCallback() {\\n    console.log(\\"This is myCallback\\");\\n  });\\n  ```\\n\\n#### 宣告 function\\n\\n宣告的方法主要有三種：\\n\\n- function declaration\\n\\n  ```javascript\\n  function myFunction() {\\n    console.log(\\"Function declared with Function declaration\\");\\n  }\\n  ```\\n\\n- function expression\\n  function 可以被傳遞給其他參數儲存。如字面值一般， function 也可以在定義的同時賦予變數。\\n\\n  ```javascript\\n  var myFunction = function NamedFunction() {\\n    console.log(\\"Function declared with Function expression\\");\\n  };\\n  myFunction(); // \\"Function declared with Function expression\\"\\n  ```\\n\\n  也因為此宣告方式會將 function 傳遞給一個變數，因此 javascript 允許 function 搭配匿名函式使用：\\n\\n  ```javascript\\n  var myFunction = function () {\\n    console.log(\\"Function declared with Function expression\\");\\n  };\\n  myFunction(); // \\"Function declared with Function expression\\"\\n  ```\\n\\n- with function constructor\\n  和其他的內建物件型別相同，function 也可以利用 new 來新增物件\\n\\n  ```javascript\\n  var myFunction = new Function(\\n    \\"parameter1\\",\\n    \\"parameter2\\",\\n    \\"console.log(\'Function declared with Function Constructor\')\\"\\n  );\\n  myFunction(); // Function declared with Function Constructor\\n  ```\\n\\n  若用 function expression 也有相同效果\\n\\n  ```javascript\\n  var myFunction = function (parameter1, parameter2) {\\n    console.log(\\"Function declared with Function expression\\");\\n  };\\n  myFunction(); // \\"Function declared with Function expression\\"\\n  ```\\n\\n  因此一般而言會使用 function expression 取代 new 來增加易讀性與效能\\n\\n#### 呼叫 function\\n\\n- 一般呼叫\\n  在 function 後面加上 `()` 就可以呼叫 function\\n\\n  ```javascript\\n  myFunction();\\n  ```\\n\\n- 使用 function 內建函式呼叫\\n  function 中有內建 `call` 和 `apply` 函式可以用來呼叫 function\\n  和使用 `()` 來執行 function 的差別在於內建函式具有明確指定 this 的功能。\\n\\n  ```javascript\\n  var myFunction = function (parameter1, parameter2) {\\n    console.log(parameter1, parameter2);\\n  };\\n  myFunction.call(null, \\"hello world\\", 123); // \\"hello world\\" 123\\n  myFunction.apply(null, [\\"hello world\\", 123]); // \\"hello world\\" 123\\n  ```\\n\\n  `call` 和 `apply` 函式的差異在於 apply 的第二個參數為陣列，裡面帶要傳入 `function` 的參數，因此在範例中可以看到 `apply` 的第二個參數為 `[\'hello world\', 123]`，這兩個參數會被攤開為 `parameter1` 和 `parameter2` 後放入 `myFunction` 中執行\\n\\n- 使用 new 呼叫\\n  使用 new 代表 function 當作建構式來使用，會回傳子行別為該 function 的物件\\n\\n  ```javascript\\n  function myFunction() {\\n    console.log(\\"Function declared with Function expression\\");\\n  }\\n  var a = new myFunction(); // \\"Function declared with Function expression\\"\\n  console.log(a); // myFunction {}\\n  ```\\n\\n#### IIFF 立即函式\\n\\n> (Immediately Invoked Function Expression) 或稱自我調用函式\\n>\\n> 是一種在定義後立即執行的函式表達式\\n\\nIIFE 有兩種特性：\\n\\n- 當程式執行到 IIFE 的宣告位置時，IIFE 會自動執行\\n- 為一種 function expression\\n\\n```javascript\\n// 格式\\n(function () {\\n  // some codes\\n})();\\n\\n// 實際範例\\n(function () {\\n  console.log(\\"This is IIFE\\"); // \\"This is IIFE\\"\\n})();\\n```\\n\\n不需要額外呼叫就會自己執行，重點除了包裹 function 的 `()` 外，還有用來呼叫 function 的 `()`。\\n\\n若未加上最後面呼叫 function 的 `()`，此 function 便不會自動執行。\\n\\nIIFE 回傳值\\n\\n```javascript\\nvar myString = (function () {\\n  return \\"This is IIFE\\";\\n})();\\nconsole.log(myString); // This is IIFE\\n```\\n\\nIIFE 除了會自動執行以外，與一般 function 的特性都是一模一樣的。\\n\\n使用 IIFE 的原因：\\n\\n1. 作用域隔離：IIFE 可以創建一個新的作用域，防止變數污染全域作用域。避免變數名稱衝突或保護敏感資訊。\\n\\n   ```js\\n   (function () {\\n     //在這個作用域可以用區域變數\\n     var localVar = \\"這是區域變數\\";\\n   })();\\n\\n   // localVar 在這裡為未定義\\n   ```\\n\\n2. 模組化：IIFE 可以用於創建模組，將程式碼組織成可重複使用且相對獨立的片段。這有助於提高程式碼的可讀性與維護性。\\n\\n   ```js\\n   var 模組 = (function () {\\n     // 私有變數或函式\\n     var privateVar = \\"私有變數\\";\\n\\n     // 返回一個公共接口\\n     return {\\n       getPrivateVar: function () {\\n         return privateVar;\\n       },\\n     };\\n   })();\\n\\n   console.log(模組.getPrivateVar(); // 可以訪問模組的公共接口\\n   ```\\n\\n3. 防止變數提升：IIFE 可以有效防止變數提升(hoisting)，確保函式內部聲明的變數不會污染外部作用域。\\n\\n   ```js\\n   (function () {\\n     const localVar = \\"這是區域變數\\";\\n     console.log(localVar); // 正確顯示區域變數的值\\n   })();\\n\\n   console.log(localVar); // 未定義\\n   ```\\n\\n   **ES6 的`const`和`let`，取代立即函式避免汙染全域的優點**\\n\\n#### Scope 作用域\\n\\n> Scope: 規範哪些變數在哪些程式碼中可以取用的規則\\n>\\n> javascript 和大多數的語言都是採用 Lexical Scope(語彙範疇)\\n\\n- Lexical Scope 語彙範疇\\n\\n  代表著區塊間的包裹關係，被包裹在內層的區塊可以保護自己的變數不被外層取用；相反的，外層區域的變數還是可以被內層區塊使用\\n\\n  ```javascript\\n  var outer = \\"From Outer\\";\\n  function myFunction() {\\n    var inner = \\"From Inner\\";\\n    console.log(outer); // \\"From Outer\\"\\n    console.log(inner); // \\"From Inner\\"\\n  }\\n  console.log(outer); // \\"From Outer\\"\\n  console.log(inner); // Uncaught ReferenceError: inner is not defined\\n  ```\\n\\n  在 function 的 `{}` 區塊中宣告一個新的變數 `inner`，此一變數可以在 `myFunction(){}` 的區塊裡被取用，然而當 `myFunction(){}` 區塊外試圖取用 `inner` 時，就會發生 `innerVar is not defined` 的錯誤。\\n\\n- 參數也屬於內層 scope\\n\\n  ```javascript\\n  var myString = \\"hello world\\";\\n  function setAsLiteralObj(target) {\\n    target = {};\\n  }\\n  setAsLiteralObj(myString);\\n  console.log(myString); // \'hello world\'\\n  console.log(target); // Uncaught ReferenceError: target is not defined\\n  ```\\n\\n  執行 `setAsLiteralObj(myString);` 時，`myString` 會將記憶體位置指派給 `function` 中新的參數 `target`，也就是 `target` 是再執行 `setAsLiteralObj` 時才建立的新參數，新參數 `target` 是屬於 `setAsLiteralObj` 這個 `function` 區塊，因此在外層印 `target` 時，一樣會得到錯誤訊息。\\n\\n- 巢狀 scope\\n\\n  ```javascript\\n  var outer = \\"outer\\";\\n  function myFunction() {\\n    // --- 內層 ---\\n    var middle = \\"middle\\";\\n    function myInnerFunction() {\\n      // ~~~ 最內層 ~~~\\n      var inner = \\"inner\\";\\n      // ~~~ 最內層 ~~~\\n    }\\n    myInnerFunction();\\n    // --- 內層 ---\\n  }\\n\\n  myFunction();\\n  ```\\n\\n#### 參數傳遞 call by value/reference//shares\\n\\n##### call by value(pass by value) 傳值\\n\\n```js\\nfunction calculate(a, b) {\\n  let temp = a;\\n  a = b;\\n  b - temp;\\n}\\n\\nlet x = 10;\\nlet y = 20;\\ncalculate(x, y);\\nconsole.log(x, y); // 10, 20\\n```\\n\\n數字快打\\n當執行計算後， x 和 y 的值並沒有改變，因為傳入的並不是 x 和 y 的值，而是當 function 呼叫時，複製 x 和 y 的值並宣告為新的變數 a 和 b。\\n\\n##### call by reference 傳址\\n\\n```js\\nfunction calculate(obj) {\\n  obj.number++;\\n}\\n\\nlet o = { number: 10 };\\ncalculate(o);\\nconsole.log(o.number); // 11\\n```\\n\\n為當一個變數型別為物件時，其傳遞至 function，在 function 中宣告的變數會指向外部的變數，因此，當修改 function 中的變數時，會改變外部的變數。\\n\\n## 運算式與運算子\\n\\n### 嚴謹模式\\n\\n- 宣告在主程式開頭：Global Scope，所有的程式都會在嚴謹模式下執行。\\n- 宣告在函數開頭：Function Scope，只有該函數內的程式會在嚴謹模式下執行。\\n\\n```javascript\\nvar chang = 100; // 將變數chang改成99\\nchag = 99; // 拼錯字\\nconsole.log(chang); // 100\\n\\n(\\"use strict\\");\\nvar chang = 100;\\nchag = 99; // // ReferenceError: chag is not defined\\n```\\n\\n- 嚴謹模式需要明確的宣告，未明確宣告`this`也會失效，這樣比較不會因為拼錯字而產生污染\\n- 在非嚴謹模式下如果沒有用 var 宣告變數，而直接賦值，會直接將此變數作宣告\\n- 嚴謹模式下並不會幫你執行，程式完全不跑\\n\\n### 賦值運算子\\n\\n- 賦值\\n- 賦予左方運算元與右方運算元相同之值。`x = y` 會把`y`的值賦予給`x`。\\n\\n```javascript\\nx = y;\\n```\\n\\n- 加法賦值\\n\\n```javascript\\nx += y;\\nx = x + y;\\n```\\n\\n- 減法賦值\\n\\n```javascript\\nx -= y;\\nx = x - y;\\n```\\n\\n### 比較運算子\\n\\n`==`：等於\\n\\n`!=`：不等於\\n\\n- 如果運算元相同型別，就使用嚴格比較去檢驗。\\n- null 跟 undefined 相同。\\n- 運算元一個是數值，一個是字串，會將字串轉數字，再進行比較。\\n- 其中一個是 true 或 false 會轉成數字的 1 或 0，再進行比較。\\n- 其中一個是物件，另一個是字串或數值，物件會先轉成基型值，再進行比較。\\n\\n`===`：嚴格等於\\n\\n`!==`：嚴格不等於\\n\\n- 先判斷運算元的型別是否相同，若不相同，結果為 false。\\n- null 與 undefined 都跟自己相等。\\n- true 與 false 都跟自己相等。\\n- NaN 不等於任何值，包括自己。\\n- 只要是 number 型別的值一樣，他們就相等。\\n- 0 跟-0 相等。\\n- string 長度跟內容不一樣，包括空白，它們就不相等。\\n- 如果參考至同一個物件、陣列、函式，相同的記憶體位置，他們就相等，若無，就算內容的值一樣，它們也不相等，不同的記憶體位置存相同的值。\\n\\n```javascript\\nconsole.log(\\"1\\" === 1); //false\\nconsole.log(null === null); //true\\nconsole.log(undefined === undefined); //true\\nconsole.log(null === undefined); //false\\nconsole.log(NaN === NaN); //false\\nconsole.log(NaN !== NaN); //true\\nconsole.log(\\"ABC\\" === \\"ABC \\"); //false\\n```\\n\\n`>`：大於\\n\\n`>=`：大於等於\\n\\n`<`：小於\\n\\n`<=`：小於等於\\n\\n注意：`=>`不是運算子，是箭頭函式。\\n\\n### 算數運算子\\n\\n- `%` 回傳兩個運算元相除後的餘數。\\n\\n```javascript\\ncount = 12 % 5;\\nconsole.log(count); // 回傳 2\\n```\\n\\n- `++` 將運算元增加 1。\\n\\n```javascript\\nx = 3;\\nx++;\\nconsole.log(x); // 回傳4，設定之後回傳\\n\\n++x;\\nconsole.log(x); // 回傳3，回傳之後再設定\\n```\\n\\n- `--` 將運算元減少 1。\\n\\n```javascript\\nx = 3;\\nx--;\\nconsole.log(x); // 回傳2，設定之後回傳\\n\\n--x;\\nconsole.log(x); // 回傳3，回傳之後再設定\\n```\\n\\n### 邏輯運算子\\n\\n- `&&` // `and` 前後全部為 `true` ，才會是 `true`，否則都返回 `false`\\n- `||` // `or` 前後只要一個是 `true` 就會返回 `true`，除非全部都是 `false`\\n- `!` // `not` 將後面的值做反向，如果是 `true` 就返回 `false`，如果是 `false` 就返回 `true`\\n- `!!` // `true`反轉再反轉，返回原本的布林值。\\n  大多用在轉換一些可以形成布林值的情況。\\n  而經過`!!`運算後，只會很單純出現`true` or `false`，可以單純化減少某些特殊情況出錯的機率。\\n  例如：希望\\"空字串\\"和`null`被視為完全相同時\\n\\n  ```javascript\\n  const a = \\"\\";\\n  const b = null;\\n\\n  a === b; // false\\n  !!a === !!b; // true\\n  ```\\n\\n- 短路邏輯(短路解析)\\n  Javascript 裡面只要是 `0`、`\\"\\"`、`null`、`false`、`undefined`、`NaN` 都會被判定為 `false`\\n\\n  - 用 || 來設定變數預設值\\n    如果 obj 存在的話就維持原樣，如果不存在就給予空物件\\n\\n    ```javascript\\n    if (!obj) {\\n      obj = {};\\n    }\\n\\n    //短路邏輯的寫法\\n    var obj = obj || {};\\n    ```\\n\\n  - 用 && 來檢查物件與屬性值\\n\\n    ```javascript\\n    var name = o && o.getName();\\n    ```\\n\\n  - 用 || 來簡化程式碼\\n\\n    ```javascript\\n    if (!obj) {\\n      call_function();\\n    }\\n    obj || call_function();\\n    ```\\n\\n  - 用 && 來簡化程式碼\\n\\n    ```javascript\\n    var a = 1;\\n    if (a == 1) {\\n      alert(\\"a=1\\");\\n    }\\n    a == 1 && alert(\\"a=1\\");\\n    ```\\n\\n  - 用 && 、|| 來簡化程式碼\\n\\n    ```javascript\\n    var a = 3,\\n      b;\\n    if (a == 3) {\\n      b = 1;\\n    } else if (a == 5) {\\n      b = 2;\\n    } else {\\n      b = 3;\\n    }\\n    b = (a == 3 && 1) || (a == 5 && 2) || 3;\\n    ```\\n\\n  - 善用 ! 的轉換\\n\\n    ```javascript\\n    if (obj !== \\"null\\" && obj !== \\"undefined\\") {\\n      //....\\n    }\\n    if (!!obj) {\\n      //....\\n    }\\n    ```\\n\\n### 其餘運算子與展開運算子\\n\\n- 其餘運算子\\n\\n  假設要將一個陣列的值相加後取平均\\n\\n  ```javascript\\n  let arr = [1, 2, 3, 4, 5];\\n\\n  let avg = function (arr) {\\n    let sum = 0;\\n    for (let i = 0; i < arr.length; i++) {\\n      sum += arr[i];\\n    }\\n    return sum / arr.length;\\n  };\\n\\n  console.log(avg(arr)); //  3\\n  ```\\n\\n  但若呼叫 function 時，不是傳入陣列，而是傳入多個參數\\n\\n  最後得到的結果會是 NaN\\n\\n  ```javascript\\n  let avg = function (arr) {\\n    let sum = 0;\\n    for (let i = 0; i < arr.length; i++) {\\n      sum += arr[i];\\n    }\\n    return sum / arr.length;\\n  };\\n\\n  console.log(avg(1, 3, 5, 7, 9)); // NaN\\n  ```\\n\\n  運用其餘運算子`...`，將輸入函式中的參數值變成陣列的形式\\n\\n  ```javascript\\n  let avg = function (...arr) {\\n    console.log(arr); // [1,3,5,7,9]\\n    let sum = 0;\\n    for (let i = 0; i < arr.length; i++) {\\n      sum += arr[i];\\n    }\\n    return sum / arr.length;\\n  };\\n\\n  console.log(avg(1, 3, 5, 7, 9)); // 5\\n  ```\\n\\n- 展開運算子 `...`\\n\\n  關鍵字與其餘運算子相同，但功能與其餘運算子相反，展開運算子可以把陣列中的元素取出。\\n\\n  假設要用 `Math.max()` 來找出最大值，但傳入的參數為陣列，此時會得到 NaN\\n\\n  ```javascript\\n  let number = [1, 2, 3, 4, 5, 6, 7, 8];\\n\\n  console.log(Math.max(number)); // NaN\\n  ```\\n\\n  運用展開運算子將陣列展開成許多數值\\n\\n  ```javascript\\n  let number = [1, 2, 3, 4, 5];\\n\\n  console.log(Math.max(...number)); // 5\\n\\n  console.log(...number); // 1,2,3,4,5\\n  ```\\n\\n### 三元運算式\\n\\n```javascript\\ncondition ? val1 : val2;\\n```\\n\\n- 如果條件為 true ，此時回傳[數值 / 運算式（1）]\\n- 如果條件為 false，此時回傳[數值 / 運算式（2）]\\n\\n```javascript\\nvar status = \\"\\";\\nif (a < 60) {\\n  status = \\"不及格\\";\\n} else {\\n  status = \\"及格\\";\\n}\\n\\n// 三元運算式\\nvar status = a < 60 ? \\"不及格\\" : \\"及格\\";\\n```\\n\\n### if else\\n\\n```javascript\\nif (A) {\\n  //  A = True 執行這邊\\n} else if (B) {\\n  //  A = False and B = True 執行這邊\\n} else {\\n  //  A = False and B = False 執行這邊\\n}\\n```\\n\\n- 判斷式括號裡會強制轉成布林值\\n- `null` 跟 `undefined` 和 `NaN` 在 if 判斷時值都會轉換為 `false`\\n\\n## 流程判斷與迴圈\\n\\n### switch\\n\\n```javascript\\nswitch (expression) {\\n  // expression => 表達式，用來跟每個case做比較\\n  case value1:\\n    //當 表達式 的值符合 value1\\n    //要執行的陳述句\\n    break;\\n  case value2:\\n    //當 表達式 的值符合 value2\\n    //要執行的陳述句\\n    break;\\n  default:\\n    //當 表達式 的值都不符合上述條件\\n    //要執行的陳述句\\n    break;\\n}\\n```\\n\\n- 如果忘記放 break，則當下的 case 執行完之後，會直接往下一個 case 執行，直到遇見 break\\n\\n```javascript\\nswitch (表達式) {\\n  case x:\\n  case y:\\n  case z:\\n    //如果有多項條件，要執行同一陳述句可以合併撰寫\\n    // code block\\n    break;\\n  case a:\\n  case b:\\n  case c:\\n    // code block\\n    break;\\n}\\n```\\n\\n### while 迴圈\\n\\n```javascript\\nwhile (condition) {\\n  陳述句; // 當 condition 為 true，就重複做\\"陳述句\\"\\n  break; // 遇到 break 就會停止，否則就會繼續執行，直到 condition 為 false\\n}\\n```\\n\\n- 完成之後再回去檢查 `condition`\\n- 直到 `condition`不成立，才會離開\\n\\n```javascript\\ndo {\\n  // 放要重複做的事情，會先執行一次再進入判斷\\n} while (condition);\\n```\\n\\n### for 迴圈\\n\\n```javascript\\nfor (var i = 0; i < 10; i++) {\\n  // 要被執行的陳述句\\n  // for迴圈會產生出從\\"i = 0\\"開始到\\"i < 10\\"的長度\\n  // 可以當作計數器，每數一次就執行一次陳述句\\n}\\n\\n// for (statement 1; statement 2; statement 3){}\\n// Statement 1 執行程式之前做一次\\n// Statement 2 執行程式的條件\\n// Statement 3 執行程式後每次執行\\n\\nfor (var i = 0; i < 10; i++) {\\n  // 也可以在迴圈裡加入判斷式取\\"i\\"的值\\n  if (i % 2 == 0) {\\n    continue; //跳過這次不做\\n  }\\n  if (i == 7) {\\n    break; //跳出整個for迴圈\\n  }\\n\\n  console.log(i); // ans = \\"1  3  5\\" 7跟9已經跳出迴圈，所以不會被執行出\\n}\\n```\\n\\n### for...in 與 for...of\\n\\n- 迭代物件屬性時，使用 `for...in`；迭代陣列時，使用 `for...of`。\\n- `for...in` 輸出屬性名稱(key)，`for...of` 屬出值(value)。\\n\\n```javascript\\nlet array = [1, 3, 6];\\n\\nfor (let i in array) {\\n  console.log(i); // \\"0\\", \\"1\\", \\"2\\"\\n}\\n\\nfor (let i of array) {\\n  console.log(i); // 1, 3, 6\\n}\\n```\\n\\n若在此陣列中增加 `foo` 屬性\\n\\n```js\\narray.foo = \\"test\\"; // [ 1, 3, 6, foo: \'test\' ]\\n\\nfor (let i in array) {\\n  console.log(i); // \\"0\\", \\"1\\", \\"2\\", \\"foo\'\\n}\\n\\nfor (let i of array) {\\n  console.log(i); // 1, 3, 6, undefined\\n}\\n```\\n\\n## 函式 function\\n\\n> function 是物件的一種\\n\\n### 定義函式\\n\\n- 函式宣告\\n\\n  ```javascript\\n  function name(params) {\\n    // do some things\\n  }\\n  ```\\n\\n- 函式運算式\\n\\n  透過匿名函式將變數賦值\\n\\n  ```javascript\\n  var square = function (params) {\\n    return params;\\n  };\\n  ```\\n\\n  若在 function 加上名稱時，這個名稱只在\\"自己函式的區塊內有效\\"\\n\\n  ```javascript\\n  var square = function func(number) {\\n    console.log(typeof func); // \\"function\\"\\n    return number * number;\\n  };\\n\\n  console.log(typeof func); // undefined\\n  ```\\n\\n- 透過 new 關鍵字建立函式\\n\\n```javascript\\n// F 要大寫\\nvar square = new Function(\\"number\\", \\"return number * number\\");\\n```\\n\\n透過關鍵字建立的函式物件，每次執行時都會進行解析字串的動作(如：`\'return number * number\'`)\\n\\n### 箭頭函式\\n\\n```javascript\\nfunction test(a) {\\n  return a + 1; // 將物件、運算結果傳出到呼叫點\\n}\\n\\nvar test = function (a) {\\n  return a + 1;\\n};\\n\\nvar test = (a) => {\\n  return a + 1;\\n};\\n\\nvar test = (a) => a + 1; //最終省略了function和return\\n\\nvar answer = test(5); //呼叫點，test(5)會將刮號內的參數傳到function的刮號(a)中\\n```\\n\\n- 箭頭函式僅用於 function 內只有一條運算式時\\n\\n### Scope 變數的有效範圍\\n\\n> 全域變數和區域變數的差異\\n\\n```javascript\\nvar x = 1;\\n\\nvar someThingHappened = function (y) {\\n  var x = 100;\\n  return x + y;\\n};\\n\\nconsole.log(someThingHappened(50)); // 150\\nconsole.log(x); // 1\\n```\\n\\n切分變數有效範圍的最小單位是 `function`\\n\\n因此在 function 中透過 var 宣告的變數，其作用範圍僅限於這個函式。\\n\\n此例中在一開始宣告的變數 x 與在 function 內部宣告的變數 x 為兩個不同變數。\\n\\n若 function 中沒有宣告新變數，則會一層一層往外尋找，直到全域變數為止\\n\\n```javascript\\nvar x = 1;\\n\\nvar doSomeThing = function (y) {\\n  x = 100;\\n  return x + y;\\n};\\n\\nconsole.log(doSomeThing(50)); // 150\\nconsole.log(x); // 100\\n```\\n\\n此例中，function 中未宣告新變數 x，因此 javascript 向外層尋找同名的變數，直到最外層的全域變數，並將其賦值。\\n\\n### Hoisting 提升\\n\\n#### 變數提升\\n\\n當 Scope 中的變數有被宣告，即使在宣告之前即調用變數，javascript 會將先告的語法拉到此 scope 的上面\\n\\n```javascript\\nvar x = 1;\\n\\nvar doSomeThing = function (y) {\\n  console.log(x); // undefined\\n\\n  var x = 100;\\n  return x + y;\\n};\\n\\nconsole.log(doSomeThing(50)); // 150\\nconsole.log(x); // 1\\n```\\n\\n對編譯器而言此，這段程式碼會是這個樣子\\n\\n```javascript\\nvar x = 1;\\n\\nvar doSomeThing = function (y) {\\n  var x; // 宣告的語法被拉到上面\\n  console.log(x); // undefined\\n  x = 100;\\n  return x + y;\\n};\\n\\nconsole.log(doSomeThing(50)); // 150\\nconsole.log(x); // 1\\n```\\n\\n#### 函式提升\\n\\n透過\\"函式宣告\\"方式定義的函式可以在宣告前使用\\n\\n```javascript\\nsquare(2); // 4\\n\\nfunction square(number) {\\n  return number * number;\\n}\\n```\\n\\n而透過\\"函式運算式\\"定義的函式則是會出現錯誤\\n\\n```javascript\\nsquare(2); // TypeError: square is not a function\\n\\nvar square = function (number) {\\n  return number * number;\\n};\\n```\\n\\n除呼叫時機不同，此兩者在執行時無明顯差異\\n\\n#### 為何會有 Hoisting 的現象？\\n\\n> javascript 中的 Compiler(編譯器) 和 Engine (引擎) 執行的順序，造成提升的特性\\n\\n- 變數宣告屬於 compiler 的工作\\n  javascript compiler 會將程式碼解析成有意義的語法結構，轉換成機器可以理解的目的碼。接著 compiler 會建立所有的變數，保留其記憶體空間，並且繫結到所屬的 scope 上面。也就是說，程式開始一行一行執行前，會先將所有變數宣告好。\\n\\n- 初始化、賦值屬於 engine 的工作\\n  在 compiler 好之後，engine 才會開始一行一行的執行程式，也就是初始化、賦值的這個動作也是由 engine 在編譯好之後，等待被執行的程式碼之一。\\n\\n#### 最佳實踐\\n\\n1. 宣告變數應集中在燈前 scope 的最上面\\n\\n### 全域變數\\n\\n其實在 javascript 中並無所謂\\"全域變數\\"，所謂全域變數指的是\\"全域物件\\"(亦稱作\\"頂層物件\\")的屬性。\\n\\n以瀏覽器而言，全域物件指的是 `window`，在 node 的環境中則叫做 `global`。\\n\\n- 全域物件的屬性\\n\\n  於外層透過 var 宣告一個變數 a，當我們調用 `window.a` 會回傳我們宣告的此一變數\\n\\n  ```javascript\\n  var a = 10;\\n  console.log(a); // 10\\n  ```\\n\\n- 變數的作用範圍，最小的的切分單位為 function\\n- 即使是寫在函式中，沒有 var 宣告的變數，會變成全域變數\\n- 全域變數指的是全域物件(頂層物件)的屬性\\n\\n> ### 附註\\n>\\n> 在 javascript ES6 之後有新的宣告方法 let 與 const，分別定義\\"變數\\"與\\"常數\\"\\n> 和 var 不同的是，他們的作用區域是透過大括號`{}`來切分的\\n\\n### closure\\n\\n> 閉包(closure) 是一種函式，他能夠存取被宣告當下環境中的變數。\\n\\nclosure 是兩個主體構成的一個組合。分別為：\\n\\n1. 函式 (function)\\n2. 函式被宣告時所在的語彙環境(lexical environment)\\n\\n**語彙環境 lexical environment:**\\n\\n函式被宣告時所在的 scope，而此 scope 裡面包含了能夠被這個函式存取到的變數。簡而言之，語彙環境就是「函式能夠存取到的所有變數」。\\n\\n因此 closure 就是一個函式能夠存取，自己被宣告時的環境中的變數。\\n\\n```js\\nfunction shop(shopType) {\\n  // 餐廳菜單\\n  let restaurantMenu = {\\n    burger: 300,\\n    pizza: 350,\\n    sandwich: 100,\\n    fries: 150,\\n    milkshake: 90,\\n  };\\n  // 餐廳今日特餐\\n  let restaurantSpecials = { steak: 500, lobster: 800 };\\n  // 咖啡店菜單\\n  let coffeeMenu = {\\n    latte: 120,\\n    dripCoffee: 150,\\n    americano: 100,\\n    espresso: 80,\\n    tea: 150,\\n  };\\n\\n  // 介紹菜單\\n  function introduceMenu() {\\n    let message = \\"\\"; // 招呼語\\n    let menu = []; // 菜單內容\\n    let special = []; // 特餐內容\\n\\n    // 現在用餐時段為下午茶或是正餐\\n    if (shopType === \\"meal\\") {\\n      message = \\"Welcome to our restaurant!\\";\\n      menu = Object.keys(restaurantMenu);\\n      special = Object.keys(restaurantSpecials);\\n    } else if (shopType === \\"coffee\\") {\\n      message = \\"Welcome to our coffee shop!\\";\\n      menu = Object.keys(coffeeMenu);\\n    }\\n    console.log(message);\\n    console.log(\\"Our menu:\\");\\n    menu.forEach((item) => {\\n      console.log(`- ${item}`);\\n    });\\n\\n    // 下午茶沒有提供特餐\\n    if (special.length > 0) {\\n      console.log(\\"\\\\nOur specials:\\");\\n      special.forEach((item) => {\\n        console.log(`- ${item}`);\\n      });\\n    }\\n  }\\n\\n  // 結帳\\n  function countPrice(items) {\\n    let totalPrice = 0;\\n    console.log(\\"\\\\nItems purchased today:\\");\\n    for (const iterator of items) {\\n      let price = 0;\\n      if (shopType === \\"meal\\") {\\n        if (typeof restaurantMenu[iterator] === \\"undefined\\") {\\n          price = restaurantSpecials[iterator];\\n        } else {\\n          price = restaurantMenu[iterator];\\n        }\\n      } else if (shopType === \\"coffee\\") {\\n        price = coffeeMenu[iterator];\\n      }\\n      console.log(`- ${iterator}: ${price} dollars`);\\n      totalPrice += price;\\n    }\\n    console.log(`Total price: ${totalPrice}`);\\n  }\\n\\n  // 更換菜單\\n  function changeMenu(newMenu) {\\n    if (shopType === \\"meal\\") {\\n      restaurantMenu = newMenu;\\n    } else if (shopType === \\"coffee\\") {\\n      coffeeMenu = newMenu;\\n    }\\n  }\\n\\n  // 更換餐廳特餐\\n  function changeSpecials(newSpecials) {\\n    restaurantSpecials = newSpecials;\\n  }\\n  return {\\n    greet: introduceMenu, // 介紹菜單\\n    checkOut: countPrice, // 結帳\\n    changeMenu: changeMenu, // 更換菜單\\n    changeSpecials: changeSpecials, // 更換特餐\\n  };\\n}\\n// 用餐時段為下午茶\\nconst good2drink = shop(\\"coffee\\");\\ngood2drink.greet();\\ngood2drink.checkOut([\\"latte\\", \\"dripCoffee\\", \\"americano\\"]);\\n\\n// 用餐時段為正餐\\nconst good2eat = shop(\\"meal\\");\\ngood2eat.greet();\\ngood2eat.checkOut([\\"burger\\", \\"fries\\", \\"milkshake\\", \\"steak\\"]);\\n\\n// 嘗試直接存取餐廳特餐變數\\nconsole.log(good2eat.restaurantSpecials); // undefined\\n\\n// 修改餐廳菜單\\ngood2eat.restaurantSpecials = { dogShit: 500 };\\ngood2eat.greet(); // 未被影響\\ngood2eat.changeMenu({ ramen: 150, sushi: 180 });\\ngood2eat.greet(); // ramen, sushi\\n```\\n\\n## Promise\\n\\n當 javascript 在執行時，會將非同步操作留到最後進行處理。\\n\\n非同步操作如：文件操作、資料庫操作、AJAX 及定時器等等。\\n\\njavascript 基本實現非同步的方式：\\n\\n- 回調函示 callback function\\n  當需要執行多個非同步操作時，程式碼會不斷的往內嵌套，又被稱做 callback 地獄(callback hell)\\n\\n  ```js\\n  callback(() => {\\n    console.log(\\"Hello!\\");\\n    callback(() => {\\n      console.log(\\"Hello!\\");\\n      callback(() => {\\n        console.log(\\"Hello!\\");\\n        callback(() => {\\n          console.log(\\"Hello!\\");\\n        }, 200);\\n      }, 200);\\n    }, 200);\\n  }, 200);\\n  ```\\n\\n### 如何使用 Promise\\n\\n> 用來表示一個非同步操作的最終完成(或失敗)及其結果值\\n\\nPromise 為一個構造函示，透過 new 關鍵字建立一個 promise。其會接收一個函示作為參數，此函示又稱為 executor，executor 會立即執行。\\n\\n```js\\nnew Promise((resolve, reject) => {\\n  console.log(\\"即刻執行\\");\\n});\\n```\\n\\n而此 executor 會再接受另外兩個函示參數：\\n\\n- resolve 實現函數：當請求完成，成功時會調用 resolve，並回傳結果。\\n- reject 拒絕函數：當請求完成，失敗時會調用。\\n\\n```js\\nfunction requestData(url) {\\n  return new Promise((resolve, reject) => {\\n    setTimeout(() => {\\n      if (url === \\"example.com\\") {\\n        resolve(\\"hello welcome to example.com\\");\\n      } else {\\n        reject(\\"it is not example.com\\");\\n      }\\n    }, 3000);\\n  });\\n}\\n\\n// 1. 請求成功\\nrequestData(\\"example.com\\").then((res) => {\\n  console.log(res); //hello welcome to example.com\\n});\\n\\n// 2. 請求失敗\\nrequestData(\\"example.com.com\\").catch((e) => console.log(e)); //it is not example.com\\n```\\n\\n### 狀態\\n\\nPromise 狀態有三種\\n\\n- pending 初始狀態，已執行 executor，但還在等待中。\\n- fulfilled 表示操作完成，執行 resolve 函式。\\n- rejected 表示操作失敗，執行 reject 函式。\\n\\n### then 的使用\\n\\n1. 多次調用\\n   promise 可以用鏈式(chaining)的方式串連多個非同步操作\\n\\n   ```js\\n   function requestData(url) {\\n     return new Promise((resolve, reject) => {\\n       setTimeout(() => {\\n         if (url === \\"example.com\\") {\\n           resolve(\\"hello welcome to example.com\\");\\n         } else {\\n           reject(\\"it is not example.com\\");\\n         }\\n       }, 3000);\\n     });\\n   }\\n\\n   requestData(\\"example.com\\")\\n     .then((res) => {\\n       console.log(res);\\n       // 印出 executor 執行的結果 => hello welcome to example.com\\n       return 1;\\n     })\\n     .then((res) => {\\n       console.log(res); // 印出前面執行結束後回傳的值 => 1\\n       return 2;\\n     })\\n     .then((res) => {\\n       console.log(res); // 印出前面執行結束後回傳的值 => 2\\n     });\\n   ```\\n\\n2. 傳入兩個參數，一是成功的回調，二是失敗的回調\\n\\n   ```js\\n   function requestData(url) {\\n     return new Promise((resolve, reject) => {\\n       setTimeout(() => {\\n         if (url === \\"example.com\\") {\\n           resolve(\\"hello welcome to example\\");\\n         } else {\\n           reject(\\"it is not example\\");\\n         }\\n       }, 0);\\n     });\\n   }\\n\\n   requestData(\\"example.com\\").then(\\n     (res) => {\\n       console.log(res);\\n     },\\n     (reason) => {\\n       console.log(reason); // 錯誤，回傳 => it is not example\\n     }\\n   );\\n   ```\\n\\n### 錯誤處理\\n\\nPromise 的錯誤處理，只需要加上 catch 捕捉錯誤，並執行一些錯誤處理代碼。當請求失敗時，catch 方法將捕獲錯誤，並輸出錯誤訊息。\\n\\n```js\\nfetch(\\"https://explainthis.com/data\\")\\n  .then((response) => response.json())\\n  .then((data) => {\\n    console.log(data);\\n  })\\n  .catch((error) => {\\n    console.error(\\"oops!\\", error); // 捕獲錯誤，輸出錯誤訊息\\n  })\\n  .finally(() => {\\n    console.log(\\"close loader\\"); // 操作完成，輸出 => close loader\\n  });\\n```\\n\\n### finally\\n\\n若有加上 `finally`，當 Promise 完成後，無論狀態為 fulfilled 或是 rejected 都會進入 finally 方法。\\n\\n### async/await 同步操作\\n\\n首先使用 async 關鍵字將函式標記為非同步函式，也就是指返回值為 Promise 物件的函式。\\n\\n在非同步函式中，可以調用其他非同步函式，並使用 await 語法，await 會等待 Promise 完成之後返回最終的結果。\\n\\n```js\\nasync function getData() {\\n  const res = await fetch(\\"https://getsomedata\\");\\n  const data = await res.json();\\n  console.log(data);\\n}\\n\\ngetData();\\n```\\n\\n## document\\n\\n### `createdElement()` 建立節點\\n\\n例如在文件中新增一個 `<em>` 標籤\\n\\n```javascript\\nvar str = document.createElement(\\"em\\"); //新增 em 標籤\\nstr.textContent = \\"新增文字\\";\\n```\\n\\n### `appendChild()` 增加子節點\\n\\n在 html 中，新增一個 `<div>`\\n\\n```html\\n<div class=\\"title\\">title</div>\\n```\\n\\n增加子節點\\n\\n```javascript\\ndocument.querySelector(\\".title\\").appendChild(str);\\n```\\n\\n最終 html 上面顯示：\\n\\n```html\\n<div class=\\"title\\">\\n  title\\n  <em class=\\"red\\">新增文字</em>\\n</div>\\n```\\n\\n### `.querySelector` 元素選擇器\\n\\n用法和 css 一樣，選取 id 元素時用 `#`，選取 class 元素時用 `.`\\n\\n```javascript\\ndocument.querySelector(\\".title\\");\\n```\\n\\n### `.querySelectorAll` 選取所有指定元素\\n\\n用法和 `.querySelector()` 一樣，但不同於 `.querySelector()`，`.querySelectorAll()` 可以一次選取所有具有相同元素的內容\\n\\n### `setAttribute()` 增加標籤屬性\\n\\n透過 javascript 來增加 HTML 標籤屬性，例如要動態加上一個 a 標籤連結\\n\\n```html\\n<div class=\\"titleClass\\">\\n  <a href=\\"#\\">Link</a>\\n</div>\\n<script src=\\"js/practice1.js\\"><\/script>\\n```\\n\\n```javascript\\nconst el = document.querySelector(\\".titleClass\\"); //選擇單一元素為 HTML 裡的 class 名稱為 titleClass\\nel.setAttribute(\\"href\\", \\"www.facebook.com\\"); //前面是屬性，後面是內容\\n```\\n\\n動態新增 id 來操控 HTML\\n\\n```html\\n<div class=\\"str\\">title</div>\\n<script src=\\"js/practice1.js\\"><\/script>\\n```\\n\\n```css\\n#strId {\\n  color: blue;\\n  font-size: 18px;\\n}\\n```\\n\\n```javascript\\nvar elStr = document.querySelector(\\".str\\"); //選擇單一元素為 HTML 的 class 名稱為 str\\nelStr.setAttribute(\\"id\\", \\"strId\\"); //因為在 CSS 有動態新增一個 id，所以選擇新增的 id 屬性來控制他的值(會帶回 CSS 的設定內容)\\n```\\n\\n### 移除 HTML 元素\\n\\n#### 使用 CSS 隱藏元素\\n\\n```javascript\\nvar elem = document.querySelector(\\"#some-element\\");\\nelem.style.display = \\"none\\";\\n```\\n\\n#### `removeChild()` 從 DOM 中完全移除元素\\n\\n```javascript\\nvar elem = document.querySelector(\\"#some-element\\");\\nelem.parentNode.removeChild(elem);\\n```\\n\\n### `remove()` ES6 新方法\\n\\n```javascript\\nvar elem = document.querySelector(\\"#some-element\\");\\nelem.remove();\\n```\\n\\n### `addEventListener()` 事件監聽\\n\\n- `element.addEventListener(event, function, useCapture)`\\n  - `event` 必須，指定事件名稱\\n  - `function` 必須，指定事件觸發時執行的事件處理器(handler)\\n  - `useCapture` 可選，指定事件是否在事件冒泡(bubble phase)或事件捕獲(capture phase)流程階段執行。\\n    - `true` 捕獲階段執行\\n    - `false` 預設，冒泡階段執行\\n\\n可以針對某事件，綁定多個處理器\\n\\n```js\\nvar btn = document.getElementById(\\"btn\\");\\n\\nbtn.addEventListener(\\n  \\"click\\",\\n  function () {\\n    console.log(\\"HI\\");\\n  },\\n  false\\n);\\n\\nbtn.addEventListener(\\n  \\"click\\",\\n  function () {\\n    console.log(\\"HELLO\\");\\n  },\\n  false\\n);\\n```\\n\\n### `removeEventListener()` 取消事件監聽\\n\\n- `element.removeEventListener(event, function, useCapture)`\\n  - `event` 必須，指定事件名稱\\n  - `function` 必須，指定事件觸發時執行的事件處理器(handler)\\n  - `useCapture` 可選，指定事件是否在事件冒泡(bubble phase)或事件捕獲(capture phase)流程階段執行。\\n    - `true` 捕獲階段執行\\n    - `false` 預設，冒泡階段執行\\n\\n需注意，由於 `addEventListener()` 可以同時針對某事件綁定多個 `handler`，所以透過 `removeEventListener()`解除事件時，第二個參數的 `handler` 必須和先前在 `addEventListener()` 綁定的 `handler` 為同一個實體。\\n\\n```js\\nvar btn = document.getElementById(\\"btn\\");\\n\\nbtn.addEventListener(\\n  \\"click\\",\\n  function () {\\n    console.log(\\"HI\\");\\n  },\\n  false\\n);\\n\\n// 移除事件，但是沒用\\nbtn.removeEventListener(\\n  \\"click\\",\\n  function () {\\n    console.log(\\"HI\\");\\n  },\\n  false\\n);\\n```\\n\\n## Math\\n\\n### `Math.round` 四捨五入\\n\\n```javascript\\nMath.round(3.14); // 3\\nMath.round(5.49999); // 5\\nMath.round(5.5); // 6\\nMath.round(\\"5.50001\\"); // 6\\nMath.round(-5.49999); // -5\\nMath.round(-5.5); // -5\\nMath.round(-5.50001); // -6\\n\\nlet data = 18.62645;\\nMath.round(data * 10) / 10; // 18.6\\nMath.round(data * 100) / 100; // 18.63\\nMath.round(data * 1000) / 1000; // 18.626\\n```\\n\\n## 物件取值、新增與刪除\\n\\n### 物件取值\\n\\n```javascript\\nvar family = {\\n  name: \\"ma\'s family\\",\\n  deposit: 1000,\\n  members: {\\n    mother: \\"mom\\",\\n    father: \\"dad\\",\\n  },\\n};\\n\\nconsole.log(family.name); // ma\'s family\\nconsole.log(family.members.mother); // mom\\nconsole.log(family[\\"name\\"]); // ma\'s family\\n```\\n\\n用中括號語法，允許以變數的方式取值\\n\\n```javascript\\nvar family = {\\n  name: \\"ma\'s family\\",\\n  deposit: 1000,\\n  members: {\\n    mother: \\"mom\\",\\n    father: \\"dad\\",\\n  },\\n};\\nvar a = \\"name\\";\\n\\nconsole.log(family.a); // undefine\\nconsole.log(family[a]); // ma\'s family\\n```\\n\\n`.` 語法是直接以字串的方式尋找該物件的屬性，而 family 物件並無 a 屬性。\\n但中括號中的語法是將變數 a 的值帶入，相當於 `family[\'name\']`。\\n\\n另外，在物件中的屬性一律是字串，因此可以允許各種數字或是特殊字元，但在 `.` 語法中，會受到許多限制。\\n\\n```javascript\\nvar family = {\\n  name: \\"ma\'s family\\",\\n  deposit: 1000,\\n  members: {\\n    mother: \\"mom\\",\\n    father: \\"dad\\"\\n  },\\n  1: \'1\',\\n  \'$-小名家\': \'$-小名家 string\'\\n};\\n\\nconsole.log(family.1) // 語法錯誤\\nconsole.log(family[1]) // 1\\n\\nconsole.log(family.$-小名家) // 語法錯誤\\nconsole.log(family[\'$-小名家\']) // $-小名家 string\\n```\\n\\n執行物件中的方法，也可以用點語法或是中括號\\n\\n```javascript\\nvar family = {\\n  name: \\"ma\'s family\\",\\n  deposit: 1000,\\n  members: {\\n    mother: \\"mom\\",\\n    father: \\"dad\\",\\n  },\\n  callFamily: function () {\\n    console.log(\\"call 2 ma\'s family\\");\\n  },\\n};\\n\\nfamily.callFamily(); // call 2 ma\'s family\\nfamily[\\"callFamily\\"](); // call 2 ma\'s family\\n```\\n\\n### 物件轉為陣列\\n\\n陣列本身舉有許多好用的方法：`forEach`, `map`, `reduce`, `find`...，但物件無法使用這些陣列方法\\n\\n利用 `Object` 關鍵字，將物件轉為陣列。\\n\\n- Object.values 可以直接傳入一個物件，並將物件直接轉為陣列的形式，但無法取得 key 值。\\n- Object.keys 傳入一個物件，並將其 key 值以陣列方式呈現，僅只取 key 值。\\n- Object.entries 傳入物件，並同時回傳 key 值與 values，但產生的新結構，會另外用一層陣列組成。\\n\\n### 新增物件屬性\\n\\n```javascript\\nvar family = {\\n  name: \\"ma\'s family\\",\\n  deposit: 1000,\\n  members: {\\n    mother: \\"mom\\",\\n    father: \\"dad\\",\\n  },\\n  callFamily: function () {\\n    console.log(\\"call 2 ma\'s family\\");\\n  },\\n};\\n\\nfamily.dog = \\"小豬\\";\\nfamily[\\"kitten\\"] = \\"K Ka貓\\";\\nfamily[\\"$\\"] = \\"money\\";\\nconsole.log(family);\\n```\\n\\n### 刪除物件屬性\\n\\n使用 `delete` 關鍵字\\n\\n```javascript\\nvar family = {\\n  name: \\"ma\'s family\\",\\n  deposit: 1000,\\n  members: {\\n    mother: \\"mom\\",\\n    father: \\"dad\\",\\n  },\\n  callFamily: function () {\\n    console.log(\\"call 2 ma\'s family\\");\\n  },\\n};\\n\\nfamily.dog = \\"小豬\\";\\nfamily[\\"kitten\\"] = \\"K Ka貓\\";\\nfamily[\\"$\\"] = \\"money\\";\\n\\ndelete family.deposit;\\ndelete family[\\"$\\"];\\nconsole.log(family);\\n```\\n\\n## SET 集合物件\\n\\nSet 物件可儲存任何類型的唯一值，意旨相同的內容不論輸入幾次，都只會有一個，不會重複出現。\\n\\n若希望陣列的元素不會重複，可以用 set，若希望物件的 key 不會重複，則可以使用 Map\\n\\n### 基本使用\\n\\n- add() 新增值到集合中\\n\\n  ```js\\n  let nweSet = new Set();\\n  newSet.add(1); // Set [1]\\n  newSet.add(5); // Set [1,5]\\n  newSet.add(5); // Set [1,5]\\n\\n  // 新增了兩次 5，但是不會重複出現在 Set 物件中。\\n  ```\\n\\n- delete() 從集合中刪除值\\n\\n  ```js\\n  let newSet = new Set();\\n\\n  newSet.add(1); // Set [1]\\n  newSet.add(5); // Set [1,5]\\n  newSet.delete(5); // Set [1]\\n  ```\\n\\n- size() 取得集合中元素的數量\\n\\n  ```js\\n  let newSet = new Set();\\n\\n  newSet.add(1); // Set [1]\\n  newSet.add(5); // Set [1,5]\\n  newSet.size(); // 2\\n  ```\\n\\n- has() 檢查集合中視否存在指定值\\n\\n  ```js\\n  let newSet = new Set();\\n\\n  newSet.add(1); // Set [1]\\n  newSet.add(5); // Set [1,5]\\n  newSet.has(5); // true\\n  newSet.has(12); // false\\n  ```\\n\\n- clear() 清除集合中所有東西\\n\\n  ```js\\n  let newSet = new Set();\\n\\n  newSet.add(1); // Set [1]\\n  newSet.add(5); // Set [1,5]\\n  newSet.clear(); // Set []\\n  ```\\n\\n- 加入物件\\n\\n  ```javascript\\n  // new Set Type\\n  let classroom = new Set(); //  建立教室這個 set\\n  let Aaron = { name: \\"Aaron\\", country: \\"Taiwan\\" };\\n  let Jack = { name: \\"Jack\\", country: \\"USA\\" };\\n  let Johnson = { name: \\"Johnson\\", country: \\"Korea\\" };\\n\\n  // 把物件放入 set 中\\n  classroom.add(Aaron);\\n  classroom.add(Jack);\\n  classroom.add(Johnson);\\n\\n  // 檢驗 set 中是否包含某物件\\n  if (classroom.has(Aaron)) console.log(\\"Aaron is in the classroom\\");\\n\\n  //  把物件移除 set 中\\n  classroom.delete(Jack);\\n  console.log(classroom.size); //    看看 set 中有多少元素\\n  console.log(classroom);\\n  ```\\n\\n### 陣列與集合間轉換\\n\\n```javascript\\n// 集合轉成陣列\\nlet setToArray = [...classroom]; // Array.from(classroom)\\n\\n// 陣列轉成集合\\nlet arrayToSet = new Set(setToArray);\\n```\\n\\n### 過濾陣列中重複的元素\\n\\n利用 set 中元素不會重複的特性，來過濾掉陣列中重複的元素，留下唯一\\n\\n```javascript\\nvar mySet = new Set();\\n\\nmySet.add(1); // Set { 1 }\\nmySet.add(5); // Set { 1, 5 }\\nmySet.add(\\"some text\\"); // Set { 1, 5, \'some text\' }\\nvar o = { a: 1, b: 2 };\\nmySet.add(o); // Set { 1, 5, \'some text\', { a: 1, b: 2 } }\\n\\n// // o is referencing a different object so this is okay\\nmySet.add({ a: 1, b: 2 }); // Set { 1, 5, \'some text\', { a: 1, b: 2 }, { a: 1, b: 2 } }\\n```\\n\\n## Map 物件\\n\\nMap() 為一種資料結構，和方法 array.map() 不同。\\n\\n用法和 Set 大同小異，但 Map() 重視 key/value 兩者間操作的關係。\\n\\n- 建立 Map\\n\\n  ```js\\n  let fruitMap = new Map();\\n  // 在建立時給予初始值\\n  let fruitMap = new Map([\\n    [\\"a\\", \\"apple\\"],\\n    [\\"b\\", \\"banana\\"],\\n    [\\"c\\", \\"cherry\\"],\\n  ]);\\n  ```\\n\\n- set() 新增 key/value 到 Map 中\\n\\n  ```js\\n  let fruitMap = new Map();\\n  fruitMap.set(\\"a\\", \\"apple\\");\\n  fruitMap.set(\\"b\\", \\"banana\\");\\n  fruitMap.set(\\"c\\", \\"cherry\\");\\n  ```\\n\\n- get() 取得 key 相對的 value\\n\\n  ```js\\n  let fruitMap = new Map();\\n  fruitMap.set(\\"a\\", \\"apple\\");\\n  fruitMap.get(\\"a\\"); // apple\\n  ```\\n\\n- delete() 從 Map 中刪除指定 key/value\\n\\n  ```js\\n  let fruitMap = new Map();\\n  fruitMap.set(\\"a\\", \\"apple\\");\\n  fruitMap.set(\\"b\\", \\"banana\\");\\n  fruitMap.set(\\"c\\", \\"cherry\\");\\n  fruitMap.delete(\\"c\\"); // 刪除 key 為 c 的位置\\n  ```\\n\\n- size() 取得 Map 中的數量\\n\\n  ```js\\n  let fruitMap = new Map();\\n  fruitMap.set(\\"a\\", \\"apple\\");\\n  fruitMap.set(\\"b\\", \\"banana\\");\\n  fruitMap.set(\\"c\\", \\"cherry\\");\\n  fruitMap.size; // 3\\n  ```\\n\\n- has() 檢查指定 key 是否存在。返回 boolean\\n\\n  ```js\\n  let fruitMap = new Map();\\n  fruitMap.set(\\"a\\", \\"apple\\");\\n  fruitMap.set(\\"b\\", \\"banana\\");\\n  fruitMap.set(\\"c\\", \\"cherry\\");\\n  fruitMap.has(\\"a\\"); // true\\n  fruitMap.has(\\"f\\"); // false\\n  ```\\n\\n- clear() 清空 Map 所有東西\\n\\n  ```js\\n  let fruitMap = new Map();\\n  fruitMap.set(\\"a\\", \\"apple\\");\\n  fruitMap.set(\\"b\\", \\"banana\\");\\n  fruitMap.set(\\"c\\", \\"cherry\\");\\n  fruitMap.clear(); // Map(0) {}\\n  ```\\n\\n## JSON 轉換\\n\\n- json 為一組字串\\n- 在使用 {} 建立物件時，屬性名稱的引號可以省略，但在 json 格式中，屬性名稱一定要有引號。\\n- 若物件中的值為 function 時，無法透過 json 傳遞。\\n\\n### `JSON.stringify` 將物件轉為 json 字串\\n\\n可以將 javascript 任何物件或值轉換為 json 字串。\\n\\n- JSON.stringify(value, replacer, space)\\n\\n  - value 必須，任何需要轉換為字串的值\\n  - replacer 可選，可以為函式或陣列，可用來替換字串中某些元素。\\n\\n    - 陣列用法\\n\\n      ```js\\n      const me = {\\n        name: \\"ivan\\",\\n        age: 28,\\n        gender: \\"M\\",\\n      };\\n\\n      console.log(Json.stringify(me, [\\"name\\", \\"age\\"])); // {\\"name\\": \\"ivan\\", \\"age\\": 28}\\n      ```\\n\\n    - 函式用法\\n\\n      ```js\\n      function myReplacer(key, value) {\\n        // 若 value 是字串\\n        if (typeof value === \\"number\\") {\\n          return undefined;\\n        }\\n\\n        return value;\\n      }\\n\\n      const me = {\\n        name: \\"ivan\\",\\n        age: 28,\\n      };\\n\\n      console.log(JSON.stringify(me, myReplacer)); // {\\"name\\": \\"ivan\\"}\\n      // 回傳結果已去除元素為數值的資料\\n      ```\\n\\n  - space 可選，在輸出的字串中新增空格提高可讀性，可以為一個字串或數字。\\n\\n### `JSON.parse` 將 json 字串轉換為物件\\n\\n和 `JSON.stringify()` 相反，可以接收 JSON 字串並將其轉換為 物件或是值。\\n\\n- `JSON.parse(reviver)`\\n\\n  - reviver 過濾解析後的值。\\n\\n    ```js\\n    const me = { name: \\"John\\", age: 18 };\\n\\n    console.log(\\n      JSON.parse({ name: \\"John\\", age: 18 }, function (key, value) {\\n        if (value == \\"John\\") {\\n          return (value = \\"ivan\\");\\n        }\\n        return value;\\n      })\\n    );\\n    // {name: \'ivan\', age: 18}\\n    ```\\n\\n## 轉換陣列為字串\\n\\n### toString()\\n\\n不僅適用於陣列，還適用於其他資料型別。幾乎任何東西都可以使用 `toString()` 轉換為字串。\\n\\n```js\\nconst arr = [\\"Google\\", \\"is\\", \\"no\\", \\"1\\", \\"search engine\\"].toString();\\nconsole.log(arr);\\n```\\n\\n```output\\n\\"Google,is,no,1,search engine\\"\\n```\\n\\n### join()\\n\\n此方法將從陣列中取出每一個元素並一起形成一個字串。\\n\\n和 `toString()` 不同的是，可以直接傳遞分個符號，作為引數來分隔字串中的元素。\\n\\n```js\\nconst arr_1 = [\\"Google\\", \\"is\\", \\"no\\", \\"1\\", \\"search engine\\"].join();\\nconst arr_2 = [\\"Google\\", \\"is\\", \\"no\\", \\"1\\", \\"search engine\\"].join(\\"-\\");\\nconst arr_3 = [\\"Google\\", \\"is\\", \\"no\\", \\"1\\", \\"search engine\\"].join(\\"##space##\\");\\nconsole.log(arr_1);\\nconsole.log(arr_2);\\nconsole.log(arr_3);\\n```\\n\\n```output\\n\\"Google,is,no,1,search engine\\"\\n\\"Google-is-no-1-search engine\\"\\n\\"Google##space##is##space##no##space##1##space##search engine\\"\\n```\\n\\n### 使用型別轉換\\n\\njavascript 中有兩種型別強制轉換：隱式強制、顯式強制。\\n\\n- 隱式強制：當各種運算子(+, -, \'\', /, 等)應用於不同型別時。\\n- 顯式強制：當使用 String(), Number()之類的函式時\\n\\n```js\\nconst srt_1 = [\\"This\\", \\"is\\", 11, \\"clock\\"] + \\"\\";\\nconst str_2 = String([\\"This\\", \\"is\\", 11, \\"clock\\"]);\\nconsole.log(str_1);\\nconsole.log(str_2);\\n```\\n\\n```output\\nThis,is,11,clock\\nThis,is,11,clock\\n```\\n\\n`str_1` 是隱式強制轉換的一個例子，在兩種不同型別的值(一個是陣列，另一個是字串)之間使用運算子，此時輸出為一個字串。\\n`str_2` 為顯式強制轉換，在 `String()` 函式中，傳遞整個陣列，並將其轉換為字串。\\n\\n## 轉換字串為數值\\n\\n### parseInt() 將字串轉換為以十進位表示的整數。\\n\\n- parseInt(string, radix) 將字串轉換為以十進位表示的整數。接受兩個參數。\\n  - string 欲轉換的值，若不為 String，會先使用 ToString()轉換成字串。\\n  - radix 代表近位系統\\n\\nparseInt() 會略前後空白，並根據 radix 解析第一參數，當遇到無法解析的字元，會忽略該字元及其前後的所有字元，並停止解析，回傳目前為止的結果。\\n\\n若第一個字元就無法解析，則回傳 NaN\\n\\n```js\\nparseInt(\\"5A34\\", 10); // 5，字元 A 無法被解析為數字，因此停止解析，回傳 5\\nparseInt(\\"5A34\\", 16); // 23092，依照 16 進制解析並計算為 10 進位\\nparseInt(\\"\\"); // NaN\\nparseInt(\\"16px\\", 10); // 16\\nparseInt(\\" 332\\", 10); // 332，空白會被忽略\\n```\\n\\n### parseFloat()\\n\\n- parseFloat(string) 將字串轉換為以十進位表示的浮點數。僅接受一個參數。\\n  - string 欲轉換的值，若第一個參數值不是 String，會先使用 ToString 轉換成字串。\\n\\n和 parseInt() 相同，會忽略前後空白。當遇到無法解析的字元時，會忽略其後所有字元，並停止解析，回傳目前結果。\\n\\n和 parseInt() 不同的是，parseFloat() 用以解析浮點數，因此會接受第一個小數點。且僅能分析十進制。\\n\\n```js\\nparseFloat(\\"55.44\\"); // 55.44\\nparseFloat(\\"33.44.55\\"); // 33.44\\n```\\n\\n### Number()\\n\\n- Number(value) 在不使用 new 運算子的狀況下，可以用來轉會型別。\\n\\n規則如下：\\n\\n1. 若值為 undefined，回傳 NaN\\n2. 若值為 null，回傳 0\\n3. 若值為 Boolean，true => 1, false => 0\\n4. 若值為 Number，直接回傳該值。\\n5. 若為 String\\n   1. 僅包含數字與浮點數，則忽略前後空白，回傳該值\\n   2. 若包含有效的進位系統，如：十六進制的 0x、八進制的 0o、二進制的 0b，則依照進位系統轉換為十進制。\\n   3. 空值，回傳 0\\n   4. 其他，回傳 NaN\\n6. 若值為 Object，使用 valueOf() 得到該值，再根據前述規則進行轉換。\\n\\n```js\\nNumber(undefined); // NaN\\nNumber(null); // 0\\nNumber(true); // 1\\nNumber(false); // 0\\nNumber(33); // 33\\nNumber(33.66); // 33.66\\nNumber(\\"0x11\\"); // 17\\nNumber(\\"0b11\\"); // 3\\nNumber(\\"0o11\\"); // 9\\nNumber(\\"\\"); // 0\\nNumber(\\"33\\"); //33\\nNumber(\\"16px\\"); // 轉換值中包含無法轉換的內容\\n```\\n\\n## 計時器\\n\\n瀏覽器內建的計時器\\n\\n### setTimeout()\\n\\n來設定一段時間過後，自動執行某個函數(callback)，這個計時器只會執行一次。\\n\\n```javascript\\nconst timeoutId = setTimeout(func, delay[, param1, param2, ...]);\\nconst timeoutId = setTimeout(func, delay);\\n```\\n\\n`func` 時間到執行的函數。\\n`delay` 等候時間，單位為毫秒。\\n`param*` 用來指定要傳入 `func` 的參數\\n`setTimeout()` 執行後會返回一個數字，表示這個計時器的 id\\n\\n```javascript\\nconst timeoutId = setTimeout(myAlert, 5000);\\n\\nfunction myAlert() {\\n  alert(\\"五秒鐘到了\\");\\n}\\n```\\n\\n若取消計時器，可以使用 `clearTimeout(timeoutId)`;\\n\\n### setInterval()\\n\\n用來設定每過一段時間，就會自動執行某個函數(callback)，這個計時器會重複執行。\\n\\n```javascript\\nconst intervalId = setInterval(func, delay[, param1, param2, ...]);\\nconst intervalId = setInterval(func, delay);\\n```\\n\\n```javascript\\nconst intervalId = setInterval(function () {\\n  alert(\\"十秒鐘又到了\\");\\n}, 10000);\\n```\\n\\n若取消計時器，可以使用 `clearInterval(intervalId)`;\\n\\n## 屬性描述器\\n\\n當對於屬性除了指定 key/value 以外有更進一步的要求時，例如設定屬性為 read-only 甚至是 constant 時，就可以使用屬性描述器。\\n\\n屬性的特徵：\\n\\n- 資料描述器\\n  - writable\\n  - configurable\\n  - enumerable\\n  - value\\n- 存取器描述器\\n  - get\\n  - set\\n\\n這些特徵都是可以透過屬性描述器去設定的 `Object.defineProperty` 和 `Object.definedProperties`\\n\\n### 使用字面值宣告屬性的特徵\\n\\n- writable, configurable, enumerable 都會是 true\\n- value 代表屬性的值\\n- get, set 則是沒有設定\\n\\n### 取得屬性特徵\\n\\n若想要瞭解一個屬性的特徵時，可以使用 `Object.getOwnPropertyDescriptor(object, \'propertyName\')` 這個內建函式\\n\\n```javascript\\nvar obj = { prop1: \\"prop1\\", prop2: \\"prop2\\" };\\nObject.getOwnPropertyDescriptor(obj, \\"prop1\\", \\"prop2\\");\\n// {\\n//    value: \\"prop1\\",\\n//    writable: true,\\n//    enumerable: true,\\n//    configurable: true\\n// }\\n```\\n\\n使用字面值創建的屬性，其 `writable`, `enumerable`, `configurable` 都會是 `true`，而 `value` 就會是此屬性的值 `prop1`\\n\\n對於一次察看多個屬性的特徵，可以使用 `Object.getOwnPropertyDescriptors(object, \'propertyName1\', \'propertyName2\', ...)`\\n\\n```javascript\\nvar obj = { prop1: \\"prop1\\", prop2: \\"prop2\\" };\\nObject.getOwnPropertyDescriptors(obj, \\"prop1\\", \\"prop2\\");\\n// {\\n//   prop1: { value: \\"prop1\\", writable: true, enumerable: true, configurable: true },\\n//   prop2: { value: \\"prop2\\", writable: true, enumerable: true, configurable: true }\\n// }\\n```\\n\\n### Object.defineProperty 設定單一個屬性描述器\\n\\n```javascript\\nObject.defineProperty(object, \\"propertyName\\", descriptor);\\n// descriptor 是一個 object，descriptor 裡面的屬性可以是剛剛提到的屬性特徵\\n```\\n\\n在 `obj` 中按需求設定 ‵prop` 這個屬性\\n\\n```javascript\\nvar obj = {};\\nObject.defineProperty(obj, \\"prop\\", {\\n  writable: false,\\n  configurable: true,\\n  enumerable: true,\\n  value: \\"This is prop\\",\\n});\\nconsole.log(obj.prop); // \\"This is prop\\"\\n```\\n\\n### Object.defineProperties 一次設定多個屬性\\n\\n```javascript\\nObject.definedProperties(object, properties);\\n\\n// properties 也是一個 object，其結構如下：\\n// {\\n//   \'propertyName1\': descriptor1,\\n//   \'propertyName2\': descriptor1,\\n//    ...\\n//   \'propertyNamen\': descriptorn\\n// }\\n```\\n\\n```javascript\\nvar obj = {};\\nObject.defineProperties(obj, {\\n  prop1: {\\n    writable: false,\\n    configurable: true,\\n    enumerable: true,\\n    value: \\"This is prop1\\",\\n  },\\n  prop2: {\\n    writable: false,\\n    configurable: true,\\n    enumerable: true,\\n    value: \\"This is prop2\\",\\n  },\\n});\\nconsole.log(obj.prop1); // \\"This is prop1\\"\\nconsole.log(obj.prop2); // \\"This is prop2\\"\\n```\\n\\n### 資料描述器\\n\\n> 參考資料：\\n>\\n> [JavaScript - 屬性描述器](https://ithelp.ithome.com.tw/articles/10197826)\\n\\n#### writable 屬性是否可以改值\\n\\n可以將屬性設定為 `read-only`\\n\\n當使用屬性的字面值( `obj.prop` 與 `obj[prop]`)定義屬性時，屬性的 writable 為 true，也就代表可以寫入。\\n\\n相較之下，當 writable 為 false 就代表此屬性為 read-only\\n\\n在非嚴格模式下，還是可以對 read-only 的屬性進行寫值，但會沒有效果。\\n\\n```javascript\\nvar obj = {};\\nObject.defineProperty(obj, \\"prop1\\", {\\n  value: \\"This is prop1\\",\\n  configurable: true,\\n  enumerable: true,\\n  writable: false, // 將 writable 設為 false\\n});\\nconsole.log(obj.prop1); // \'This is prop1\'\\nobj.prop1 = \\"This is prop2\\";\\nconsole.log(obj.prop1); // \'This is prop1\'\\n```\\n\\n#### Configurable 是否可編輯該屬性\\n\\n屬性描述器在一般狀況下，可以利用屬性描述器重新設定，若沒有重新設定，會保留原有的特徵。\\n\\n```javascript\\nvar obj = {};\\nobj.prop1 = \\"This is prop1\\";\\n\\nObject.defineProperty(obj, \\"prop1\\", {\\n  value: \\"This is prop1\\",\\n  configurable: true,\\n  enumerable: true,\\n  writable: false,\\n});\\nconsole.log(obj.prop1); // \\"This is prop1\\"\\nobj.prop1 = \\"This is prop2\\";\\nconsole.log(obj.prop1); // \\"This is prop1\\"\\n```\\n\\n上面將 `writable` 設為 `false`，因此無法對 `obj.prop1` 賦值。\\n\\n下面實作禁止屬性被重新設定：\\n\\n```javascript\\nvar obj = {};\\nObject.defineProperty(obj, \\"prop1\\", {\\n  value: \\"This is prop1\\",\\n  configurable: false,\\n  enumerable: true,\\n  writable: true,\\n});\\nconsole.log(obj.prop1); // \\"This is prop1\\"\\n\\nObject.defineProperty(obj, \\"prop1\\", {\\n  value: \\"This is prop1\\",\\n  configurable: true,\\n  enumerable: true,\\n  writable: false,\\n}); // Uncaught TypeError: Cannot redefine property: prop1\\n\\ndelete obj.prop1; // false 禁止屬性被刪除\\nconsole.log(obj.prop1); // \\"This is prop1\\"\\n```\\n\\n當 `obj.prop1` 已經被設定為 `configurable: false` 時，又試著重新設定屬性描述器一次時，javascript 會報錯。\\n\\n即是在非嚴格模式下，都不允許重新設定 `configurable: false` 的屬性描述。\\n\\n但有一個特例：在 `configurable: false`，`writable` 特徵還是可以從 `true` 改為 `false`\\n\\n#### Enumerable 屬性是否會在物件的屬性列舉時被顯示\\n\\n在 `for...in` 的屬性列舉動作中，只有可列舉的屬性會被迭代\\n\\n```javascript\\nvar obj = {};\\nObject.defineProperty(obj, \\"prop1\\", {\\n  value: \\"This is prop1\\",\\n  configurable: true,\\n  enumerable: false,\\n  writable: true,\\n});\\nobj.prop2 = \\"This is prop2\\";\\n\\nconsole.log(\\"prop1\\" in obj); // true\\nconsole.log(\\"prop2\\" in obj); // true\\nfor (var prop in obj) {\\n  console.log(\\"prop: \\", prop); // \\"prop: This is prop2\\"\\n}\\n```\\n\\n雖然 `prop1` 和 `prop2` 都存在於物件中(利用 `in` 檢查)，但因為 `obj.prop1` 被設定為 `enumerable: false` 因此在 `for...in` 列舉的動作中，並不會被迭代到。\\n\\n相較之下，普通屬性的 `obj.prop2` 可以被列舉。\\n\\n- `obj.propertyIsEnumerable` 檢查屬性是否可列舉且為物件自有的\\n\\n```javascript\\nvar obj = { prop1: \\"prop1\\" };\\nObject.defineProperty(obj, \\"prop2\\", {\\n  value: \\"prop2\\",\\n  enumerable: false,\\n  writable: true,\\n  configurable: true,\\n});\\nobj.propertyIsEnumerable(\\"prop1\\"); // true\\nobj.propertyIsEnumerable(\\"prop2\\"); // false\\n```\\n\\n使用 Object.keys 會將所有可列舉的屬性列成一個陣列\\n\\n```javascript\\nvar obj = { prop1: \\"prop1\\" };\\nObject.defineProperty(obj, \\"prop2\\", {\\n  value: \\"prop2\\",\\n  enumerable: false,\\n  writable: true,\\n  configurable: true,\\n});\\nObject.keys(obj); // [\\"prop1\\"]\\n```\\n\\n#### value 屬性的值\\n\\n```javascript\\nvar obj = {};\\nObject.defineProperty(obj, \\"prop1\\", {\\n  value: \\"This is prop1\\",\\n  writable: true,\\n  configurable: true,\\n  enumerable: true,\\n});\\nconsole.log(obj.prop1); // \\"This is prop1\\"\\n```\\n\\n上面程式碼，等同於下面\\n\\n```javascript\\nvar obj = {};\\nobj.prop1 = \\"This is prop1\\";\\nconsole.log(obj.prop1); // \\"This is prop1\\"\\n```\\n\\n#### 屬性描述器屬於淺層設定\\n\\n淺層設定：只有目標物件的`自有屬性`才會擁有這個特徵，若屬性又指向了另一個物件，則另一個物件內的屬性，即不為自有屬性，亦不會擁有這個特徵。\\n\\n```javascript\\nvar obj = {};\\nvar innerObj = { innerProp: \\"This is innerProp\\" };\\n\\nObject.defineProperty(obj, \\"prop1\\", {\\n  value: innerObj,\\n  writable: false,\\n  configuration: true,\\n  enumerable: true,\\n});\\n\\nobj.prop1 = {};\\nconsole.log(obj.prop1); // { innerProp: \\"This is innerProp\\" }\\n\\nobj.prop1.innerProp = \\"innerProp changed!\\";\\nconsole.log(obj.prop1); // { innerProp: \\"innerProp changed!\\" }\\n```\\n\\n將 `obj.prop1` 設為 `writable: false`，並賦值為 `innerObj`，接著試圖將`{}` 寫入 `obj.prop1`。此時寫入的動作並沒有成功，`obj.prop1` 還是指向 `innerObj`\\n\\n但若賦值的是 `innerObj` 的屬性 `innerProp` 的話，是可以寫入的，因為只有 `obj` 自身的屬性 `prop1` 被指定為 `writable: false`，而 `prop1` 指向的 `innerObj` 內部屬性則不受 `prop1` 的特徵管轄，因此複寫 `innerProp` 是可行的\\n\\n### 存取器描述器\\n\\n`get` 和 `set` 分別為取值器與設值器，可以將他想像成是函式。\\n當有設定這兩個特徵時，他們會覆蓋 javascript 原有的取值與設值行為 `[[GET]]` 和 `[[set]]`\\n\\n#### 宣告方式\\n\\n- 使用物件字面值時直接定義\\n\\n  ```javascript\\n  var obj = {\\n    get propName() {\\n      // ... do something\\n      return \\"some value\\";\\n    },\\n    set propName(val) {\\n      // ... do something\\n    },\\n  };\\n  ```\\n\\n- 利用屬性描述器定義\\n\\n  ```javascript\\n  Object.defineProperty(obj, \\"prop1\\", {\\n    // ...\\n    get: function () {\\n      // ... do something\\n      return \\"some value\\";\\n    },\\n    set: function (val) {\\n      // ... do something\\n    },\\n  });\\n  ```\\n\\n以上的宣告方式是一樣的\\n\\n#### Getter\\n\\n需要回傳一個值來當作取值結果\\n\\n```javascript\\nvar obj = {\\n  get prop1() {\\n    return \\"This is prop1\\";\\n  },\\n};\\nconsole.log(obj.prop1); // \'This is prop1\'\\n\\nobj.prop1 = \\"Change value!\\";\\nconsole.log(obj.prop1); // \'This is prop1\'\\n```\\n\\n無論怎麼修改 prop1 的值，最後回傳的都是取值器回傳的 \\"This is prop1\\"\\n\\n### setter\\n\\n在拿到值之後，去做指定的動作\\n\\n```javascript\\nvar obj = {\\n  set prop1(val) {\\n    console.log(\\"prop1 set: \\", val);\\n  },\\n};\\nobj.prop1 = \\"This is prop1\\"; // \\"prop1 set:  This is prop1\\"\\n\\nconsole.log(obj.prop1); // undefined\\n```\\n\\n將 \\"this is prop1\\" 傳入 prop1 中，此時會印出 set 要求的 log，當要取出 obj.prop1 的值時，因為我們並沒有設置 get，因此出現 undefined\\n\\n### 資料處理器與存取器處理器\\n\\n- 資料描述器：代表屬性是有值，會有以下兩個特徵\\n  - value\\n  - writable\\n- 存取器描述器：屬性的值是由取值器與設值器所決定，會有以下兩個特徵：\\n  - get\\n  - set\\n\\n需要注意的是，資料描述器與存取器描述器不相容。\\n\\n若今天物件中的屬性已經設定了 get 和 set，也就代表已經定義取值和設值的行為，此時再額外進行屬性值(value)與唯獨(writable)的設定，產生行為衝突\\n\\n```javascript\\nvar obj = {};\\nObject.defineProperty(obj, \\"prop1\\", {\\n  get: function () {\\n    return \\"This is prop1\\";\\n  },\\n  value: \\"test\\",\\n  writable: true,\\n}); // Uncaught TypeError: Invalid property descriptor. Cannot both specify accessors and a value or writable attribute, #<Object>\\n```\\n\\n### 取值器與設值器的應用\\n\\n```javascript\\nvar obj = {};\\nObject.defineProperty(obj, \\"prop1\\", {\\n  set: function (val) {\\n    this._prop1_ = val * 2;\\n  },\\n  get: function () {\\n    return this._prop1_;\\n  },\\n  configurable: true,\\n  enumerable: true,\\n});\\n\\nobj.prop1 = 100;\\nconsole.log(obj.prop1); // 200\\n```\\n\\n上面我們宣告了一個變數 obj 並加入一個屬性 prop1，並為這個屬性同時加入 get 和 set，這兩個函式的共通點：都對 obj.prop1 進行存取。\\n\\n## 解構賦值\\n\\n> 參考資料：\\n>\\n> [解構賦值 · 從 ES6 開始的 JavaScript 學習生活](https://eyesofkids.gitbooks.io/javascript-start-from-es6/content/part4/destructuring.html)\\n\\n用於提取(extract)陣列或物件中的資料，\\n\\n### 從陣列解構賦值\\n\\n```js\\n//基本用法\\nconst [a, b] = [1, 2]; //a=1, b=2\\n\\n//先宣告後指定值，要用let才行\\nlet a, b;\\n[a, b] = [1, 2];\\n\\n// 略過某些值\\nconst [a, , b] = [1, 2, 3]; // a=1, b=3\\n\\n// 其餘運算\\nconst [a, ...b] = [1, 2, 3]; //a=1, b=[2,3]\\n\\n// 失敗保護\\nconst [, , , a, b] = [1, 2, 3]; // a=undefined, b=undefined\\n\\n// 交換值\\nlet a = 1,\\n  b = 2;\\n[b, a] = [a, b]; //a=2, b=1\\n\\n// 多維複雜陣列\\nconst [a, [b, [c, d]]] = [1, [2, [[[3, 4], 5], 6]]]; // a=1, b=2, c=[ [ 3, 4 ], 5 ], d=6\\n\\n// 字串\\nconst str = \\"hello\\";\\nconst [a, b, c, d, e] = str; // a=h, b=e, c=l, d=l, e=o\\n```\\n\\n### 從物件解構賦值\\n\\n```js\\n// 基本用法\\nconst { user: x } = { user: 5 }; // x=5\\n\\n// 失敗保護(Fail-safe)\\nconst { user: x } = { user2: 5 }; //x=undefined\\n\\n// 賦予新的變數名稱\\nconst { prop: x, prop2: y } = { prop: 5, prop2: 10 }; // x=5, y=10\\n\\n// 屬性賦值語法\\nconst { prop: prop, prop2: prop2 } = { prop: 5, prop2: 10 }; //prop = 5, prop2=10\\n\\n// 相當於上一行的簡短語法(Short-hand syntax)\\nconst { prop, prop2 } = { prop: 5, prop2: 10 }; //prop = 5, prop2=10\\n\\n// ES7+的物件屬性其餘運算符\\nconst { a, b, ...rest } = { a: 1, b: 2, c: 3, d: 4 }; //a=1, b=2, rest={c:3, d:4}\\n```\\n\\n### 非物件或非陣列解構賦值\\n\\n### 解構賦值時給予預設值\\n\\n### 搭配函式的傳入參數使用\\n\\n## Linked list 鏈結串列\\n\\n> 參考資料：\\n>\\n> [JavaScript 學演算法（五）- 鏈結串列 Linked list](https://chupai.github.io/posts/200427_ds_linkedlist/)\\n>\\n> [Linked list Javascript 實作及 Leet code 題目解析](https://medium.com/@nchuuu/linked-list-es6-javascript%E5%AF%A6%E4%BD%9C%E5%8F%8Aleet-code%E9%A1%8C%E7%9B%AE%E8%A7%A3%E6%9E%90-4afcd9a67b3d)\\n\\n中國稱鏈表。和陣列一樣都是線性資料結構，但和陣列不同為，他為鏈式儲存結構，也就是記憶體位置儲存為不連續性。\\n\\n### 定義\\n\\n鏈結串列是由一連串節點 `node` 組成，節點之間是透過指標來連接。所以儲存上不需要連續的空間。\\n每個節點包括：\\n\\n1. 資料元素\\n2. 指標\\n   指標(又稱鏈結、引用)，通常為一或兩個，用來指向上/下個的位置。若沒有上/下節點，則為空。若指標斷裂，資料就遺失。\\n\\n鏈結串列就像是火車車廂一樣，一節拉一節。\\n\\n相較於陣列，鏈結串列的元素不是連續放置的，插入或是移除元素時，不需要移動其他元素，只需要修改上/下個指標的指向。\\n\\n因為鏈結串列沒有索引，所要存取特定值，需要從頭開始找起，因此相較於陣列，資料存取為費時。\\n\\n### 類型\\n\\n鏈結串列有多種類型：\\n\\n- 單向鏈結串列(singly linked list)：\\n  - 又稱單鏈結串列、線性鏈結串列、普通鏈結串列，為最基本的鏈結串列，其特點是連結串列的鏈結方向是單向的，對鏈結串列的存取要通過頭部開始，依序向下讀取。\\n- 雙向鏈結串列(doubly linked list)：\\n  - 又稱為雙鏈結串列。他和單向鏈結串列最大的區別在於，每個節點中都有兩個指標，分別指向上一個和下一個節點。所以從雙向鏈結串列中的任意一個節點開始，都可以很方便的存取他的上一個和下一個節點。\\n- 迴圈鏈結串列(circularly linked list)：\\n  - 又稱環狀鏈結串列、循環鏈結串列，他和一般的鏈結串列操作基本一致，但串列頭尾的指標會連接在一起，行成一個環。\\n\\n### 優缺點比較\\n\\n- 陣列\\n  - 優點\\n    - 可利用 index 隨機存取只需要 O(1) 的時間\\n    - 可靠度高，不會因為鏈結斷裂而遺失資料。\\n  - 缺點\\n    - 在開頭或在中間插入、刪除元素，需花費 O(n) 的時間移動元素。\\n    - 連續的記憶體空間，可能有用不到的空間，進而造成浪費。\\n    - 若陣列已滿，會需要花費 O(n) 的時間搬動資料到新的陣列中。\\n- 鏈結串列\\n  - 優點\\n    - 資料在記憶體中非連續。\\n    - 插入、刪除元素只需修改上/下個指標的指向。\\n  - 缺點\\n    - 只能順序存取，需花費 O(n) 的時間。\\n    - 鏈結斷裂就會遺失資料。\\n\\n## 額外補充\\n\\n### 函式註解模版\\n\\n```js\\n/**\\n * functionName 函式功能說明。\\n *\\n * @param  {型態}  傳入變數名稱 - 變數說明。\\n * @return {型態}  回傳說明。\\n */\\n\\nfunction functionName(傳入變數名稱) {\\n  // do something...\\n  return 回傳;\\n}\\n```\\n\\n範例\\n\\n```js\\n/**\\n * HelloWord 打招呼訊息傳送是否成功。\\n *\\n * @param  {String}  greeting - 打招呼的訊息。\\n * @return {Boolean} 傳送是否成功。\\n */\\n\\nfunction HelloWord(greeting) {\\n  // do something...\\n  return true;\\n}\\n```\\n\\n### random 公式\\n\\n```javascript\\nfunction getRandom(start, end) {\\n  return Math.floor(Math.random() * (end - start + 1)) + start;\\n}\\nvar r = getRandom(0, 255);\\nvar g = getRandom(0, 255);\\nvar b = getRandom(0, 255);\\n```\\n\\ndebounce、throttle、flatten、cloneDeep\\n","tocContent":"- [Javascript 學習筆記](#javascript-學習筆記)\\n  - [基本概念](#基本概念)\\n    - [宣告與命名](#宣告與命名)\\n    - [let, const 特性](#let-const-特性)\\n    - [如何分辨使用 let 和 const 的時機？](#如何分辨使用-let-和-const-的時機)\\n    - [let 和 const 解決了什麼問題？](#let-和-const-解決了什麼問題)\\n    - [javascript 參數傳遞方式](#javascript-參數傳遞方式)\\n  - [存取資料的方法](#存取資料的方法)\\n    - [基本型別](#基本型別)\\n    - [物件型別](#物件型別)\\n    - [把基本型別當作參數傳入函式](#把基本型別當作參數傳入函式)\\n    - [Function](#function)\\n      - [First-class Object](#first-class-object)\\n      - [宣告 function](#宣告-function)\\n      - [呼叫 function](#呼叫-function)\\n      - [IIFF 立即函式](#iiff-立即函式)\\n      - [Scope 作用域](#scope-作用域)\\n      - [參數傳遞 call by value/reference//shares](#參數傳遞-call-by-valuereferenceshares)\\n        - [call by value(pass by value) 傳值](#call-by-valuepass-by-value-傳值)\\n        - [call by reference 傳址](#call-by-reference-傳址)\\n  - [運算式與運算子](#運算式與運算子)\\n    - [嚴謹模式](#嚴謹模式)\\n    - [賦值運算子](#賦值運算子)\\n    - [比較運算子](#比較運算子)\\n    - [算數運算子](#算數運算子)\\n    - [邏輯運算子](#邏輯運算子)\\n    - [其餘運算子與展開運算子](#其餘運算子與展開運算子)\\n    - [三元運算式](#三元運算式)\\n    - [if else](#if-else)\\n  - [流程判斷與迴圈](#流程判斷與迴圈)\\n    - [switch](#switch)\\n    - [while 迴圈](#while-迴圈)\\n    - [for 迴圈](#for-迴圈)\\n    - [for...in 與 for...of](#forin-與-forof)\\n  - [函式 function](#函式-function)\\n    - [定義函式](#定義函式)\\n    - [箭頭函式](#箭頭函式)\\n    - [Scope 變數的有效範圍](#scope-變數的有效範圍)\\n    - [Hoisting 提升](#hoisting-提升)\\n      - [變數提升](#變數提升)\\n      - [函式提升](#函式提升)\\n      - [為何會有 Hoisting 的現象？](#為何會有-hoisting-的現象)\\n      - [最佳實踐](#最佳實踐)\\n    - [全域變數](#全域變數)\\n    - [closure](#closure)\\n  - [Promise](#promise)\\n    - [如何使用 Promise](#如何使用-promise)\\n    - [狀態](#狀態)\\n    - [then 的使用](#then-的使用)\\n    - [錯誤處理](#錯誤處理)\\n    - [finally](#finally)\\n    - [async/await 同步操作](#asyncawait-同步操作)\\n  - [document](#document)\\n    - [`createdElement()` 建立節點](#createdelement-建立節點)\\n    - [`appendChild()` 增加子節點](#appendchild-增加子節點)\\n    - [`.querySelector` 元素選擇器](#queryselector-元素選擇器)\\n    - [`.querySelectorAll` 選取所有指定元素](#queryselectorall-選取所有指定元素)\\n    - [`setAttribute()` 增加標籤屬性](#setattribute-增加標籤屬性)\\n    - [移除 HTML 元素](#移除-html-元素)\\n      - [使用 CSS 隱藏元素](#使用-css-隱藏元素)\\n      - [`removeChild()` 從 DOM 中完全移除元素](#removechild-從-dom-中完全移除元素)\\n    - [`remove()` ES6 新方法](#remove-es6-新方法)\\n    - [`addEventListener()` 事件監聽](#addeventlistener-事件監聽)\\n    - [`removeEventListener()` 取消事件監聽](#removeeventlistener-取消事件監聽)\\n  - [Math](#math)\\n    - [`Math.round` 四捨五入](#mathround-四捨五入)\\n  - [物件取值、新增與刪除](#物件取值新增與刪除)\\n    - [物件取值](#物件取值)\\n    - [物件轉為陣列](#物件轉為陣列)\\n    - [新增物件屬性](#新增物件屬性)\\n    - [刪除物件屬性](#刪除物件屬性)\\n  - [SET 集合物件](#set-集合物件)\\n    - [基本使用](#基本使用)\\n    - [陣列與集合間轉換](#陣列與集合間轉換)\\n    - [過濾陣列中重複的元素](#過濾陣列中重複的元素)\\n  - [Map 物件](#map-物件)\\n  - [JSON 轉換](#json-轉換)\\n    - [`JSON.stringify` 將物件轉為 json 字串](#jsonstringify-將物件轉為-json-字串)\\n    - [`JSON.parse` 將 json 字串轉換為物件](#jsonparse-將-json-字串轉換為物件)\\n  - [轉換陣列為字串](#轉換陣列為字串)\\n    - [toString()](#tostring)\\n    - [join()](#join)\\n    - [使用型別轉換](#使用型別轉換)\\n  - [轉換字串為數值](#轉換字串為數值)\\n    - [parseInt() 將字串轉換為以十進位表示的整數。](#parseint-將字串轉換為以十進位表示的整數)\\n    - [parseFloat()](#parsefloat)\\n    - [Number()](#number)\\n  - [計時器](#計時器)\\n    - [setTimeout()](#settimeout)\\n    - [setInterval()](#setinterval)\\n  - [屬性描述器](#屬性描述器)\\n    - [使用字面值宣告屬性的特徵](#使用字面值宣告屬性的特徵)\\n    - [取得屬性特徵](#取得屬性特徵)\\n    - [Object.defineProperty 設定單一個屬性描述器](#objectdefineproperty-設定單一個屬性描述器)\\n    - [Object.defineProperties 一次設定多個屬性](#objectdefineproperties-一次設定多個屬性)\\n    - [資料描述器](#資料描述器)\\n      - [writable 屬性是否可以改值](#writable-屬性是否可以改值)\\n      - [Configurable 是否可編輯該屬性](#configurable-是否可編輯該屬性)\\n      - [Enumerable 屬性是否會在物件的屬性列舉時被顯示](#enumerable-屬性是否會在物件的屬性列舉時被顯示)\\n      - [value 屬性的值](#value-屬性的值)\\n      - [屬性描述器屬於淺層設定](#屬性描述器屬於淺層設定)\\n    - [存取器描述器](#存取器描述器)\\n      - [宣告方式](#宣告方式)\\n      - [Getter](#getter)\\n    - [setter](#setter)\\n    - [資料處理器與存取器處理器](#資料處理器與存取器處理器)\\n    - [取值器與設值器的應用](#取值器與設值器的應用)\\n  - [解構賦值](#解構賦值)\\n    - [從陣列解構賦值](#從陣列解構賦值)\\n    - [從物件解構賦值](#從物件解構賦值)\\n    - [非物件或非陣列解構賦值](#非物件或非陣列解構賦值)\\n    - [解構賦值時給予預設值](#解構賦值時給予預設值)\\n    - [搭配函式的傳入參數使用](#搭配函式的傳入參數使用)\\n  - [Linked list 鏈結串列](#linked-list-鏈結串列)\\n    - [定義](#定義)\\n    - [類型](#類型)\\n    - [優缺點比較](#優缺點比較)\\n  - [額外補充](#額外補充)\\n    - [函式註解模版](#函式註解模版)\\n    - [random 公式](#random-公式)"}')},810:function(n){"use strict";n.exports=JSON.parse('{"name":"Javascript 陣列.md","content":"# JavaScript 陣列\\n\\n> 參考資料：\\n>\\n> [JavaScript Array 陣列操作方法大全 ( 含 ES6 )](https://www.oxxostudio.tw/articles/201908/js-array.html)\\n\\n>\\n\\n## 改變原始陣列\\n\\n### push() 加入陣列最後一個位置\\n\\n將值加入陣列的最後一個位置，push() 會回傳新的陣列長度。\\n\\n```javascript\\nlet arr = [1, 2, 3, 4, 5, 6, 7, 8];\\nconsole.log(arr.push(9, 10)); // 10\\nconsole.log(arr); // [1, 2, 3, 4, 5, 6, 7, 8, ,9, 10]\\n```\\n\\n### pop() 取出陣列的最後一個元素\\n\\n```javascript\\nlet arr = [1, 2, 3, 4, 5, 6];\\nlet new_arr = arr.pop();\\nconsole.log(arr); // [1,2,3,4,5]\\nconsole.log(new_arr); // 6\\n```\\n\\n### shift() 取出並移除陣列的第一個元素\\n\\n```javascript\\nlet arr = [1, 2, 3, 4, 5];\\nlet new_arr = arr.shift();\\nconsole.log(arr); // [2, 3, 4, 5]\\nconsole.log(new_arr); // 1\\n```\\n\\n### unshift() 將元素添加到第一個位置\\n\\n```javascript\\nlet arr = [1, 2, 3, 4, 5];\\narr.unshift(100, 200, 300);\\nconsole.log(arr); // [100, 200, 300, 1, 2, 3, 4, 5]\\n```\\n\\n### reverse() 反轉陣列\\n\\n```javascript\\nlet arr = [1, 2, 3, 4, 5];\\narr.reverse();\\nconsole.log(arr); // [5, 4, 3, 2, 1]\\n```\\n\\n### splice(start, delete_count, item) 新增或移除陣列中指定位置的元素\\n\\n可以移除或新增陣列的元素，包含三個參數\\n\\n- start 要編輯的序列號碼\\n- delete_count 要移除的長度(選填，若不填，則將第一個號碼位置面的所有元素清除，若為 0 則不刪除元素)\\n- item 要添加的內容(選填)\\n\\n```javascript\\nlet arr = [1, 2, 3, 4, 5, 6, 7, 8];\\narr.splice(5, 1);\\nconsole.log(arr); // [1, 2, 3, 4, 5, 7, 8] (6 被移除了)\\n```\\n\\n設定第三個參數就能添加或取代元素\\n\\n```javascript\\nlet arr = [1, 2, 3, 4, 5, 6, 7, 8];\\narr.splice(5, 1, 100);\\nconsole.log(arr); // [1, 2, 3, 4, 5, 100, 7, 8]; (6 被移除，100 被加到第五的位置)\\n```\\n\\nsplice 方法會回傳被刪除的元素，若無刪除元素，則回傳空陣列\\n\\n### sort() 針對陣列的元素進行排列\\n\\n- 未帶入參數:\\n\\n  預設排序為依照陣列內元素的 code UTF-16 的順序排序。\\n\\n  ```js\\n  const arr_1 = [\\n    null,\\n    2,\\n    8,\\n    undefined,\\n    NaN,\\n    200,\\n    \\"Hi\\",\\n    \\"apple\\",\\n    \\"\\",\\n    \\"#\\",\\n    \\"!\\",\\n    \\"2\\",\\n  ];\\n\\n  arr_1.sort();\\n\\n  console.log(arr_1);\\n  // [ \'\', \'!\', \'#\', \'2\', 2, 200, 8, \'Hi\', NaN, \'apple\', null, undefined ]\\n  ```\\n\\n  `sort()` 會將所有元素轉成字串後，以第一個字元為對象進行排序。符號會先被篩選出來，接著是數字，接著是字母。\\n\\n- 傳入匿名函數\\n\\n  `sort()` 會依匿名函式的參數與回傳的值當作排序依據\\n\\n  - 當回傳值為負數時，前面的數放在前面\\n  - 當回傳值為正數時，後面的數在前面\\n  - 當回傳值為零時，保持不動\\n\\n  ```js\\n  // 沒有給參數的預設排序\\n  const arr = [5, 9, 1, 3, 2, 6];\\n  arr.sort(); // [1, 2, 3, 5, 6, 9]\\n\\n  // 以匿名函式回參數做「升序」排序\\n  arr.sort(function (a, b) {\\n    return a - b; // a - b > 0\\n  });\\n  // [1, 2, 3, 5, 6, 9]\\n\\n  // 如果要反過來做「降序」排序\\n  arr.sort(function (a, b) {\\n    return b - a;\\n  });\\n  // [9, 6, 5, 3, 2, 1]\\n  ```\\n\\n  為什麼參數相減就能判斷排序？\\n\\n  ```js\\n  const arr = [5, 9, 1, 3, 2, 6];\\n  // 升序\\n  arr.sort(function (a, b) {\\n    if (a > b) {\\n      return 1; // 正數時，後面的數放在前面\\n    } else {\\n      return -1; // 負數時，前面的數放在前面\\n    }\\n  });\\n\\n  // 降序\\n  arr.sort(function (a, b) {\\n    if (a < b) {\\n      return 1; // 正數時，後面的數放在前面\\n    } else {\\n      return -1; // 負數時，前面的數放在前面\\n    }\\n  });\\n\\n  // 升序 另一種寫法，就會精簡到像最上面那樣！\\n  arr.sort(function (a, b) {\\n    if (a > b) {\\n      // a > b  等於 a - b > 0\\n      return a - b;\\n    } else {\\n      return a - b;\\n    }\\n  });\\n  ```\\n\\n### copyWithin()\\n\\n### fill()　置換陣列中的值\\n\\n會將陣列中所有元素，置換為指定的值。\\n\\n- fill(value, start, end)\\n  - value 必填，欲替換的值\\n  - start 可選，起使位置(包含該位置)\\n  - end 可選，停止位置(不包含此位置)\\n\\n> 使用 fill() 會改變原本的陣列內容\\n\\n```javascript\\nlet a = [1, 2, 3, 4, 5, 6, 7, 8];\\na.fill(\\"a\\");\\nconsole.log(a); // [\'a\',\'a\',\'a\',\'a\',\'a\',\'a\',\'a\',\'a\']\\n\\nlet b = [1, 2, 3, 4, 5, 6, 7, 8];\\nb.fill(\\"b\\", 3, 5);\\nconsole.log(b); // [1,2,3,\'b\',\'b\',6,7,8]\\n```\\n\\n## 回傳陣列元素資訊或索引值\\n\\n### length() 取得陣列長度\\n\\n```javascript\\nlet a = [1, 2, 3, 4, 5, 6, 7, 8];\\nconsole.log(a.length); // 8\\n```\\n\\n### indexOf() 尋找是否有符合的元素\\n\\n```js\\nconst fruits = [\\"apple\\", \\"banana\\", \\"orange\\"];\\n\\nfruits.indexOf(\\"mango\\"); // -1 表示找不到\\nfruits.indexOf(\\"apple\\"); // 0   表示在陣列的第 0 個位置找到\\n```\\n\\n### lastIndexOf()\\n\\n### find() 回傳第一個符合判斷條件的元素\\n\\n```javascript\\nlet a = [1, 2, 3, 4, 5, 6, 7, 8];\\nconsole.log(a.find((e) => e > 3)); // 4\\nconsole.log(a.find((e) => e < 0)); // undefined\\n```\\n\\n### findIndex()\\n\\n### filter() 回傳條件為 true 的元素組成的陣列\\n\\n會將陣列中每一個元素，帶入指定的函式做判斷，若元素符合判斷條件會傳出成唯一個新的陣列元素。\\n\\n```javascript\\nlet a = [1, 2, 3, 4, 5, 6, 7, 8];\\nconsole.log(a.filter((e) => e > 3)); // [4, 5, 6, 7, 8]\\nconsole.log(a.filter((e) => e % 2 == 0)); // [2, 4, 6, 8]\\n```\\n\\n## 針對每個元素進行處理\\n\\n### forEach()\\n\\n將陣列中每個元素套用到指定函式裡面進行運算。\\n\\n函式有三個參數：\\n\\n1. 表示每個元素的值(必填)\\n2. 該元素的索引值(選填)\\n3. 表示原本的陣列(選填)\\n\\n```javascript\\nlet a = [1, 2, 3, 4, 5];\\nlet b = 0;\\na.forEach((item) => {\\n  b = b + item;\\n});\\nconsole.log(b); // 15 => (1 + 2 + 3 + 3 + 4 + 5)\\n```\\n\\n## 產生新的陣列或值\\n\\n### join()\\n\\n### concat()\\n\\n### slice() 擷取陣列，回傳指定範圍元素的新陣列\\n\\n- slice(startIndex, endIndex)\\n  - startIndex 必須，起始位置的 index，包含此位置。\\n  - endIndex 可選，擷取結束位置的索引，不包含此位置。預設為擷取至陣列末端。\\n\\n```js\\nlet arr = [1, 2, 3, 4, 5];\\n\\n// 擷取位置 1 到位置 3 (不包含)的元素\\nlet answer = arr.slice(1, 3);\\n\\nconsole.log(answer); // [2,3]\\nconsole.log(arr); // [1,2,3,4,5] (原陣列未被修改)\\n```\\n\\n若傳入負數索引為引數，則表示從陣列末尾開始計算。\\n\\n```js\\nlet arr = [1, 2, 3, 4, 5];\\n\\n// 擷取倒數第二元素到陣列末端\\nlet answer = arr.slice(-2);\\n\\nconsole.log(answer); // [4,5]\\n```\\n\\n### map() 處理陣列中每一個元素，最後回傳一個新的陣列\\n\\n裡面有一個函式(必填)和一個回傳函式裡面的 this 參數(選填)，函式中包含三個參數：\\n\\n1. 每個元素的值(必填)\\n2. 當前元素的 index 值(選填)\\n3. 當前的陣列(選填)\\n\\n```javascript\\nlet a = [1, 2, 3, 4, 5, 6, 7, 8];\\nlet b = a.map((e) => {\\n  return e + 10;\\n});\\nconsole.log(b); // [11, 12, 13, 14, 15, 16, 17, 18]\\n```\\n\\n套用第二和第三個參數的變化\\n\\n```javascript\\nlet a = [1, 2, 3, 4, 5, 6, 7, 8];\\nlet b = a.map((e, i, arr) => {\\n  return `${e}${i}${arr.find((e) => e % 5 == 1)}`; // 組合成「元素 + 索引值 + 除以五餘數為 1 的元素」\\n});\\nconsole.log(b); // [\'101\', \'211\', \'321\', \'431\', \'541\', \'651\', \'761\', \'871\']\\n```\\n\\n若要使用回傳函式裡 this 的函數，則「不能使用」箭頭函式，因為箭頭函式的 this 指向，和函式的 this 指向不同，所以要用一般的函式處理。\\n\\n```javascript\\nlet a = [1, 2, 3, 4, 5, 6, 7, 8];\\nlet b = a.map(function (e) {\\n  return e + this; // 此處的 this 為 10\\n}, 10);\\nconsole.log(b); // [11, 12, 13, 14, 15, 16, 17, 18]\\n```\\n\\n### reduce() 計算陣列中每個元素，並將結果與下個元素做計算\\n\\n可以將陣列中的每一個元素做計算，每次計算的結果，會再與下個元素做計算到結束為止。\\n\\n包含一個函式，函式內有四個參數：\\n\\n1. 計算的值(必填)\\n2. 取得的元素(必填)\\n3. 該元素的 index 值(選填)\\n4. 原本的陣列 (選填)\\n\\n```javascript\\nlet a = [1, 2, 3, 4, 5, 6, 7, 8];\\nlet b = a.reduce(function (total, e) {\\n  return total + e;\\n});\\nconsole.log(b); // 36 => (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 = 36)\\n```\\n\\n### reduceRight() 計算方式為從右到左\\n\\n```javascript\\nlet a = [1, 2, 3, 4, 5, 6, 7, 8];\\nlet b = a.reduce(function (total, e) {\\n  return total - e;\\n});\\nconsole.log(b); // -34 (1 - 2 - 3 - 4 - 5 - 6 - 7 - 8 = -34)\\nlet c = a.reduceRight(function (total, e) {\\n  return total - e;\\n});\\nconsole.log(c); // -20 (8 - 7 - 6 - 5 - 4 - 3 - 2 - 1 = -20)\\n```\\n\\n### flat() 將多維陣列扁平化\\n\\n可以將一個多維陣列的深度轉換為一維(扁平化)，他有一個選填的參數，代表要轉換的深度，其預設為 1，如果深度很多層，可以用`infinity`來全部展開成一維陣列。\\n\\n```javascript\\nlet a = [1, 2, [3], [4, [5, [6]]]];\\nlet b = a.flat();\\nlet c = a.flat(2);\\nlet d = a.flat(Infinity);\\nconsole.log(b); // [1, 2, 3, 4, [5, [6]]]\\nconsole.log(c); // [1, 2, 3, 4, 5, [6]]\\nconsole.log(d); // [1, 2, 3, 4, 5, 6]\\n```\\n\\n### flatMap() map + flat()\\n\\n在運算後直接將陣列扁平化\\n\\n```javascript\\nlet a = [1, 2, [3], [4, 5]];\\nlet b = a.flatMap((e) => e + 1);\\nlet c = a.map((e) => e + 1).flat();\\nconsole.log(b); // [2, 3, \\"31\\", \\"4,51\\"] ( 可以看到 b 和 c 得到的結果相同 )\\nconsole.log(c); // [2, 3, \\"31\\", \\"4,51\\"]\\n```\\n\\n### Array.from()\\n\\n### Array.of() 將數值、字串等內容，轉換為陣列\\n\\n```javascript\\nlet a = Array.Of(1, \\"a\\", 2, \\"b\\", 3);\\nconsole.log(a); // [1, \\"a\\", 2, \\"b\\", 3]\\n```\\n\\n### toString() 將陣列轉換為字串\\n\\n```javascript\\nlet a = [1, 2, 3, 4, 5, 6, 7, 8];\\nlet b = a.toString();\\nconsole.log(b); // 1,2,3,4,5,6,7,8\\n```\\n\\n## 判斷\\n\\n### every() 全部符合判斷條件回傳 true\\n\\n只要有任何一個元素不符合判斷條件，就會回傳 false，全部符合就會回傳 true。\\n\\n```javascript\\nlet a = [1, 2, 3, 4, 5, 6];\\nconsole.log(a.every((e) => e > 3)); // false (1, 2 小於 3，3　等於 3)\\nconsole.log(a.every((e) => e > 0)); // true\\n```\\n\\n### some() 其中任一符合回傳 true\\n\\n會將陣列中每一個元素帶入指定的函式中做判斷，只要有任一個元素符合判斷標準，就會回傳 true，若完全不符合，回傳 false\\n\\n```javascript\\nlet a = [1, 2, 3, 4, 5, 6];\\nconsole.log(a.some((e) => e > 3)); // true (因為 4, 5, 6 大於 3)\\nconsole.log(a.some((e) => e > 6)); // false (因為全部都小於或等於 6)\\n```\\n\\n### include() 陣列中使否包含指定值\\n\\n會判斷陣列中是否包含指定值，包含回傳 true，否則回傳 false。\\n\\n有兩個參數：\\n\\n1. 表示要判斷的值(必填)\\n2. 陣列的開始位置(選填)\\n\\n```javascript\\nlet a = [1, 2, 3, 4, 5, 6, 7, 8];\\nconsole.log(a.includes(2)); // true\\nconsole.log(a.includes(2, 2)); // false (從陣列中第二個位置開始搜尋，沒有 2)\\n```\\n\\n### Array.inArray()\\n\\n## 其他\\n\\n### keys()\\n\\n### valueOf() 回傳陣列的原始值\\n\\n```javascript\\nlet a = [1, 2, 3, 4, 5, 6, 7, 8];\\nlet b = a.valueOf();\\nconsole.log(a); // [1, 2, 3, 4, 5, 6, 7, 8]\\nlet c = a.valueOf();\\na.shift();\\nconsole.log(a); // [2, 3, 4, 5, 6, 7, 8]\\nconsole.log(b); // [2, 3, 4, 5, 6, 7, 8] ( 因為 a 的原始值更動了，所以 b 也變了 )\\nconsole.log(c); // [2, 3, 4, 5, 6, 7, 8]\\n```\\n","tocContent":"- [JavaScript 陣列](#javascript-陣列)\\n  - [改變原始陣列](#改變原始陣列)\\n    - [push() 加入陣列最後一個位置](#push-加入陣列最後一個位置)\\n    - [pop() 取出陣列的最後一個元素](#pop-取出陣列的最後一個元素)\\n    - [shift() 取出並移除陣列的第一個元素](#shift-取出並移除陣列的第一個元素)\\n    - [unshift() 將元素添加到第一個位置](#unshift-將元素添加到第一個位置)\\n    - [reverse() 反轉陣列](#reverse-反轉陣列)\\n    - [splice(start, delete\\\\_count, item) 新增或移除陣列中指定位置的元素](#splicestart-delete_count-item-新增或移除陣列中指定位置的元素)\\n    - [sort() 針對陣列的元素進行排列](#sort-針對陣列的元素進行排列)\\n    - [copyWithin()](#copywithin)\\n    - [fill()　置換陣列中的值](#fill置換陣列中的值)\\n  - [回傳陣列元素資訊或索引值](#回傳陣列元素資訊或索引值)\\n    - [length() 取得陣列長度](#length-取得陣列長度)\\n    - [indexOf() 尋找是否有符合的元素](#indexof-尋找是否有符合的元素)\\n    - [lastIndexOf()](#lastindexof)\\n    - [find() 回傳第一個符合判斷條件的元素](#find-回傳第一個符合判斷條件的元素)\\n    - [findIndex()](#findindex)\\n    - [filter() 回傳條件為 true 的元素組成的陣列](#filter-回傳條件為-true-的元素組成的陣列)\\n  - [針對每個元素進行處理](#針對每個元素進行處理)\\n    - [forEach()](#foreach)\\n  - [產生新的陣列或值](#產生新的陣列或值)\\n    - [join()](#join)\\n    - [concat()](#concat)\\n    - [slice() 擷取陣列，回傳指定範圍元素的新陣列](#slice-擷取陣列回傳指定範圍元素的新陣列)\\n    - [map() 處理陣列中每一個元素，最後回傳一個新的陣列](#map-處理陣列中每一個元素最後回傳一個新的陣列)\\n    - [reduce() 計算陣列中每個元素，並將結果與下個元素做計算](#reduce-計算陣列中每個元素並將結果與下個元素做計算)\\n    - [reduceRight() 計算方式為從右到左](#reduceright-計算方式為從右到左)\\n    - [flat() 將多維陣列扁平化](#flat-將多維陣列扁平化)\\n    - [flatMap() map + flat()](#flatmap-map--flat)\\n    - [Array.from()](#arrayfrom)\\n    - [Array.of() 將數值、字串等內容，轉換為陣列](#arrayof-將數值字串等內容轉換為陣列)\\n    - [toString() 將陣列轉換為字串](#tostring-將陣列轉換為字串)\\n  - [判斷](#判斷)\\n    - [every() 全部符合判斷條件回傳 true](#every-全部符合判斷條件回傳-true)\\n    - [some() 其中任一符合回傳 true](#some-其中任一符合回傳-true)\\n    - [include() 陣列中使否包含指定值](#include-陣列中使否包含指定值)\\n    - [Array.inArray()](#arrayinarray)\\n  - [其他](#其他)\\n    - [keys()](#keys)\\n    - [valueOf() 回傳陣列的原始值](#valueof-回傳陣列的原始值)"}')},8615:function(n){"use strict";n.exports=JSON.parse('{"name":"Laravel API Format.md","content":"# Laravel API Format\\n\\n>\\n\\n> api 返回資料若以原生格式返回，沒有經過任何處理，可能包含敏感資訊\\n>\\n> 利用 transformer 可以將 api 響應的訊息系統化規則，進行統一輸出，方便管理與編輯\\n>\\n> 參考資料：\\n>\\n> [Laravel API 系列教程（三）：使用 API Resource 来创建自己的 {JSON:API} 格式 API](https://laravelacademy.org/post/9203)\\n>\\n> [Laravel 構建 API 伺服器之響應資料處理](https://www.796t.com/content/1545181747.html)\\n>\\n> [Laravel 8 中文文檔 API 资源](https://learnku.com/docs/laravel/8.x/eloquent-resources/9410)\\n\\n## spatie/laravel-fractal 套件\\n\\n```bash\\ncomposer require spatie/laravel-fractal\\n```\\n\\n安裝完成後，在 laravel 中註冊\\n\\n```bash\\nphp artisan vendor:publish --provider=\\"Spatie\\\\Fractal\\\\FractalServiceProvider\\"\\n```\\n\\n### 建立 transformer\\n\\n在 app/Http 的目錄下建立 Transformers 目錄\\n\\n```bash\\nphp artisan make:transformer TestTransformer\\n```\\n\\n```php\\nnamespace App\\\\Transformers;\\n\\nuse League\\\\Fractal\\\\TransformerAbstract;\\n\\nclass TeatTransformer extends TransformerAbstract\\n{\\n    /**\\n     * List of resources to automatically include\\n     *\\n     * @var array\\n     */\\n    protected $defaultIncludes = [\\n        //\\n    ];\\n\\n    /**\\n     * List of resources possible to include\\n     *\\n     * @var array\\n     */\\n    protected $availableIncludes = [\\n        //\\n    ];\\n\\n    /**\\n     * A Fractal transformer.\\n     *\\n     * @return array\\n     */\\n    public function transform()\\n    {\\n        return [\\n            \'id\' => $user->id,\\n            \'name\' => $user->name,\\n            \'signature\' => $user->signature,\\n            \'created_at\' => $user->created_at->toDateTimeString()\\n        ];\\n    }\\n}\\n```\\n\\n返回的陣列代表真實要響應的 json 資料格式\\n\\n### 在 controller 中使用 transformer\\n\\n匯入 transformer 命名空間\\n\\n```php\\nclass UserController extends Controller\\n{\\n\\n    /**\\n     * 使用者列表介面\\n     */\\n    public function index()\\n    {\\n      $users = User::all();\\n\\n      return $this->response->collection($users, new TestTransformer());\\n    }\\n\\n}\\n```\\n\\n輸出：\\n\\n```json\\n{\\n  \\"data\\": [\\n    {\\n      \\"id\\": 1,\\n      \\"name\\": \\"張三\\",\\n      \\"signature\\": \\"Hello, World\\",\\n      \\"created_at\\": \\"2018-11-02 16:21:20\\"\\n    },\\n    {\\n      \\"id\\": 2,\\n      \\"name\\": \\"李四\\",\\n      \\"signature\\": \\"這個人很懶...什麼也沒有留下\\",\\n      \\"created_at\\": \\"2018-11-02 16:21:20\\"\\n    }\\n  ],\\n  \\"meta\\": {\\n    // ...自動生成的元資料，如果你查詢出的資料帶有分頁資料（laravel中的Paginate）\\n    // 那麼Transformer將會自動幫你把分頁資料加入在此處\\n  }\\n}\\n```\\n\\n## API Resource\\n\\nLaravel 5.5 新增的 API Resource，和 transformer 功能與思路基本上一樣\\n\\n但由於是 laravel 官方釋出，因此與 Laravel Eloquent model 各種功能結合的更加緊密\\n\\n```bash\\nphp artisan make:resource ArticleResource\\n```\\n\\n生成的檔案位於 app/Http/Resources 目錄底下\\n\\n```php\\nnamespace App\\\\Http\\\\Resources;\\n\\nuse Illuminate\\\\Http\\\\Resources\\\\Json\\\\Resource;\\n\\nclass TestResource extends Resource\\n{\\n    /** * Transform the resource into an array.\\n     *\\n     * @param \\\\Illuminate\\\\Http\\\\Request $request\\n     * @return array\\n     */\\n    public function toArray($request)\\n    {\\n        return [\\n            \'id\' => $user->id,\\n            \'name\' => $user->name,\\n            \'signature\' => $user->signature,\\n            \'created_at\' => $user->created_at->toDateTimeString()\\n        ];\\n    }\\n}\\n```\\n\\n在 controller 中將 transformer 實例化\\n\\n```php\\npublic function show(User $user)\\n{\\n    return new ArticleResource($user);\\n}\\n```\\n\\n```json\\n{\\n  \\"data\\": {\\n        {\\n          \\"id\\": 1,\\n          \\"name\\": \\"張三\\",\\n          \\"signature\\": \\"Hello, World\\",\\n          \\"created_at\\": \\"2018-11-02 16:21:20\\"\\n        }\\n    }\\n\\n}\\n```\\n\\n預設數據會被包在 data 的物件裡面，可以透過 `withoutWrapping()` 來將其去除\\n\\n```php\\npublic function show(User $user)\\n{\\n    TestResource::withoutWrapping();\\n    return new TestResource($user);\\n}\\n```\\n","tocContent":"- [Laravel API Format](#laravel-api-format)\\n  - [spatie/laravel-fractal 套件](#spatielaravel-fractal-套件)\\n    - [建立 transformer](#建立-transformer)\\n    - [在 controller 中使用 transformer](#在-controller-中使用-transformer)\\n  - [API Resource](#api-resource)"}')},3911:function(n){"use strict";n.exports=JSON.parse("{\"name\":\"Laravel Artisan command.md\",\"content\":\"# Artisan Command\\n\\n## 自訂 Artisan command\\n\\n### 利用指令建立要自訂命令的檔案\\n\\n```bash\\nphp artisan make:command <command-name>\\n```\\n\\n建立的檔案位置會在 app/Console/Commands\\n\\n### 編輯檔案\\n\\n編輯指令名稱\\n\\n```php\\nprotected $signature = 'EditCity:city {country_code}';\\n```\\n\\n實際指令\\n\\n```bash\\nphp artisan EditCity:city us\\n```\\n\\n編寫命令\\n\\n```php\\npublic function handle()\\n{\\n    try {\\n       echo \\\"Hello World\\\";\\n    } catch (QueryException $ex) {\\n        dd($ex->getMessage());\\n    }\\n}\\n```\\n\\n### 參數\\n\\n- 花括號中為傳入的參數\\n\\n  - {country_code?} 可選的參數\\n  - {country_code=tw} 參數的預設值\\n  - {country_code*} `*`代表輸入的是陣列\\n  - {country_code:國家代碼} 加入敘述\\n\\n- 選項：關鍵字是`--`\\n\\n  - {--queue=} 選項後面加上 `=`，表示選項需要明確指定值。\\n  - {--Q|queue} 可用簡寫\\n  - {--id=_} `_`代表輸入的是陣列\\n  - {--queue=:這個工作是否該進入隊列} 加入敘述\\n\\n- 取得參數\\n\\n  - $this->argument('user') 取得單一 user 參數\\n  - $this->arguments() 取得所有參數，以陣列呈現\\n  - $this->options('queue') 取得單一 queue 選項\\n  - $this->options() 取得所有選項，以陣列呈現\\n\\n- 互動式指令\\n\\n  - ask 詢問\\n\\n    ```php\\n    $name = $this->ask('what is ur name');\\n    ```\\n\\n  - secret 詢問，但回答在終端機看不到\\n\\n    ```php\\n    $name = $this->secret('what is ur password');\\n    ```\\n\\n  - confirm 確認問題，預設回傳值是 false，若使用者回傳 y 則回傳 true\\n\\n    ```php\\n    if ($this->confirm('wanna continue?')) {\\n        //\\n    }\\n\\n    ```\\n\\n  - anticipate 自動完成，若是 Taylor 或是 Dayle 這兩個選項就自動完成，使用者亦可以輸入其他選項\\n\\n    ```php\\n    $name = $this->anticipate('what is ur name', ['Taylor', 'Dayle']);\\n    ```\\n\\n  - choice 選項選擇，使用者輸入 key 值\\n\\n    ```php\\n    $name $this->choice('what is ur name', ['Sunny', 'Taylor', 'Dayle'], $defaultIndex);\\n    ```\\n\\n    ```txt\\n    What is your name? [Taylor]: //在這個$defaultIndex = 1\\n      [0] Sunny\\n      [1] Taylor\\n      [2] Dayle\\n     > 0\\n\\n    Display name: Sunny\\n    ```\\n\\n### 註冊 command\\n\\napp\\\\console\\\\Commands\\\\Kernel.php\\n\\n```php\\nprotected $commands = [\\n    EditCity::class\\n];\\n```\\n\",\"tocContent\":\"\"}")},9073:function(n){"use strict";n.exports=JSON.parse("{\"name\":\"Laravel Collections & Helper.md\",\"content\":\"# Laravel Collections & Helper\\n\\n>\\n\\n## Collections 集合\\n\\n> 參考資料\\n>\\n> [Laravel — Collection 用途大解析](https://medium.com/johnliu-%E7%9A%84%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E6%80%9D%E7%B6%AD/laravel-collection-%E7%94%A8%E9%80%94%E5%A4%A7%E8%A7%A3%E6%9E%90-1e2dbc6e2c93)\\n\\n### 運算類\\n\\n方便進行數學運算，或是判斷是否含有特定值，也能比較兩個 collection 之間的不同\\n\\n#### Integer\\n\\n##### `count` 計數\\n\\n```php\\n$collection = collect([1, 2, 3, 4]);\\n\\n$collection->count();\\n\\n// 4\\n```\\n\\n#### Boolean\\n\\n##### `contains` 判斷集合是否包含指定的條件\\n\\n傳入值\\n\\n```php\\n$collection = collect(['name' => 'Desk', 'price' => 100]);\\n\\n$collection->contains('Desk');\\n\\n// true\\n\\n$collection->contains('New York');\\n\\n// false\\n```\\n\\n傳入陣列\\n\\n```php\\n$collection = collect([\\n    ['product' => 'Desk', 'price' => 200],\\n    ['product' => 'Chair', 'price' => 100],\\n]);\\n\\n$collection->contains('product', 'Bookcase');\\n\\n// false\\n```\\n\\n傳遞匿名函數\\n\\n```php\\n$collection = collect([1, 2, 3, 4, 5]);\\n\\n$collection->contains(function ($value, $key) {\\n    return $value > 5;\\n});\\n\\n// false\\n```\\n\\n- `containsStrict()` 方法和 `contains()` 類似，但他在比較時更嚴格。\\n\\n#### Array\\n\\n##### `diff` 比較集合或陣列的值\\n\\n返回不存在此方法參數中的值\\n\\n```php\\n$diff = collect([1, 2, 3, 4, 5])->diff([2, 4, 6, 8]);\\n$diff->all();\\n\\n// 返回[1, 3, 5]，原集合內與diff方法中相同的數值被剔除。\\n```\\n\\n### 迭代類\\n\\n#### `filter` 傳入匿名函式篩選集合\\n\\n返回通過篩選的項目\\n\\n```php\\n$filtered = collect([1, 2, 3, 4])->filter(function (item) {\\n    return $item > 2\\n});\\n\\n$filtered->all();\\n\\n// [3, 4]\\n```\\n\\n#### `map` 遍歷集合\\n\\n將集合的值透過傳入的匿名函數修改並返回，生成修改過的新集合\\n\\n```php\\n$collection = collect([1, 2, 3, 4, 5]);\\n\\n$multiplied = $collection->map(function ($item, $key) {\\n    return $item * 2;\\n});\\n\\n$multiplied->all();\\n\\n// [2, 4, 6, 8, 10]\\n```\\n\\n### 分組類\\n\\n#### `countBy` 計算指定數值\\n\\n```php\\n$collection = collect([1, 2, 2, 2, 3]);\\n\\n$counted = $collection->countBy();\\n\\n$counted->all();\\n\\n// [1 => 1, 2 => 3, 3 => 1]\\n```\\n\\n可以傳入匿名函數來自訂要計數的值\\n\\n```php\\n$collection = collect(['alice@gmail.com', 'bob@yahoo.com', 'carlos@gmail.com']);\\n\\n$counted = $collection->countBy(function ($email) {\\n    return substr(strrchr($email, \\\"@\\\"), 1);\\n});\\n\\n$counted->all();\\n\\n// ['gmail.com' => 2, 'yahoo.com' => 1]\\n```\\n\\n### 變形類\\n\\n將 collection 改變資料結構\\n\\n#### 維度與順序\\n\\n##### `collapse` , `flatten`\\n\\n兩者都是將維度從多維降為一維，collapse 較適用 Array 形式的資料，flatten 更適合有 Key-Value 形式的資料。\\n兩個函式的用途，都是將例如 [[1,2,3], [4,5,6]] 轉變成 [1,2,3,4,5,6]\\n\\n##### `sort` 將陣列重新排列\\n\\n```php\\nuse Illuminate\\\\Support\\\\Arr;\\n\\n$array = ['Desk', 'Table', 'Chair'];\\n\\n$sorted = Arr::sort($array);\\n\\n// ['Chair', 'Desk', 'Table']\\n```\\n\\n根據傳入匿名函數返回的結果，對陣列進行排序\\n\\n```php\\nuse Illuminate\\\\Support\\\\Arr;\\n\\n$array = [\\n    ['name' => 'Desk'],\\n    ['name' => 'Table'],\\n    ['name' => 'Chair'],\\n];\\n\\n$sorted = array_values(Arr::sort($array, function ($value) {\\n    return $value['name'];\\n}));\\n\\n/*\\n    [\\n        ['name' => 'Chair'],\\n        ['name' => 'Desk'],\\n        ['name' => 'Table'],\\n    ]\\n*/\\n```\\n\\n利用 key 值替陣列排序\\n\\n```php\\n$list = [\\n  5 => 1\\n  4 => 2\\n  2 => 4\\n  1 => 5\\n  6 => 6\\n];\\n\\nArr::sort($list, function ($value, $key) {\\n    return $key;\\n})\\n```\\n\\n輸出\\n\\n```txt\\narray:5 [\\n  1 => 5\\n  2 => 4\\n  4 => 2\\n  5 => 1\\n  6 => 6\\n]\\n```\\n\\n#### 組合\\n\\n##### `combine` 將一個集合的值作為 key，用來和另一陣列或集合的值進行組合\\n\\n```php\\n$collection = collect(['name', 'age']);\\n\\n$combined = $collection->combine(['George', 29]);\\n\\n$combined->all();\\n\\n// ['name' => 'George', 'age' => 29]\\n```\\n\\n##### `merge` 合併指定的陣列或是集合到原集合\\n\\n若傳入的集合中的 key 值與原集合中的 key 值相同，則傳入的值將會將原集合中的值覆蓋。\\n\\n```php\\n$collection = collect(['product_id' => 1, 'price' => 100]);\\n\\n$merged = $collection->merge(['price' => 200, 'discount' => false]);\\n\\n$merged->all();\\n\\n// ['product_id' => 1, 'price' => 200, 'discount' => false]\\n```\\n\\n若傳入的集合項為數字，則這些值將會追加在集合的最後面。\\n\\n```php\\n$collection = collect(['Desk', 'Chair']);\\n\\n$merged = $collection->merge(['Bookcase', 'Door']);\\n\\n$merged->all();\\n\\n// ['Desk', 'Chair', 'Bookcase', 'Door']\\n```\\n\\n##### `concat` 將傳入的值追加到集合的末端\\n\\n```php\\n$collection = collect(['John Doe']);\\n\\n$concatenated = $collection->concat(['Jane Doe'])->concat(['name' => 'Johnny Doe']);\\n\\n$concatenated->all();\\n\\n// ['John Doe', 'Jane Doe', 'Johnny Doe']\\n```\\n\\n##### `push` 把指定的值加入集合的末端\\n\\n```php\\n$collection = collect([1, 2, 3, 4]);\\n$collection->push(5);\\n$collection->all();\\n\\n// [1, 2, 3, 4, 5]\\n```\\n\\n##### `prepend` 將指定的值加入集合的開頭\\n\\n```php\\n$collection = collect([1, 2, 3, 4, 5]);\\n\\n$collection->prepend(0);\\n\\n$collection->all();\\n\\n// [0, 1, 2, 3, 4, 5]\\n```\\n\\n#### 擷取\\n\\n##### `except` 擷取除了 a, b 以外的\\n\\n##### `only` 只擷取 a, b\\n\\n##### `get` 取得特定 key 的值\\n\\n##### `forget` 直接刪除指定 key 值對應的 value\\n\\n##### `pull` 和 `get` 雷同，會修改原本的 collection\\n\\n##### `pluck` 取得集合中所有陣列的 key 值\\n\\n```php\\n$collection = collect([\\n    ['product_id' => 'prod-100', 'name' => 'Desk'],\\n    ['product_id' => 'prod-200', 'name' => 'Chair'],\\n])\\n\\n$picked = $collection->pluck('name');\\n\\n$pluck->all();\\n\\n// ['Desk', 'Chair']\\n```\\n\\n##### `intersect` 從原集合中移除在指定陣列中或集合中不存在的值\\n\\n```php\\n$collection = collect(['a', 'b', 'c']);\\n$intersect = $collection->intersect(['a', 'c', 'e', 'f']);\\n$intersect->all(); // [0 => 'a', 2 => 'c']\\n```\\n\\n##### `keys`, `values` 取出集合中的 key 或 value\\n\\n#### 轉型\\n\\n##### `toArray`, `toJson` 提供轉成陣列或是 json 等常用格式\\n\\n### Where\\n\\ncollection 和 laravel 本身的 ORM 系統 Eloquent 密不可分，因此也配合支援許多 where 語法，使用方法類似 MySQL。\\n\\n#### 'first' 返回陣列中指令條件的第一元素\\n\\n```php\\ncollect([1, 2, 3, 4, 5, 6])->first(function ($value, $key) {\\n    return $value > 2;\\n});\\n\\n// 3\\n```\\n\\n若 `first` 方法不傳入參數，則返回集合中第一元素。若集合為空，則返回 `null`\\n\\n```php\\ncollect([1, 2])->first();\\n\\n// 1\\n```\\n\\n### 軟體操作類\\n\\n#### `collect` 複製一個新的 collection，記憶體位置不衝突\\n\\n## Helper 輔助函數\\n\\n### `Arr::add` 將數值加入陣列\\n\\n```php\\nuse Illuminate\\\\Support\\\\Arr;\\n\\n$array = Arr::add(['name' => 'Desk'], 'price', 100);\\n\\n// ['name' => 'Desk', 'price' => 100]\\n\\n$array = Arr::add(['name' => 'Desk', 'price' => null], 'price', 100);\\n\\n// ['name' => 'Desk', 'price' => 100]\\n\\n```\\n\\n### `after` 返回傳入的字串的值後面所有的內容\\n\\n如果傳入的值不存在，將返回整個字串\\n\\n```php\\nuse Illuminate\\\\Support\\\\Str;\\n\\n$slice = Str::of('This is my name')->after('This is');\\n\\n// ' my name'\\n```\\n\",\"tocContent\":\"- [Laravel Collections \\\\& Helper](#laravel-collections--helper)\\n  - [Collections 集合](#collections-集合)\\n    - [運算類](#運算類)\\n      - [Integer](#integer)\\n        - [`count` 計數](#count-計數)\\n      - [Boolean](#boolean)\\n        - [`contains` 判斷集合是否包含指定的條件](#contains-判斷集合是否包含指定的條件)\\n      - [Array](#array)\\n        - [`diff` 比較集合或陣列的值](#diff-比較集合或陣列的值)\\n    - [迭代類](#迭代類)\\n      - [`filter` 傳入匿名函式篩選集合](#filter-傳入匿名函式篩選集合)\\n      - [`map` 遍歷集合](#map-遍歷集合)\\n    - [分組類](#分組類)\\n      - [`countBy` 計算指定數值](#countby-計算指定數值)\\n    - [變形類](#變形類)\\n      - [維度與順序](#維度與順序)\\n        - [`collapse` , `flatten`](#collapse--flatten)\\n        - [`sort` 將陣列重新排列](#sort-將陣列重新排列)\\n      - [組合](#組合)\\n        - [`combine` 將一個集合的值作為 key，用來和另一陣列或集合的值進行組合](#combine-將一個集合的值作為-key用來和另一陣列或集合的值進行組合)\\n        - [`merge` 合併指定的陣列或是集合到原集合](#merge-合併指定的陣列或是集合到原集合)\\n        - [`concat` 將傳入的值追加到集合的末端](#concat-將傳入的值追加到集合的末端)\\n        - [`push` 把指定的值加入集合的末端](#push-把指定的值加入集合的末端)\\n        - [`prepend` 將指定的值加入集合的開頭](#prepend-將指定的值加入集合的開頭)\\n      - [擷取](#擷取)\\n        - [`except` 擷取除了 a, b 以外的](#except-擷取除了-a-b-以外的)\\n        - [`only` 只擷取 a, b](#only-只擷取-a-b)\\n        - [`get` 取得特定 key 的值](#get-取得特定-key-的值)\\n        - [`forget` 直接刪除指定 key 值對應的 value](#forget-直接刪除指定-key-值對應的-value)\\n        - [`pull` 和 `get` 雷同，會修改原本的 collection](#pull-和-get-雷同會修改原本的-collection)\\n        - [`pluck` 取得集合中所有陣列的 key 值](#pluck-取得集合中所有陣列的-key-值)\\n        - [`intersect` 從原集合中移除在指定陣列中或集合中不存在的值](#intersect-從原集合中移除在指定陣列中或集合中不存在的值)\\n        - [`keys`, `values` 取出集合中的 key 或 value](#keys-values-取出集合中的-key-或-value)\\n      - [轉型](#轉型)\\n        - [`toArray`, `toJson` 提供轉成陣列或是 json 等常用格式](#toarray-tojson-提供轉成陣列或是-json-等常用格式)\\n    - [Where](#where)\\n      - ['first' 返回陣列中指令條件的第一元素](#first-返回陣列中指令條件的第一元素)\\n    - [軟體操作類](#軟體操作類)\\n      - [`collect` 複製一個新的 collection，記憶體位置不衝突](#collect-複製一個新的-collection記憶體位置不衝突)\\n  - [Helper 輔助函數](#helper-輔助函數)\\n    - [`Arr::add` 將數值加入陣列](#arradd-將數值加入陣列)\\n    - [`after` 返回傳入的字串的值後面所有的內容](#after-返回傳入的字串的值後面所有的內容)\"}")},9813:function(n){"use strict";n.exports=JSON.parse("{\"name\":\"Laravel Eloquent ORM.md\",\"content\":\"# Laravel Eloquent ORM\\n\\n>\\n\\n## models\\n\\n### 建立 Model\\n\\n```php\\nphp artisan make:model New\\n```\\n\\n建立 Model 同時建立與其相關的 class\\n\\n```php\\n// migration\\nphp artisan make:model New -m\\n\\n// factory\\nphp artisan make:model New -f\\n\\n// seed\\nphp artisan make:model New -s\\n\\n// controller\\nphp artisan make:model New -c\\n\\n// 同時建立多個class\\nphp artisan make:model New -mfsc\\n\\n```\\n\\n### 基本屬性\\n\\n```php\\nclass UserInfo extends Model\\n{\\n    protected $table = 'user_data';  // 資料表名稱\\n\\n    protected $primaryKey = 'id';   // 主鍵\\n\\n    public $timestamps = false;\\n\\n    protected $fillable = [\\n        'userId',\\n        'userName',\\n        'account',\\n        'password',\\n        'email'\\n    ];\\n\\n    protected $casts = [\\n        'is_admin' => 'boolean',\\n    ];\\n}\\n```\\n\\n- public $timestamps = false // 關閉時間戳記，預設為開啟\\n- 批量賦值：調用 create() update() 時，可以大量新增、修改的欄位。若沒有添加這個屬性，新增修改的動作將無法實現。\\n\\n  - $fillable 設定可以大量新增的欄位（白名單）\\n\\n    ```php\\n    protected $fillable = ['userId','userName','account','pw','email'];\\n    ```\\n\\n  - $guarded 設定需要被保護的欄位（黑名單）\\n\\n    ```php\\n    protected $guarded = [‘uuid’, ‘pw’];\\n    ```\\n\\n- 屬性類型轉換：`$casts` 可以將屬性轉換為指定的類型，支援的類型有\\n  - `integer`\\n  - `real`\\n  - `float`\\n  - `double`\\n  - `decimal:<digits>` 需定義小數位的個數，如 `decimal:2`\\n  - `string`\\n  - `boolean`\\n  - `object`\\n  - `array`\\n  - `collection`\\n  - `date`\\n  - `datetime`\\n  - `timestamps`\\n\\n## 關聯\\n\\n### 多型態關聯\\n\\n> [參考資料](https://laravelacademy.org/post/9725)\\n>\\n> 多型態關聯可以讓一張表同時關連到兩張以上的資料表\\n>\\n> 優點:\\n> 可以合一管理資類類似的資料結構與處理邏輯\\n> 缺點:\\n> 耦合提高，變動邏輯時容易影響到某一方的操作\\n\\n假設我們有 user 跟 post 兩種資料，而他們各自有所屬的 image 資料表\\n\\n| users |\\n| :---: |\\n|  id   |\\n| name  |\\n\\n| user_images |\\n| :---------: |\\n|     id      |\\n|   user_id   |\\n|     url     |\\n\\n| posts |\\n| :---: |\\n|  id   |\\n| name  |\\n\\n| post_images |\\n| :---------: |\\n|     id      |\\n|   post_id   |\\n|     url     |\\n\\n如果 image 的資料結構和處理邏輯相似，就可以使用多型態關聯，將表單合成一張\\n\\n| users |\\n| :---: |\\n|  id   |\\n| name  |\\n\\n| posts |\\n| :---: |\\n|  id   |\\n| name  |\\n\\n|     images      |\\n| :-------------: |\\n|       id        |\\n| imaginable_type |\\n|  imaginable_id  |\\n|       url       |\\n\\n- imaginable_id : 關聯的主鍵值\\n- imaginable_type : 指定這筆資料是關聯 users 資料表還是 posts 資料表，欄內儲存的是類別名稱，型態為字串，如：'App\\\\Models\\\\User' 'App\\\\Models\\\\Post'\\n\\n#### 多形一對一關聯\\n\\n```php\\nnamespace App\\\\Models;\\n\\nuse Illuminate\\\\Database\\\\Eloquent\\\\Model;\\n\\nclass Image extends Model\\n{\\n    public function imaginable()\\n    {\\n        return $this->morphTo();\\n    }\\n}\\n\\nclass Post extends Model\\n{\\n\\n    public function image()\\n    {\\n        return $this->morphOne(Image::class, 'imaginable');\\n    }\\n}\\n\\nclass User extends Model\\n{\\n\\n    public function image()\\n    {\\n        return $this->morphOne(Image::class, 'imaginable');\\n    }\\n}\\n```\\n\\n- `morphOne`: hasOne 的多型態版本\\n\\n  和 hasOne 相比，標類別後面多了一個 name 參數 imaginable，Eloquent 會根據這個 name 預設目標表單上的查詢欄位，以 imaginable 為例的話就是查詢 imaginable_type 跟 imaginable_id\\n\\n  - 自訂目標的查詢欄位名稱\\n\\n    ```php\\n    // morphOne(目標表單名稱，多形名稱，目標的型別欄位名稱，目標的外鍵欄位名稱，自己的關聯鍵)\\n     $this->morphOne(Image::class, 'imaginable','imaginable_type',  'imaginable_id','id');\\n    ```\\n\\n- `morphTo`: belongsTo 的多型態版本\\n\\n  ```php\\n  // 使用時要注意函式的名稱\\n  public function imaginable()\\n  {\\n      return $this->morphTo();\\n  }\\n  ```\\n\\n  如果沒有帶入參數的話預設會用函式的名稱產出預設名稱，像這裡的函式名稱是 imaginable ，那查詢時就會以型別欄位 imaginable_type 查對應的資料表，以及鍵值欄位 imaginable_id 查資料。\\n\\n  - 自訂預設名稱\\n\\n    ```php\\n    $this->morphTo('imaginable');\\n    ```\\n\\n  - 自訂查詢欄位的名稱\\n\\n    ```php\\n    // morphOne(多形名稱，型別欄位名稱，外鍵欄位名稱)\\n    $this->morphTo('imaginable'，'imaginable_type','imaginable_id');\\n    ```\\n\\n#### 多型一對多關聯\\n\\n和一對一的關聯差不多，差別在 morphOne 改成 morphMany，查詢得到的資料不是一筆而是一組\\n\\n```php\\nnamespace App\\\\Models;\\n\\nuse Illuminate\\\\Database\\\\Eloquent\\\\Model;\\n\\nclass Image extends Model\\n{\\n    public function imaginable()\\n    {\\n        return $this->morphTo();\\n    }\\n}\\n\\nclass Post extends Model\\n{\\n\\n    public function image()\\n    {\\n        return $this->morphMany(Image::class, 'imaginable');\\n    }\\n}\\n\\nclass User extends Model\\n{\\n\\n    public function image()\\n    {\\n        return $this->morphMany(Image::class, 'imaginable');\\n    }\\n}\\n```\\n\\n#### 多型多對多關聯\\n\\n> 和普通多對多關聯相比，中介表為多型態\\n\\n影片和文章有相同的 tag，一篇文章和影片同時會有多個 tag，一個 tag 也會同時關連到多個影片或文章\\n| videos |\\n| :----: |\\n| id |\\n| name |\\n\\n| posts |\\n| :---: |\\n|  id   |\\n| name  |\\n\\n|   taggable    |\\n| :-----------: |\\n|      id       |\\n|    tag_id     |\\n| taggable_type |\\n|  taggable_id  |\\n\\n| tags |\\n| :--: |\\n|  id  |\\n| name |\\n\\n多型的一方，會用 morphToMany 方法\\n\\n```php\\n<?php\\n\\nnamespace App\\\\Models;\\n\\nuse Illuminate\\\\Database\\\\Eloquent\\\\Model;\\n\\nclass Video extends Model\\n{\\n    /**\\n     * Get all of the tags for the post.\\n     */\\n    public function tags()\\n    {\\n        return $this->morphToMany(Tag::class, 'taggable');\\n    }\\n}\\n\\nclass Post extends Model\\n{\\n    /**\\n     * Get all of the tags for the post.\\n     */\\n    public function tags()\\n    {\\n        return $this->morphToMany(Tag::class, 'taggable');\\n    }\\n}\\n```\\n\\n反向關聯會使用 morphedByMany 方法\\n\\n```php\\nnamespace App\\\\Models;\\n\\nuse Illuminate\\\\Database\\\\Eloquent\\\\Model;\\n\\nclass Tag extends Model\\n{\\n    /**\\n     * Get all of the posts that are assigned this tag.\\n     */\\n    public function posts()\\n    {\\n        return $this->morphedByMany(Post::class, 'taggable');\\n    }\\n\\n    /**\\n     * Get all of the videos that are assigned this tag.\\n     */\\n    public function videos()\\n    {\\n        return $this->morphedByMany(Video::class, 'taggable');\\n    }\\n}\\n```\\n\\n- `morphToMany`: belongsToMany 的多型態版\\n- `morphedByMany`: 多對多的反向多型關聯\\n\\n  需要帶多型的名稱參數才能查詢資料\\n\\n  ```php\\n  // morphOne(目標表單名稱，多形名稱)\\n   $this->morphToMany(Tag::class, 'taggable');\\n  ```\\n\\n  - 自訂名稱\\n\\n    ```php\\n    public function morphedByMany(\\n      $related,                 // 目標表單名稱\\n      $name,                    // 多型名稱\\n      $table = null,            // 中介表單名稱\\n      $foreignPivotKey = null,  // 中介表單上參照自己的外鍵\\n      $relatedPivotKey = null,  // 中介表單上參照目標的外鍵\\n      $parentKey = null,        // 目標的關聯鍵\\n      $relatedKey = null        // 自己的關聯鍵\\n    )\\n\\n    $this->morphToMany(\\n      Tag::class, 'taggable','taggable','taggable_id','tag_id','id','id'\\n    );\\n    ```\\n\\n#### 自訂多型型別\\n\\n預設 laravel 會使用類別的完整名稱來儲存 model type。\\n\\n可以透過自訂多型型別，使用簡單的字串作為 model type，將這些值從專案的內部結構中解耦出來。\\n\\n如此一來，即使修改 model 名稱，資料庫中的多型 type 欄位也會繼續有效。\\n\\n- 例如：  \\n  Commit Model 可以隸屬於 Post Model 或 Video Model。因此，comments 資料表中的 commentable_type 欄位分別會記載 App\\\\Models\\\\Post 或 App\\\\Models\\\\Video。\\n\\n  此時可以在 `App\\\\Providers\\\\AppServiceProvider` 中的 `boot` 方法，呼叫`enforceMorphMap`方法。將 post 及 video 等簡單字串作為 model type。\\n\\n```php\\nuse Illuminate\\\\Database\\\\Eloquent\\\\Relations\\\\Relation;\\n\\nRelation::enforceMorphMap([\\n    'post' => 'App\\\\Models\\\\Post',\\n    'video' => 'App\\\\Models\\\\Video',\\n]);\\n```\\n\\n## Laravel ORM 將資料存至資料庫\\n\\n### save\\n\\n將表格第一筆資料的名字，改成小華\\n\\n```php\\nUser::find(1)->save(['name' => '小華']);\\n```\\n\\n也可以一次編輯多個欄位\\n\\n```php\\nUser::find(1)->save([\\n  'name'=>'小華',\\n  'email'=>'flower@gmail.com'\\n  'sex'=>'male'\\n]);\\n```\\n\\n### 修改多對多中間表\\n\\n- articles\\n\\n| id  | article_name |\\n| :-: | :----------: |\\n|  1  |   article1   |\\n|  2  |   article2   |\\n|  3  |   article3   |\\n|  4  |   article5   |\\n\\n- tags\\n\\n| id  | tag_name |\\n| :-: | :------: |\\n|  1  |   tech   |\\n|  2  |  music   |\\n|  3  |   art    |\\n|  4  |   food   |\\n\\n- article_tag\\n\\n| article_id | tag_id |\\n| :--------: | :----: |\\n|     1      |   2    |\\n|     1      |   3    |\\n|     1      |   4    |\\n|     3      |   4    |\\n\\n建立和控制多對多關係的方法\\n\\n- 建立:\\n\\n  - `attach()`\\n\\n    ```php\\n    // id=3 的文章原有的標籤[4]\\n    Article::find(3)->tags()->attach([1,2]);\\n    // id=3 的文章加入標籤[1, 2]\\n    // id=3 的文章的標籤有[1, 2, 4]\\n    ```\\n\\n  - `save()`\\n\\n    ```php\\n    Article::find(3)->tags()->saveMany([\\n        Tag::find(1),\\n    Tag::find(2)\\n    ]);\\n    // save輸入的類型須為model\\n    // 多個時要用saveMany\\n    ```\\n\\n    |   方法   | 單個 id | 多個 id | 單個 model |   多個 model    |\\n    | :------: | :-----: | :-----: | :--------: | :-------------: |\\n    | attach() |    V    |    V    |     V      |                 |\\n    |  sync()  |    V    |    V    |     V      |                 |\\n    |  save()  |         |         |     V      | 要用 saveMany() |\\n\\n- 刪去: `detach()`\\n\\n  ```php\\n  $article = Article::find(1);\\n\\n  // 從文章上移除指定tag\\n  $article->tags()->detach($tag_id);\\n\\n  // 移除文章所有tag\\n  $article->tags()->detach();\\n  ```\\n\\n- 同步\\n\\n  - `sync`\\n\\n    ```php\\n    // 更新有傳入值的該筆資料，其他資料會被刪除\\n    $user->roles()->sync([1, 2, 3]);\\n\\n    // 透過id傳入額外的值到中間表\\n    $user->roles()->sync([1 => ['expires' => true], 2, 3]);\\n    ```\\n\\n  - `syncWithoutDetaching`\\n\\n    ```php\\n    // 更新有傳入值的該筆資料，並保留原有的資料\\n    $user->roles()->syncWithoutDetaching([1, 2, 3]);\\n    ```\\n\\n  - `updateExistingPivot`\\n\\n    ```php\\n    // 更新一筆已存在的資料，接受中間表的外鍵和要更新的值進行更新\\n    $user = App\\\\Models\\\\User::find(1);\\n\\n    $user->roles()->updateExistingPivot($roleId, $attributes);\\n    ```\\n\\n- 切換: `toggle()`\\n\\n  ```php\\n  $article->tags()->toggle([1, 2 ,3]);\\n  // 用來切換傳入id的附加狀態，如果傳入的id目前已經被附加，他將會被卸除。\\n  // 若已經被卸除，將會被附加\\n  ```\\n\\n## ORM N+1\\n\\n> 紀錄 ORM 對資料庫的查詢語法\\n>\\n> ```php\\n> // 開始紀錄\\n> DB::enableQueryLog();\\n>\\n> // 結束並印出\\n> dd(DB::getQueryLog());\\n> ```\\n\\n### 什麼是 N+1\\n\\n資料表中有關聯關係，以論壇文章為例。\\n\\n- 一名使用者，可以發布多篇文章。\\n- 一篇文章只屬於一名使用者。\\n\\n使用者與文章的關係為一對多。當我們要取得多名使用者，並同時取得這些使用者過去發布的所有文章時：\\n\\n```php\\nuse App\\\\Models\\\\User;\\nuse Illuminate\\\\Support\\\\Facades\\\\Route;\\n\\nRoute::get('lazy-loading', function () {\\n  // 開啟 Query Log\\n  DB::enableQueryLog();\\n\\n  // 取得所有使用者\\n  $users = User::get();\\n\\n  // 使用迴圈取得每一位使用者所發布的文章\\n  foreach ($users as $user) {\\n      $posts = $user->posts;\\n      dump($posts->toArray());\\n  }\\n\\n  // dump 對資料庫的查詢語法\\n  dump(DB::getQueryLog());\\n});\\n```\\n\\n這時就會產生 n+1 的問題。\\n\\n第一筆查詢是取得所有用戶。\\n\\n```php\\n// 取得所有使用者\\n$users = User::get();\\n```\\n\\n接下來每一筆是取得各用戶發布的文章。\\n\\n```php\\n// 使用迴圈取得每一位使用者所發布的文章\\nforeach ($users as $user) {\\n  $posts = $user->posts;\\n}\\n```\\n\\n### 解決 N+1 的問題\\n\\n可以使用 laravel 所提供的預加載功能 `with()`\\n\\n```php\\nRoute::get('lazy-loading', function () {\\n  // 開啟 Query Log\\n  DB::enableQueryLog();\\n\\n  // 取得所有使用者，並預先加載 Post 的資料\\n  // 這裡的 'posts' 對應到 User Model 中的 posts()\\n  $users = User::with('posts')->get();\\n\\n  // 使用迴圈取得每一位使用者所發布的文章\\n  foreach ($users as $user) {\\n      $posts = $user->posts;\\n      dump($posts->toArray());\\n  }\\n\\n  // dump 對資料庫的查詢語法\\n  dump(DB::getQueryLog());\\n});\\n```\\n\\n這時僅執行了兩個查詢\\n\\n```sql\\nselect * from users\\n\\nselect * from posts where id in (1, 2, 3, 4, 5, ...)\\n```\\n\\n可以指定不需要某些資料\\n\\n```php\\n$users = User::without('posts')->get();\\n```\\n\\n或是只需要其他資料\\n\\n```php\\n$users = User::withOnly('loginRecords')->get();\\n```\\n\\n也可以加載多個關聯\\n\\n```php\\n$users = User::with(['posts', 'commit'])->get();\\n```\\n\\n## 序列化\\n\\n> 建構 JSON API 時，針對 model 及其取得關連的值，將其轉化為 array 或是 JSON\\n\\n### 將 collection 序列化\\n\\n#### array\\n\\n- `toArray()` 所有的屬性和關聯(包括關聯的關聯)，當將轉化為陣列。\\n\\n  ```php\\n  $user = App\\\\Models\\\\User::with('roles')->first();\\n\\n  return $user->toArray();\\n\\n  // 將整個 model collection 序列化\\n  $users = App\\\\Models\\\\User::all();\\n\\n  return $users->toArray();\\n  ```\\n\\n- `attributesToArray()` 僅將 model 的屬性轉換為陣列\\n\\n  ```php\\n  $user = App\\\\Models\\\\User::first();\\n\\n  return $user->attributesToArray();\\n  ```\\n\\n#### JSON\\n\\n- `toJson` 所有的屬性和關聯(包括關聯的關聯)，當將轉化為 JSON。\\n\\n  ```php\\n  $user = App\\\\Models\\\\User::find(1);\\n\\n  return $user->toJson();\\n\\n  // 指定PHP支援的JSON編碼選項\\n  return $user->toJson(JSON_PRETTY_PRINT);\\n  ```\\n\\n- 將 model 或 collection 轉為字串時，會自動調用`toJson()`，因此可以應用在 route 或 controller 中直接返回。\\n\\n  ```php\\n  Route::get('users', function () {\\n      return App\\\\Models\\\\User::all();\\n  });\\n\\n  $user = App\\\\Models\\\\User::find(1);\\n\\n  return (string) $user;\\n  ```\\n\\n- 關聯屬性：當 model 被轉化為 JSON 的時候，他加載的關聯關係也將自動轉化為 JSON 對象被包含進來，同時透過小駝峰定義的關聯方式，關聯的 JSON 屬性將會是蛇底式命名。\\n\\n### 隱藏 JSON 屬性\\n\\n> 有時需要將 model array 或 JSON 中某些屬性進行隱藏，如：密碼。\\n\\n- `$hidden`\\n\\n  ```php\\n  namespace App\\\\Models;\\n\\n  use Illuminate\\\\Database\\\\Eloquent\\\\Model;\\n\\n  class User extends Model\\n  {\\n      /**\\n       * 数组中的属性会被隐藏\\n       *\\n       * @var array\\n       */\\n      protected $hidden = ['password'];\\n  }\\n  ```\\n\\n- `$visible` 定義一個 model array 和 JSON 可見的白名單。經過定義後，序列化此 model 不會出現白名單以外的屬性。\\n\\n  ```php\\n  namespace App\\\\Models;\\n\\n  use Illuminate\\\\Database\\\\Eloquent\\\\Model;\\n\\n  class User extends Model\\n  {\\n      /**\\n       * 数组中的属性会被展示\\n       *\\n       * @var array\\n       */\\n      protected $visible = ['first_name', 'last_name'];\\n  }\\n  ```\\n\\n#### 臨時修改屬性可見度\\n\\n- `makeVisible`\\n\\n  ```php\\n  return $user->makeVisitable('attribute')->toArray();\\n  ```\\n\\n- `makeHidden`\\n\\n  ```php\\n  return $user->makeHidden('attribute')->toArray();\\n  ```\\n\\n### 追加 JSON 值\\n\\n> 在 array 或是 JSON 中添加一些不存在於資料庫的欄位。\\n\\n定義 `getAttribute`\\n\\n```php\\nnamespace App\\\\Models;\\n\\nuse Illuminate\\\\Database\\\\Eloquent\\\\Model;\\n\\nclass User extends Model\\n{\\n    /**\\n     * Get the administrator flag for the user.\\n     *\\n     * @return bool\\n     */\\n    public function getIsAdminAttribute()\\n    {\\n        return $this->attributes['admin'] === 'yes';\\n    }\\n}\\n```\\n\\n然後在 model 中宣告屬性 `appends`。\\n\\n```php\\nnamespace App\\\\Models;\\n\\nuse Illuminate\\\\Database\\\\Eloquent\\\\Model;\\n\\nclass User extends Model\\n{\\n    /**\\n     * The accessors to append to the model's array form.\\n     *\\n     * @var array\\n     */\\n    protected $appends = ['is_admin'];\\n}\\n```\\n\\n- **Notice:** 在`getAttribute`中使用駝峰命名，但在宣告屬性時，通常以蛇底式命名。\\n\\n宣告 `append` 追加屬性後，其將會被包含在 model array 和 JSON 中。追加屬性也會遵循 model 宣告的`visible`及`hidden`屬性。\\n\\n#### 臨時追加屬性\\n\\n可以在單一 model 實例，使用`append`方法蘭追加屬性。或者使用`setAppends`方法來重寫追加屬性的陣列。\\n\\n```php\\nreturn $user->append('is_admin')->toArray();\\n\\n// 重寫整個追加屬性的陣列\\nreturn $user->setAppends(['is_admin'])->toArray();\\n```\\n\\n### 日期序列化\\n\\n- `serializeDate` 此方法可自訂預設的日期序列化格式\\n\\n```php\\n/**\\n * 為array / JSON 序列化準備一個日期\\n *\\n * @param  \\\\DateTimeInterface  $date\\n * @return string\\n */\\nprotected function serializeDate(DateTimeInterface $date)\\n{\\n    return $date->format('Y-m-d');\\n}\\n```\\n\\n#### 自訂任意屬性的日期格式\\n\\n可以在 Eloquent 宣告屬性轉換，單獨為資料庫中為日期屬性的欄位定義其格式\\n\\n```php\\nprotected $casts = [\\n    'birthday' => 'date:Y-m-d',\\n    'joined_at' => 'datetime:Y-m-d H:00',\\n];\\n```\\n\\n## 刪除\\n\\n### 普通刪除\\n\\n```php\\n$contact = Contact::find(5);\\n$contact->delete();\\n```\\n\\n透過 id 刪除\\n\\n```php\\nContact::destroy(1);\\n// or\\nContact::destroy([1, 5, 7]);\\n```\\n\\n刪除查詢結果\\n\\n```php\\nContact::where('updated_at', '<', now()->subYear())->delete();\\n```\\n\\n### 軟刪除\\n\\n> 透過在資料表中增加一個 delete_at 的欄位，來標記要刪除的資料，而不是直接將資料刪除。\\n>\\n> 優點：刪除的資料可以被復原、可以記錄資料刪除的時間點。\\n>\\n> 缺點：中間表無法使用軟刪除、需要定時清理軟刪除的資料，以免資料庫日益肥大。\\n\\n#### 啟用軟刪除\\n\\n將 `Illuminate\\\\Database\\\\Eloquent\\\\SoftDeletes` Trait 加到 Model 上\\n\\n```php\\n<?php\\n\\nnamespace App\\\\Models;\\n\\nuse Illuminate\\\\Database\\\\Eloquent\\\\Model;\\nuse Illuminate\\\\Database\\\\Eloquent\\\\SoftDeletes;\\n\\nclass Flight extends Model\\n{\\n    use SoftDeletes;\\n}\\n```\\n\\n利用 migration 將 delete_at 欄位加入資料表\\n\\n```php\\nuse Illuminate\\\\Database\\\\Schema\\\\Blueprint;\\nuse Illuminate\\\\Support\\\\Facades\\\\Schema;\\n\\npublic function up() {\\n    Schema::table('flights', function (Blueprint $table) {\\n        $table->softDeletes();\\n    });\\n}\\n\\npublic function down() {\\n    Schema::table('flights', function (Blueprint $table) {\\n        $table->dropSoftDeletes();\\n    });\\n}\\n```\\n\\n當在 model 上呼叫 delete 方法時，會自動更新 delete_at 欄位，並設為當前時間。\\n\\n#### 軟刪除應用\\n\\n- 判斷是否已被軟刪除\\n\\n  ```php\\n  if ($flight->trashed()) {\\n      //\\n  }\\n  ```\\n\\n- 恢復軟刪除\\n\\n  ```php\\n  $flight->restore();\\n\\n  // 恢復多個\\n  Flight::withTrashed()\\n      ->where('airline_id', 1)\\n      ->restore();\\n  ```\\n\\n  - 永久刪除 model\\n\\n  ```php\\n  $flight->forceDelete();\\n  ```\\n\\n- 查詢軟刪除的 model\\n\\n  - 包含軟刪除的 model\\n\\n    ```php\\n    use App\\\\Models\\\\Flight;\\n\\n    $flights = Flight::withTrashed()\\n                    ->where('account_id', 1)\\n                    ->get();\\n    ```\\n\\n  - 只取得被刪除的 model\\n\\n    ```php\\n    $flights = Flight::onlyTrashed()\\n                    ->where('airline_id', 1)\\n                    ->get();\\n    ```\\n\\n#### 實現中間表的軟刪除\\n\\n> 一般不建議對 pivot 進行軟刪除。\\n\\n在 pivot 表，添加一個 bool 欄位，ex: is_deleted。\\n\\n- `updateExistingPivot()` 此方法可以修改這欄位\\n- `wherePivot('is_deleted', true)` 可以篩選數據\\n\\n```php\\nBook::find(1)->buyers()->wherePivot('is_deleted', true)->get()\\n\\nBook::find(1)->buyers()->updateExistingPivot(11, ['is_deleted' => false])\\n```\\n\\n或者在關聯中，定義兩者的關係\\n\\n```PHP\\nfunction buyers() {\\n    return $this->belongToMany('App\\\\User')->wherePivot('is_deleted', false);\\n}\\n\\nfunction buyersWithDeleted() {\\n    return $this->belongToMany('App\\\\User');\\n}\\n```\\n\\n#### 清除舊的軟刪除資料\\n\\n[參考資料](https://github.com/tighten/quicksand)\\n\",\"tocContent\":\"- [Laravel Eloquent ORM](#laravel-eloquent-orm)\\n  - [models](#models)\\n    - [建立 Model](#建立-model)\\n    - [基本屬性](#基本屬性)\\n  - [關聯](#關聯)\\n    - [多型態關聯](#多型態關聯)\\n      - [多形一對一關聯](#多形一對一關聯)\\n      - [多型一對多關聯](#多型一對多關聯)\\n      - [多型多對多關聯](#多型多對多關聯)\\n      - [自訂多型型別](#自訂多型型別)\\n  - [Laravel ORM 將資料存至資料庫](#laravel-orm-將資料存至資料庫)\\n    - [save](#save)\\n    - [修改多對多中間表](#修改多對多中間表)\\n  - [ORM N+1](#orm-n1)\\n    - [什麼是 N+1](#什麼是-n1)\\n    - [解決 N+1 的問題](#解決-n1-的問題)\\n  - [序列化](#序列化)\\n    - [將 collection 序列化](#將-collection-序列化)\\n      - [array](#array)\\n      - [JSON](#json)\\n    - [隱藏 JSON 屬性](#隱藏-json-屬性)\\n      - [臨時修改屬性可見度](#臨時修改屬性可見度)\\n    - [追加 JSON 值](#追加-json-值)\\n      - [臨時追加屬性](#臨時追加屬性)\\n    - [日期序列化](#日期序列化)\\n      - [自訂任意屬性的日期格式](#自訂任意屬性的日期格式)\\n  - [刪除](#刪除)\\n    - [普通刪除](#普通刪除)\\n    - [軟刪除](#軟刪除)\\n      - [啟用軟刪除](#啟用軟刪除)\\n      - [軟刪除應用](#軟刪除應用)\\n      - [實現中間表的軟刪除](#實現中間表的軟刪除)\\n      - [清除舊的軟刪除資料](#清除舊的軟刪除資料)\"}")},47:function(n){"use strict";n.exports=JSON.parse("{\"name\":\"Laravel Excel.md\",\"content\":\"# Laravel Excel\\n\\n> 使用套件：\\n>\\n> - maatwebsite/Excel 3.1\\n>\\n> 環境要求：\\n>\\n> - PHP `^7.0`\\n>\\n> - Laravel `^5.5`\\n>\\n> 參考資料：\\n>\\n> - [maatwebsite/Excel 3.1 使用教程 （导入篇）](https://learnku.com/articles/32400)\\n>\\n> - [maatwebsite/Excel 3.1 使用教程 （导出篇）](https://learnku.com/articles/32391)\\n\\n## 安裝\\n\\n```bash\\ncomposer require maatwebsite/excel\\n```\\n\\n## excel 匯出\\n\\n建立匯出文件，匯入匯出的業務盡量不要和原來的業務耦合\\n\\n```bash\\nphp artisan make:export UserExport --model=User\\n```\\n\\n在 app 目錄下建立 Export 資料夾\\n\\n- UserExport.php\\n\\n```php\\nnamespace App\\\\Exports;\\n\\nuse App\\\\User;\\nuse Maatwebsite\\\\Excel\\\\Concerns\\\\FromCollection;\\n\\nclass UsersExport implements FromCollection\\n{\\n    protected $data;\\n\\n    public function __construct($data)\\n    {\\n        $this->data = $data;\\n    }\\n\\n    // 陣列轉集合\\n    public function collection()\\n    {\\n        return new Collection($this->createData());\\n    }\\n\\n    // 商業邏輯\\n    public function createData()\\n    {\\n      // to-do\\n    }\\n}\\n```\\n\\n- UserController.php\\n\\n```php\\nuse App\\\\Exports\\\\UsersExport;\\nuse Maatwebsite\\\\Excel\\\\Facades\\\\Excel;\\nuse App\\\\Http\\\\Controllers\\\\Controller;\\n\\nclass UsersController extends Controller\\n{\\n    public function export()\\n    {\\n        return Excel::download(new UsersExport, 'users.xlsx');\\n    }\\n}\\n```\\n\\n### 欄位格式化：設定儲存格格式\\n\\n```php\\nuse PhpOffice\\\\PhpSpreadsheet\\\\Style\\\\NumberFormat;\\nuse Maatwebsite\\\\Excel\\\\Concerns\\\\WithColumnFormatting;\\n\\n// 新增 WithColumnFormatting\\nclass UsersExport implements FromCollection, WithColumnFormatting\\n{\\n    public function columnFormats(): array\\n    {\\n        return [\\n            'B' => NumberFormat::FORMAT_DATE_DDMMYYYY, // 日期\\n            'C' => NumberFormat::FORMAT_NUMBER_00, // 取到小數點第二位\\n        ];\\n    }\\n}\\n```\\n\\n### 自動欄寬\\n\\n```php\\nuse Maatwebsite\\\\Excel\\\\Concerns\\\\ShouldAutoSize;\\n\\n// 新增 ShouldAutoSize\\nclass UsersExport implements FromCollection, ShouldAutoSize\\n```\\n\\n### 匯出多個工作表(sheet)\\n\\n匯出多個表需要兩步驟，先組裝 sheet，後建立對應的 sheet 表。\\n\\n```php\\nuse Maatwebsite\\\\Excel\\\\Concerns\\\\Exportable;\\nuse Maatwebsite\\\\Excel\\\\Concerns\\\\WithMultipleSheets;\\n\\n// 新增 WithMultipleSheets\\nclass UsersExport implements WithMultipleSheets\\n{\\n    use Exportable;\\n\\n    protected $year;\\n\\n    public function __construct(int $year)\\n    {\\n        $this->year = $year;\\n    }\\n\\n    /**\\n     * @return array\\n     */\\n    public function sheets(): array\\n    {\\n        $sheets = [];\\n\\n        for ($month = 1; $month <= 12; $month++) {\\n            // 不同的資料可以呼叫不同的方法\\n            $sheets[] = new UserPerMonthSheet($this->year, $month);\\n        }\\n\\n        return $sheets;\\n    }\\n}\\n```\\n\\n然後新增 UserPerMonthSheet Class\\n\\n```php\\nnamespace App\\\\Exports;\\n\\nuse Maatwebsite\\\\Excel\\\\Concerns\\\\FromQuery;\\nuse Maatwebsite\\\\Excel\\\\Concerns\\\\WithTitle;\\n\\nclass UserPerMonthSheet implements FromQuery, WithTitle\\n{\\n    private $month;\\n    private $year;\\n\\n    public function __construct(int $year, int $month)\\n    {\\n        $this->month = $month;\\n        $this->year  = $year;\\n    }\\n\\n    /**\\n     * @return Builder\\n     */\\n    public function query()\\n    {\\n        return User\\n            ::query()\\n            ->whereYear('created_at', $this->year)\\n            ->whereMonth('created_at', $this->month);\\n    }\\n\\n    /**\\n     * sheet 工作表名稱\\n     * @return string\\n     */\\n    public function title(): string\\n    {\\n        return 'Month ' . $this->month;\\n    }\\n}\\n```\\n\\n### 事件模組：設定儲存格高度、垂直置中、字體顏色、背景顏色\\n\\n提供多種事件：BeforeExport, BeforeWriting, BeforeSheet, AfterSheet 等等，修改儲存格使用 AfterSheet\\n\\n```php\\nnamespace App\\\\Exports;\\n\\nuse Maatwebsite\\\\Excel\\\\Concerns\\\\WithEvents;\\nuse Maatwebsite\\\\Excel\\\\Events\\\\BeforeExport;\\nuse Maatwebsite\\\\Excel\\\\Events\\\\BeforeWriting;\\nuse Maatwebsite\\\\Excel\\\\Events\\\\BeforeSheet;\\n\\nclass UserExport implements WithEvents\\n{\\n    /**\\n     * 註冊事件\\n     * @return array\\n     */\\n    public function registerEvents(): array\\n    {\\n        return [\\n            AfterSheet::class  => function(AfterSheet $event) {\\n                // 作者\\n                $event->writer->setCreator('Patrick');\\n                // 列寬\\n                $event->sheet->getDelegate()->getColumnDimension('A')->setWidth(50);\\n                // 行高，$i 為資料行數\\n                for ($i = 0; $i<=1265; $i++) {\\n                    $event->sheet->getDelegate()->getRowDimension($i)->setRowHeight(50);\\n                }\\n                // 垂直置中\\n                $event->sheet->getDelegate()->getStyle('A1:K1265')->getAlignment()->setVertical('center');\\n                // 字體、顏色、背景，詳細設定查看 applyFromArray 方法\\n                $event->sheet->getDelegate()->getStyle('A1:K6')->applyFromArray([\\n                    'font' => [\\n                        'name' => 'Arial',\\n                        'bold' => true,\\n                        'italic' => false,\\n                        'strikethrough' => false,\\n                        'color' => [\\n                            'rgb' => '808080'\\n                        ]\\n                    ],\\n                    'fill' => [\\n                        'fillType' => 'linear', // 漸層效果\\n                        'rotation' => 45, // 漸層角度\\n                        'startColor' => [\\n                            'rgb' => '000000' // 起始顏色\\n                        ],\\n                        // 結束顏色\\n                        'endColor' => [\\n                            'argb' => 'FFFFFF'\\n                        ]\\n                    ]\\n                ]);\\n                // 合併儲存格 mergeCells('A1:B1')\\n                $event->sheet->getDelegate()->mergeCells('A1:B1');\\n            }\\n        ];\\n    }\\n}\\n```\\n\\n### 搭配 vue 前端\\n\\n> 參考資料\\n>\\n> [Day17 使用 Laravel Excel 來匯出資料](https://ithelp.ithome.com.tw/articles/10302013)\\n\\n## excel 匯入\\n\",\"tocContent\":\"\"}")},7499:function(n){"use strict";n.exports=JSON.parse("{\"name\":\"Laravel HTTP Client.md\",\"content\":\"# laravel HTTP Client\\n\\n> laravel 透過 Guzzle 這個套件，模擬 http client 來發送 request\\n> 預設情況下，laravel 已經自動包含了這個套件。\\n> 若尚未安裝，可透過 composer 再安裝一次。\\n>\\n> ```bash\\n> composer require guzzlehttp/guzzle\\n> ```\\n\\n## 建立 request\\n\\n建立基礎的 GET request\\n\\n```php\\nuse Illuminate\\\\Support\\\\Facades\\\\Http;\\n\\n$response = Http::get('http://example.com');\\n```\\n\\n可以直接將查詢字串(query string)加到 URL 上，或是傳入一組索引鍵/值配對的陣列作為 get 的第二個引數\\n\\n```php\\n$response = Http::get('http://example.com/users', [\\n    'name' => 'Taylor',\\n    'page' => 1,\\n]);\\n```\\n\\nget 方法會回傳 Illuminate\\\\Http\\\\Client\\\\Response 的實體，該實體提供了許多用來取得 Response 資訊的方法：\\n\\n```php\\n$response->body() : string;\\n$response->json($key = null) : array|mixed;\\n$response->object() : object;\\n$response->collect($key = null) : Illuminate\\\\Support\\\\Collection;\\n$response->status() : int;\\n$response->ok() : bool;\\n$response->successful() : bool;\\n$response->redirect(): bool;\\n$response->failed() : bool;\\n$response->serverError() : bool;\\n$response->clientError() : bool;\\n$response->header($header) : string;\\n$response->headers() : array;\\n```\\n\\nPOST PUT PATCH 等 HTTP action 傳送額外資料，一般情況下，資料會使用 json 的資料型別來傳遞\\n\\n```php\\nuse Illuminate\\\\Support\\\\Facades\\\\Http;\\n\\n$response = Http::post('http://example.com/users', [\\n    'name' => 'Steve',\\n    'role' => 'Network Administrator',\\n]);\\n```\\n\\n若想用 x-www-form-urlencoded 來傳送資料，要在建立 request 前呼叫 asForm() 方法\\n\\n```php\\n$response = Http::asForm()->post('http://example.com/users', [\\n    'name' => 'Sara',\\n    'role' => 'Privacy Consultant',\\n]);\\n```\\n\\n## 錯誤處理\\n\\nlaravel HTTP client 不會在 client 端或是 server 端錯誤時拋出異常(status code 400 or 500)。\\n\\n此時可以透過 successful, clientError 或是 serverError 方法來判斷是否發生錯誤。\\n\\n```php\\n// 若 status code 在200 ~ 300\\n$response->successful();\\n\\n// 若 status code 大於 400\\n$response->failed();\\n\\n// 若 status code 為400層級的錯誤\\n$response->clientError();\\n\\n// 若 status code 為500層級的錯誤\\n$response->serverError();\\n```\\n\",\"tocContent\":\"\"}")},7028:function(n){"use strict";n.exports=JSON.parse('{"name":"Laravel Middleware.md","content":"# [Laravel Middleware](https://learnku.com/docs/laravel/8.x/middleware/9366)\\n\\n## 定義 middleware\\n\\n```bash\\nphp artisan make:middleware CheckAge\\n```\\n\\n在 `app/Http/Middleware` 目錄之下產生一個新的 CheckAge class，並在其中建立規則：僅允許 `age` 參數大於 200 的請求路徑進行訪問，否則將重新導向至 `home` 頁面\\n\\n```php\\nnamespace App\\\\Http\\\\Middleware;\\n\\nuse Closure;\\n\\nclass CheckAge\\n{\\n    /**\\n     * 处理传入的请求\\n     *\\n     * @param  \\\\Illuminate\\\\Http\\\\Request  $request\\n     * @param  \\\\Closure  $next\\n     * @return mixed\\n     */\\n    public function handle($request, Closure $next)\\n    {\\n        if ($request->age <= 200) {\\n            return redirect(\'home\');\\n        }\\n\\n        return $next($request);\\n    }\\n}\\n```\\n\\n可以設定 middleware 的動作是在 request 之前或是之後\\n\\n```php\\n// 在request 之前\\nclass BeforeMiddleware\\n{\\n    public function handle($request, Closure $next)\\n    {\\n        // Perform action\\n\\n        return $next($request);\\n    }\\n}\\n\\n// 在request 之後\\nclass AfterMiddleware\\n{\\n    public function handle($request, Closure $next)\\n    {\\n        $response = $next($request);\\n\\n        // Perform action\\n\\n        return $response;\\n    }\\n}\\n```\\n\\n## 註冊 Middleware\\n","tocContent":""}')},2692:function(n){"use strict";n.exports=JSON.parse("{\"name\":\"Laravel Migration & Seeder & Factory.md\",\"content\":\"# Laravel Migration & Seeder & Factory\\n\\n>\\n\\n## Migration\\n\\n### 產生 Migration 檔案\\n\\n```cmd\\nphp artisan make:migration create_your_table\\n```\\n\\n- 產生出來的 Migration 檔案，內有 up() 和 down() 兩個方法。\\n\\n```php\\n    public function up()\\n    {\\n        Schema::create('room_user', function (Blueprint $table) {\\n            $table->id();\\n            $table->unsignedBigInteger('user_id');\\n            $table->bigInteger('parent_id')->comment('將此成員加入系統的使用者');\\n            $table->unsignedBigInteger('room_id')->nullable();\\n            $table->bigInteger('role_id')->comment('使用者身分');\\n            $table->timestamps();\\n        });\\n\\n        Schema::table('room_user', function (Blueprint $table) {\\n            $table->foreign('user_id')\\n                ->references('id')\\n                ->on('users')\\n                ->onDelete('cascade');\\n            $table->foreign('room_id')\\n                ->references('id')\\n                ->on('rooms')\\n                ->nullOnDelete();\\n        });\\n    }\\n\\n    /**\\n     * Reverse the migrations.\\n     *\\n     * @return void\\n     */\\n    public function down()\\n    {\\n        Schema::table('room_user', function (Blueprint $table) {\\n            $table->dropForeign('room_user_user_id_foreign');\\n        });\\n        Schema::dropIfExists('model_has_user');\\n    }\\n```\\n\\n### 執行 Migrate\\n\\n```cmd\\nphp artisan migrate\\n```\\n\\n### 還原 Migrate\\n\\n- 實際上他會實作 down() ，並將資料表內的資料刪掉。\\n\\n```cmd\\nphp artisan migrate:rollback\\nphp artisan migrate:rollback --step=5 // 還原最後 5 個 Migration\\n```\\n\\n- 如果今天將 down() 註解掉，一樣會進行 Migrate 刪除 table 中的資料，但不會刪除資料表。\\n\\n### 重置 Migration\\n\\n```cmd\\n//重置所有 Migration\\nphp artisan migrate:refresh\\n\\n//重置所有 Migration 並同時建立資料\\nphp artisan migrate:refresh --seed\\n```\\n\\n## [Seed](https://ithelp.ithome.com.tw/articles/10216376)\\n\\n### 產生 Seeder 檔案\\n\\n```cmd\\nphp artisan make:seed PersonTableSeeder\\n```\\n\\n此時會多出一個檔案`database/seeds/PersonTableSeeder.php`，\\n在`database/seeds/DatabaseSeeder.php`中，修改要呼叫的 Seeder：\\n\\n```php=\\n$this->call([\\n    PersonTableSeeder::class\\n]);\\n```\\n\\n執行 Seeder 時會呼叫 seeder 類別裡預設的 run() 方法。\\n\\n在`PersonTableSeeder.php`中加入要產生的資料。\\n\\n```php=\\npublic function run()\\n    {\\n        DB::table('users')->insert([\\n            'last_name' => str_random(10),\\n            'email' => str_random(10).'@gmail.com',\\n            'password' => bcrypt('secret'),\\n        ]);\\n    }\\n```\\n\\n也可以使用模型工廠 factory 來大量生產資料。\\n\\n```php=\\nfactory(App\\\\Person::class, 50)->create();\\n// 使用 Person 的 factory\\n```\\n\\n### 執行 Seeder\\n\\n用`--class`來指定特定的 Seeder Class\\n\\n```cmd\\nphp artisan db:seed\\n\\nphp artisan db:seed --class=UsersTableSeeder\\n```\\n\\n## [Factory](https://learnku.com/docs/laravel/10.x/eloquent-factories/14894)\\n\\n> [深入了解 Faker](https://learnku.com/laravel/t/62386)\\n\\n### 產生 Factory 檔案\\n\\n```cmd\\nphp artisan make:factory PersonFactory --model=Person\\n```\\n\\n`--model=Person`選項用在指定 Factory 創建的 model 名稱，將會為指定 model 產生 Factory 文件。\\n\\n到`/database/factories/PersonFactory.php`，設定要填充的資料欄位。\\n\\n```php\\n$factory->define(Person::class, function (Faker $faker) {\\n    return [\\n        'last_name' => $faker->lastName,\\n        'email'     => $faker->safeEmail,\\n        'password'  => $faker->password\\n    ];\\n});\\n```\\n\\n### 工廠物件實例化\\n\\n當定義好工廠物件後，可以使用 model 的 factory 的靜態方法將工廠物件實例化。\\n\\n```php\\nuse App\\\\Models\\\\User\\n\\n$user = User::factory()->make();\\n// 用 count 方法來建立多個模型集合\\n$user = User::factory()->count(3)->make();\\n// 調用工廠物件中定義的狀態\\n$user = User::factory()->count(3)->suspended()->make();\\n```\\n\\n\\n\\n### [Faker Formatters](https://github.com/fzaninotto/Faker#formatters)\\n\\n- Faker 使用中文\\n\\n在 config\\\\app.php 下新增一行，指定 Faker 使用 zh_TW 語言\\n\\n```php=\\n'faker_locale' => 'zh_TW',\\n```\\n\",\"tocContent\":\"- [Laravel Migration \\\\& Seeder \\\\& Factory](#laravel-migration--seeder--factory)\\n  - [Migration](#migration)\\n    - [產生 Migration 檔案](#產生-migration-檔案)\\n    - [執行 Migrate](#執行-migrate)\\n    - [還原 Migrate](#還原-migrate)\\n    - [重置 Migration](#重置-migration)\\n  - [Seed](#seed)\\n    - [產生 Seeder 檔案](#產生-seeder-檔案)\\n    - [執行 Seeder](#執行-seeder)\\n  - [Factory](#factory)\\n    - [產生 Factory 檔案](#產生-factory-檔案)\\n    - [Faker Formatters](#faker-formatters)\"}")},7609:function(n){"use strict";n.exports=JSON.parse("{\"name\":\"Laravel Request.md\",\"content\":\"# Laravel Request\\n\\n## 抽取表單驗證\\n\\n使用 request class 將表單驗證邏輯從 controller 中抽出\\n\\n1. 建立 Request class\\n\\n   ```bach\\n       php artisan make:request RegisterRequest\\n       php artisan make:request LoginRequest\\n       php artisan make:request ShowUsersRequest\\n       php artisan make:request UpdateUserRequest\\n   ```\\n\\n2. 在 request class 中建立驗證邏輯\\n\\n   ```php\\n       <?php\\n\\n       namespace App\\\\Http\\\\Requests;\\n\\n       use Illuminate\\\\Foundation\\\\Http\\\\FormRequest;\\n\\n       class RegisterRequest extends FormRequest\\n       {\\n           public function authorize()\\n           {\\n               return true;\\n           }\\n\\n           public function rules()\\n           {\\n               return [\\n                   'name' => 'required|string|max:255',\\n                   'email' => 'required|string|email|unique:users,email',\\n                   'password' => 'required|string|min:8',\\n               ];\\n           }\\n       }\\n\\n   ```\\n\\n3. 更新 controller\\n\\n   ```php\\n       <?php\\n\\n       namespace App\\\\Http\\\\Controllers;\\n\\n       use App\\\\Http\\\\Requests\\\\RegisterRequest;\\n       use App\\\\Http\\\\Requests\\\\LoginRequest;\\n       use App\\\\Http\\\\Requests\\\\ShowUsersRequest;\\n       use App\\\\Http\\\\Requests\\\\UpdateUserRequest;\\n       use Illuminate\\\\Support\\\\Facades\\\\Cache;\\n       use Illuminate\\\\Support\\\\Facades\\\\Hash;\\n       use App\\\\Models\\\\User;\\n       use App\\\\Models\\\\Wallet;\\n\\n       class UserController extends Controller\\n       {\\n            public function register(RegisterRequest $request)\\n           {\\n               $validatedData = $request->validated();\\n\\n               $user = User::create([\\n                   'name' => $validatedData['name'],\\n                   'email' => $validatedData['email'],\\n                   'password' => Hash::make($validatedData['password']),\\n               ]);\\n\\n               $token = $user->createToken('authToken')->plainTextToken;\\n\\n               return response()->json([\\n                   'user' => $user,\\n                   'token' => $token,\\n               ], 201);\\n           }\\n\\n\\n           // ... 其他方法保持不變\\n       }\\n\\n   ```\\n\\n4. 集中多個請求的表單驗證\\n\\n   一般會建議依不同請求，個別建立單獨的 request class\\n\\n   ```bash\\n       php artisan make:request UserRequest\\n   ```\\n\\n5. 在此 request 中實現所有請求的驗證邏輯\\n\\n   ```php\\n       <?php\\n\\n       namespace App\\\\Http\\\\Requests;\\n\\n       use Illuminate\\\\Foundation\\\\Http\\\\FormRequest;\\n\\n       class UserRequest extends FormRequest\\n       {\\n           public function authorize()\\n           {\\n               return true;\\n           }\\n\\n           public function rules()\\n           {\\n               $method = $this->method();\\n               $action = $this->route()->getActionMethod();\\n\\n               switch($action) {\\n                   case 'register':\\n                       return [\\n                           'name' => 'required|string|max:255',\\n                           'email' => 'required|string|email|unique:users,email',\\n                           'password' => 'required|string|min:8',\\n                       ];\\n                   case 'login':\\n                       return [\\n                           'email' => 'required|string|email|exists:users,email',\\n                           'password' => 'required|string',\\n                       ];\\n                   case 'show':\\n                       return [\\n                           \\\"item_limit\\\" => \\\"nullable|integer|min:1|max:75\\\",\\n                           \\\"filter_params\\\" => \\\"nullable|array\\\",\\n                           \\\"filter_params.user_balance\\\" => \\\"nullable|integer\\\",\\n                       ];\\n                   case 'update':\\n                       return [\\n                           'name' => 'string|max:255',\\n                           'password' => 'string|min:8|nullable',\\n                       ];\\n                   default:\\n                       return [];\\n               }\\n           }\\n       }\\n   ```\\n\",\"tocContent\":\"\"}")},8992:function(n){"use strict";n.exports=JSON.parse('{"name":"Laravel Test.md","content":"# Laravel Test\\n\\n> Laravel 預設支援 PHPUnit 來進行測試\\n>\\n> 設定文件 phpunit.xml\\n>\\n> 在 test 資料夾中有兩個子資料夾\\n>\\n> Feature 功能測試是針對大面積的程式碼進行測試\\n>\\n> Unit 單元測試是針對單一方法單獨進行測試\\n\\n## 啟動測試\\n\\n建立測試文件\\n\\n```bash\\n// 在 feature 資料夾下建立一個測試的 class\\nphp artisan make:test UserTest\\n\\n// 在 unit 資料夾底下鍵立一個測試 class\\nphp artisan make:test UserTest --unit\\n```\\n\\n```php\\nnamespace Tests\\\\Unit;\\n\\nuse PHPUnit\\\\Framework\\\\TestCase;\\n\\nclass ExampleTest extends TestCase\\n{\\n    public function testBasicTest()\\n    {\\n        $this->assertTrue(true);\\n    }\\n}\\n```\\n\\n啟動測試\\n\\n```bash\\nphp artisan test\\n\\n// 指定要運行的特定測試類別\\nphp artisan test --filter ExampleTest\\n\\n// 運定特定的測試方法\\nphp artisan test --filter ExampleTest::testExample\\n\\n// 傳遞參數\\nphp artisan test --testsuite=Feature --stop-on-failure\\n```\\n","tocContent":""}')},3658:function(n){"use strict";n.exports=JSON.parse('{"name":"Laravel 中大型專案架構.md","content":"# Laravel 中大型專案架構\\n\\n> 參考資料：\\n>\\n> [Laravel 中大型專案架構](https://old-oomusou.goodjack.tw/laravel/architecture/)","tocContent":""}')},2773:function(n){"use strict";n.exports=JSON.parse("{\"name\":\"Laravel 事件.md\",\"content\":\"# Laravel 事件\\n\\n> Event 類別一般儲存在 app/Event 目錄下\\n> Listener 類別則存在 app/Listeners 目錄下\\n\\n## 註冊 Event 與 Listener\\n\\n首先在 laravel 專案中的 App\\\\Providers\\\\EventServiceProvider 註冊事件和監聽者\\n\\n- `$listen` 屬性是一個陣列，包含所有 `Event`(key) 和其 `listener`(value)\\n- 可以使用 `php artisan event:list` 來列出所有註冊的 `Event` 和 `listener`\\n\\n```php\\nnamespace App\\\\Providers;\\n\\nuse App\\\\Events\\\\OrderShipped;\\nuse App\\\\Listeners\\\\SendShipmentNotification;\\n\\n/**\\n * The event listener mappings for the application.\\n *\\n * @var array\\n */\\nprotected $listen = [\\n    OrderShipped::class => [\\n        SendShipmentNotification::class,\\n    ],\\n];\\n```\\n\\n### 產生 Event Listener\\n\\n在 EventServiceProvider 中註冊後，使用 artisan 指令，即可產生 EventServiceProvider 中已註冊但尚未生成的 Event 和 Listener\\n\\n```bash\\nphp artisan event:generate\\n```\\n\\n或者也可以分別建立 Event 和 Listener\\n\\n```bash\\nphp artisan make:event PodcastProcessed\\n\\nphp artisan make:listener SendPodcastNotification --event=PodcastProcessed\\n```\\n\\n此時會產生兩個文件，分別為：\\napp\\\\Events\\\\OrderShipped.php\\napp\\\\Listeners\\\\SendShipmentNotification.php\\n\\n### 手動註冊\\n\\n除了在 EventServiceProvider 的 class 中宣告 $listen 屬性外，也可以在 class 中的 boot() 方法手動註冊基於 class 或是匿名函數的 Listener\\n\\n```php\\nuse App\\\\Events\\\\PodcastProcessed;\\nuse App\\\\Listeners\\\\SendPodcastNotification;\\nuse Illuminate\\\\Support\\\\Facades\\\\Event;\\n\\n/**\\n * Register any other events for your application.\\n *\\n * @return void\\n */\\npublic function boot()\\n{\\n    Event::listen(\\n        PodcastProcessed::class,\\n        [SendPodcastNotification::class, 'handle']\\n    );\\n\\n    Event::listen(function (PodcastProcessed $event) {\\n        //\\n    });\\n}\\n```\\n\\n#### 一個 Listener 處理多個 Event\\n\\n使用 `*` 作為萬用字元參數來註冊 Listener，實現一個監聽者對應多個事件\\n\\n```php\\nEvent::listen('event.*', function ($eventName, array $data) {\\n    //\\n});\\n```\\n\\n- 此監聽者接收事件名作為第一個參數，並將整個事件數據，作為第二個參數\\n\\n### Event Discovery 事件發現\\n\\n啟用事件發現時，laravel 會搜尋專案的 `app/Listener` 目錄自動尋找並註冊事件與監聽器。  \\n此外，列在 `EventServiceProvider` 中有被正確定義的事件也會被註冊。\\n\\n在預設中，事件發現預設是關閉，可以在 `EventServiceProvider` 上複寫 `shouldDiscoverEvents()` 方法來啟用\\n\\n```php\\n/**\\n * Determine if events and listeners should be automatically discovered.\\n *\\n * @return bool\\n */\\npublic function shouldDiscoverEvents()\\n{\\n    return true;\\n}\\n```\\n\\n## 定義 Event\\n\\nEvent class 基本上就是一個資料容器，用來保存與該事件相關的資訊。\\n\\n假設有一個事件會接收 Eloquent ORM 的物件，`App\\\\Events\\\\OrderShipped`\\n\\n在 class 中加入 $order 屬性，並在建構子中加入 $this->order = $order\\n\\n```php\\n<?php\\n\\nnamespace App\\\\Events;\\n\\nuse App\\\\Models\\\\Order;\\nuse Illuminate\\\\Broadcasting\\\\InteractsWithSockets;\\nuse Illuminate\\\\Foundation\\\\Events\\\\Dispatchable;\\nuse Illuminate\\\\Queue\\\\SerializesModels;\\n\\nclass OrderShipped\\n{\\n    use Dispatchable, InteractsWithSockets, SerializesModels;\\n\\n    /**\\n     * The order instance.\\n     *\\n     * @var \\\\App\\\\Models\\\\Order\\n     */\\n    public $order;\\n\\n    /**\\n     * Create a new event instance.\\n     *\\n     * @param  \\\\App\\\\Models\\\\Order  $order\\n     * @return void\\n     */\\n    public function __construct(Order $order)\\n    {\\n        $this->order = $order;\\n    }\\n}\\n```\\n\\n- 在 Event class 中不包含邏輯，只作為已付款訂單 `App\\\\Models\\\\Order` 實體的容器\\n\\n## 定義 Listener\\n\\n事件監聽器會在 handle() 中接收 Event 實體，當使用 artisan 指定建立監聽器時，會自動載入相對應的 Event class，並在 handle() 做 Event 的型別提示\\n\\n```php\\n<?php\\n\\nnamespace App\\\\Listeners;\\n\\nuse App\\\\Events\\\\OrderShipped;\\n\\nclass SendShipmentNotification\\n{\\n    /**\\n     * Create the event listener.\\n     *\\n     * @return void\\n     */\\n    public function __construct()\\n    {\\n        //\\n    }\\n\\n    /**\\n     * Handle the event.\\n     *\\n     * @param  \\\\App\\\\Events\\\\OrderShipped  $event\\n     * @return void\\n     */\\n    public function handle(OrderShipped $event)\\n    {\\n        // Access the order using $event->order...\\n        // ex: dd($event->order);\\n    }\\n}\\n```\\n\\n### 停止事件的傳播\\n\\n若要停止將某個事件傳播到另一個監聽器上，只要在監聽器的 handle 方法是回傳 false 即可\\n\\n## 觸發事件\\n\\n將 order 物件傳入 controller，listener 的 handle 方法中可以拿到 event 中的 order 變數，後續就可以觸發事件的邏輯\\n\\n```php\\nnamespace App\\\\Http\\\\Controllers;\\n\\nuse App\\\\Models\\\\Order;\\nuse App\\\\Events\\\\OrderShipped;\\nuse App\\\\Http\\\\Controllers\\\\Controller;\\n\\nclass OrderController extends Controller\\n{\\n    public function ship() {\\n        $orderId = 1;\\n        $order = Order::findOrFail($orderId);\\n\\n        // 訂單出貨的邏輯\\n        // 觸發 event\\n        event(new OrderShipped($order));\\n\\n        return response()->json([\\n            'status' => 'success',\\n            'message' => ''\\n        ]);\\n    }\\n}\\n```\\n\\n## 分派 Event\\n\\n呼叫事件上的靜態方法 `dispatch` ，此方法由 `Illuminate\\\\Foundation\\\\Events\\\\Dispatchable` 提供\\n\\n任何傳入此方法的值，會被傳給 Event 的 Constructor\\n\\n```PHP\\n<?php\\n\\nnamespace App\\\\Http\\\\Controllers;\\n\\nuse App\\\\Events\\\\OrderShipped;\\nuse App\\\\Http\\\\Controllers\\\\Controller;\\nuse App\\\\Models\\\\Order;\\nuse Illuminate\\\\Http\\\\Request;\\n\\nclass OrderShipmentController extends Controller\\n{\\n    /**\\n     * Ship the given order.\\n     *\\n     * @param  \\\\Illuminate\\\\Http\\\\Request  $request\\n     * @return \\\\Illuminate\\\\Http\\\\Response\\n     */\\n    public function store(Request $request)\\n    {\\n        $order = Order::findOrFail($request->order_id);\\n\\n        // Order shipment logic...\\n\\n        OrderShipped::dispatch($order);\\n    }\\n}\\n```\\n\\n## 實作範例\\n\\n> [最簡單易懂的 laravel 事件，這個功能非常的有用](https://segmentfault.com/a/1190000010730545)\\n\\n### 情境\\n\\n在用戶註冊時，發送幫助電子郵件給用戶\\n\\n以下為原始的註冊方法\\n\\n```php\\nnamespace  App\\\\Htt\\\\Controllers;\\n\\nuse  Illuminate\\\\Http\\\\Request;\\n\\nclass  UserController  extends  Controller\\n {\\n     public  function  register ( Request $request )\\n     {\\n        //獲取參數\\n        //驗證參數\\n        //寫入資料庫\\n        //return 註冊信息\\n    }\\n}\\n```\\n\\n現在有一個需求，註冊成功之後，向用戶的電子信箱發送一個廣告\\n\\n```php\\nnamespace  App\\\\Htt\\\\Controllers;\\n\\nuse  Illuminate\\\\Http\\\\Request;\\n\\nclass  UserController  extends  Controller\\n {\\n     public  function  register ( Request $request )\\n     {\\n        //獲取參數\\n        //驗證參數\\n        //寫入資料庫\\n\\n        //發送廣告電子郵件\\n        //return 註冊信息\\n\\n    }\\n}\\n```\\n\\n此時再增加一個發送簡訊的需求\\n\\n```php\\nnamespace  App\\\\Htt\\\\Controllers;\\n\\nuse  Illuminate\\\\Http\\\\Request;\\n\\nclass  UserController  extends  Controller\\n {\\n     public  function  register ( Request $request )\\n     {\\n        //獲取參數\\n        //驗證參數\\n        //寫入資料庫\\n\\n        //發送廣告電子郵件\\n        //發送簡訊\\n        //return 註冊信息\\n    }\\n}\\n```\\n\\n接著又有新的需求：發送 IM 消息，雖然將許多的功能寫在一個 function 中很直觀，但當多人協作時，會產生各種不便。\\n\\n### 事件功能\\n\\nlaravel 事件功能實際上更傾向於一種管理手段 + 實現的體現。\\n\\n我們可以透過 laravel 事件功能，宏觀的看到所有的事件，而不需每次都要打開 controller 的方法才能知道註冊之後發生什麼事\\n\\n我們要在註冊之後作一系列事情，首先在註冊完之後調用一個事件，然後這個事件在做各式各樣的事。\\n\\n```php\\nnamespace  App\\\\Htt\\\\Controllers;\\n\\nuse  Illuminate\\\\Http\\\\Request;\\n //我們先引入一個事件類，名字自定義的，之後再一步一步創建\\nuse  App\\\\Events\\\\Register;\\n\\nclass  UserController  extends  Controller\\n {\\n     public  function  register ( Request $request )\\n     {\\n        // 獲取參數\\n        // 驗證參數\\n        // 寫入資料庫\\n        // 觸發事件，以後所有需要註冊後要做的事情，都不需要再這裡加代碼了，我們只需要管理事件就好了\\n        // event 方法是 laravel 自帶方法, $uid是外部參數，看你需要做什麼，傳什麼參數了。註冊之後肯定有 $uid 的嘛\\n        event ( new  Register ( $uid ));\\n        // return 註冊信息\\n\\n\\n    }\\n}\\n```\\n\\n找到 app\\\\Providers\\\\EventServiceProvider.php 文件，並加入關係\\n\\n```php\\nnamespace  App\\\\Providers;\\n\\nuse  Laravel\\\\Lumen\\\\Providers\\\\EventServiceProvider  as  ServiceProvider;\\n\\nclass  EventServiceProvider  extends  ServiceProvider\\n {\\n     /**\\n     * The event listener mappings for the application.\\n     *\\n     * @var array\\n     */\\n    protected  $listen = [\\n        // 用戶註冊後的事件\\n        'App\\\\Events\\\\Register' => [\\n            // 發送廣告電子郵件\\n            'App\\\\Listeners\\\\SendAdMail',\\n            // 發送簡訊\\n            'App\\\\Listeners\\\\SendSms',\\n            // 發送幫助信息\\n            'App\\\\Listeners\\\\SendHelpInformation',\\n        ],\\n    ];\\n}\\n```\\n\\n這是註冊事件的入口，相當於一個總目錄，這樣就可以跟註冊的程式碼，未來增加功能時，便不須再查看註冊方法的程式碼\\n\\n註冊完成後會觸發 App\\\\Events\\\\Register 類別，然後這個類會被 App\\\\Listeners\\\\SendAdMail, App\\\\Listeners\\\\SendSms, App\\\\Listeners\\\\SendHelpInformation 監聽到\\n\\n此時進入 App\\\\Events 目錄，建立 Register 這個 class\\n\\n```php\\nnamespace  App\\\\Events;\\n\\nclass  Register\\n {\\n\\n    public  $uid;\\n\\n    /**\\n     * 創建一個新的事件實例.\\n     *\\n     * @param   Order $order\\n     * @return void\\n     */\\n    public  function  __construct ( $uid )\\n     {\\n         $this ->uid = $uid;\\n    }\\n}\\n```\\n\\n接著在 app\\\\Listeners 目錄底下建立各種事件監聽 class\\n\\n```php\\nnamespace  App\\\\Listeners;\\n\\nuse  App\\\\Event\\\\Register;\\nuse  App\\\\Models\\\\User;\\nuse  Illuminate\\\\Contracts\\\\Queue\\\\ShouldQueue;\\n\\nclass  SendHelpInformation  implements  ShouldQueue\\n {\\n\\n\\n    public  function  __construct ()\\n    {\\n        //\\n    }\\n\\n\\n    public  function  handle ( Register $event )\\n    {\\n        $uid = $event ->uid;\\n\\n        $user = User :: find ( $uid );\\n\\n        //......各種實現\\n    }\\n}\\n```\\n\",\"tocContent\":\"\"}")},6712:function(n){"use strict";n.exports=JSON.parse('{"name":"Laravel 命名原則.md","content":"# laravel 命名原則\\n\\n- 對於類、介面/契約、特性：使用 大駝峰式「PascalCase」\\n- 對於常量：使用「TITLE_CASE」\\n- 對於函式/方法、類屬性和變數：使用 小駝峰式「camelCase」\\n- 對於陣列索引/資料庫欄位名/模型可填充項/模型關係：使用 蛇形命名法「lower_snake_case」\\n- 對於路由：使用 短橫線「lower-kebab-case」\\n\\n|                         |            命名方式             |                 範例                  |\\n| :---------------------: | :-----------------------------: | :-----------------------------------: |\\n|       Controller        |          單數、大駝峰           |            UserController             |\\n|          Route          |              複數               |              articles/1               |\\n| Named Route - 路由命名  |       使用點標記的蛇底式        |           users.show_active           |\\n|          Model          |              單數               |                 User                  |\\n| hasOne, belongTo 的關聯 |           單數/小駝峰           |            articleComment             |\\n|        其他關連         |           複數/小駝峰           |            articleComments            |\\n|         資料表          |           複數/蛇底式           |           article_comments            |\\n|   Pivot Table 中介表    | 以字母順序排列的單數 Model 名稱 |             article_user              |\\n|       資料表欄位        |    蛇底式/不包含 model 名稱     |              meta_title               |\\n|       model 屬性        |             蛇底式              |          $model->created_at           |\\n|   Foreign Key - 外鍵    | 以單數 Model 名稱後方加上 \\\\_id  |              article_id               |\\n|          方法           |             小駝峰              |                getAll                 |\\n|    測試類別中的方法     |             小駝峰              |       testGuestCannotSeeArticle       |\\n|          變數           |             小駝峰              |          $articlesWithAuthor          |\\n|       Collection        |         描述性名稱/複數         | $activeUsers = User::active()->get()  |\\n|          物件           |         描述性名稱/單數         | $activeUser = User::active()->first() |\\n| 設定檔及語系檔的索引鍵  |             蛇底式              |           articles_enabled            |\\n|          View           |           kebab-case            |        show-filtered.blade.php        |\\n|         設定檔          |             蛇底式              |          google_calendar.php          |\\n|     Contract (界面)     |          形容詞或名詞           |        AuthenticationInterface        |\\n|          trait          |             形容詞              |              Notifiable               |\\n","tocContent":""}')},564:function(n){"use strict";n.exports=JSON.parse("{\"name\":\"Laravel 學習筆記.md\",\"content\":\"# Laravel 學習筆記\\n\\n> 請先完成 laravel 環境設置\\n\\n>\\n\\n## 基礎建立\\n\\n- 建立新的專案\\n\\n  ```cmd\\n  laravel new ProjectName\\n  ```\\n\\n- 安裝指定本版\\n\\n  ```cmd\\n  composer create-project laravel/laravel=6.* ProjectName\\n  ```\\n\\n- 同時建立 migration controller model\\n\\n  ```cmd\\n  php artisan make:model New -mcr\\n  ```\\n\\n- 建立 Controller\\n\\n  - 控制器路徑 app/Http/controllers/NewController.php\\n  - 控制器名稱字首需大寫\\n\\n  ```cmd\\n  php artisan make:controller NewController\\n  ```\\n\\n- 啟動 Laravel 伺服器\\n\\n  ```cmd\\n  php artisan serve\\n  ```\\n\\n- 使用路由\\n\\n  ```php\\n  // routes/web.php\\n  Route::get('/home/news', \\\"App\\\\Http\\\\Controllers\\\\NewController@index\\\");\\n\\n  // app/Http/controllers/NewController.php\\n  public function index()\\n  {\\n    return \\\"<h1>OK</h1>\\\";\\n  }\\n  ```\\n\\n## 連線資料庫將資料顯示在畫面上\\n\\n### mysql\\n\\n- Laravel 資料庫設定檔 `.env`\\n\\n  ```php\\n  APP_NAME=Laravel        （專案的名稱）\\n  APP_ENV=local           （專案開發的環境，local / staging）\\n  APP_KEY=                (APP KEY)\\n  APP_DEBUG=true          （提供在瀏覽器中顯示詳細的錯誤訊息來進行debug）\\n  APP_URL=http://localhost（專案網址，EX. http://example.com，使用方法url()時便可取得該網址）\\n\\n  LOG_CHANNEL=stack\\n\\n  DB_CONNECTION=mysql (使用的資料庫)\\n  DB_HOST=127.0.0.1   (資料庫主機位置)\\n  DB_PORT=3306        (資料庫的埠號)\\n  DB_DATABASE=test    (資料庫名稱)\\n  DB_USERNAME=        （資料庫帳號）\\n  DB_PASSWORD=        （資料庫密碼）\\n  ```\\n\\n- 建立一個 model\\n\\n  - model 路徑 app/Models/News.php\\n\\n  ```cmd\\n  php artisan make:model News\\n  ```\\n\\n- Controller 參用 News model\\n\\n  ```php\\n  use App\\\\Models\\\\News;\\n  ```\\n\\n- 如何把陣列顯示在前台 (回傳`json`格式)\\n\\n  ```php\\n  public function index()\\n  {\\n    $dataList = News::all();\\n\\n    return json_encode($dataList);\\n  }\\n  ```\\n\\n- 接收 `Route::post` 的路由接引到 `store(`) 完成資料庫的新增\\n\\n  ```php\\n  Route::post('/home/news', \\\"App\\\\Http\\\\Controllers\\\\NewController@store\\\");\\n  ```\\n\\n### redis\\n\\n> 需先在環境安裝 redis\\n\\n- 安裝 `predis`\\n\\n  ```bash\\n  composer require predis/predis\\n  ```\\n\\n- redis 預設有 16 個資料庫，Laravel 會使用預設的資料庫`0`\\n- 修改 `env`\\n\\n  ```config\\n  REDIS_HOST=127.0.0.1\\n  REDIS_PASSWORD=null\\n  REDIS_PORT=6379\\n  REDIS_CLIENT=predis\\n  REDIS_PREFIX=\\\"\\\"\\n  ```\\n\\n- 使用方法\\n\\n  ```php\\n  use Illuminate\\\\Support\\\\Facades\\\\Redis;\\n  Redis::set('name', 'Vic');\\n  Redis::get('name');\\n  ```\\n\\n- redis-cil\\n\\n  ```bash\\n  $ redis-cli\\n  $ select 0   //選擇資料庫0\\n  $ keys *     //列出所有keys\\n  $ get laravel_database_name  //取得key value\\n  ```\\n\\n- 須注意 laravel 預設的 redis key 會有 `laravel_database_` 這個前綴：`$ get laravel_database_${your_key}`。這個前綴設定可以在 `env` 中的 `REDIS_PREFIX` 修改\\n\\n## 新增一個 html 測試`input`到資料庫\\n\\n- 修改 controller\\n\\n  ```php\\n  store(Request $request){\\n    $newItem = new News();\\n    $newItem->title = $request->input(\\\"title\\\");\\n    $newItem->title = $request->input(\\\"ymd\\\");\\n    $newItem->save();\\n\\n    return \\\"進來了\\\";\\n  }\\n  ```\\n\\n- 修改 `VerifyCsrfToken.php`，先略過資料傳送的資安問題\\n\\n  - 路徑 `/home` 底下都先忽略\\n\\n  ```php\\n  protected $except = [\\n    \\\"/home/*\\\"\\n  ];\\n  ```\\n\\n- 在 model 增加\\n\\n  ```php\\n  public $timestamps = false;\\n  // redirect => 重新導向\\n  ```\\n\\n### 將變數傳入 `view` 的三種方法\\n\\n1. with: 用於簡單傳遞變數，但不易擴充傳遞變數，所以不常用到\\n\\n   ```php\\n   $name = \\\"test\\\";\\n   $age = 23; \\n\\n   return view('my_laravel')->with('name', $name);\\n   // &\\n   return view('my_laravel')->with('name', $name)->with('age', $age);\\n\\n   // 用陣列包起來\\n   $data = [\\n     'name' = 'test',\\n     'age'  =26\\n   ];\\n\\n   return view('my_laravel')->with('data', $data);\\n\\n   // view\\n   {{ $data['name'] }}\\n   ```\\n\\n2. Array\\n\\n   ```php\\n   $data = [\\n     'name' => 'test',\\n     'age' => 26\\n   ]\\n\\n   return view('my_laravel', $data)\\n\\n   // view\\n   {{ $name }}\\n   ```\\n\\n3. compact\\n\\n   ```php\\n   // 常用於複雜變數，不用包裝成新的變數名稱\\n   $data = [\\n     'name' => 'test',\\n     'age' => 26\\n   ];\\n   $title = 'title';\\n\\n   return view('my_laravel', compact('data', 'title'));\\n\\n   // view\\n   {{ $data['name'] }}  // 因為在 data 陣列中 \\n   {{ $title }}  // 變數值直接使用\\n   ```\\n\\n## Controller\\n\\n### 生成 controller\\n\\n```bash\\nphp artisan make:controller NewController\\n```\\n\\n- `--resource`\\n\\n  ```bash\\n  php artisan make:controller function/NewController --resource\\n  ```\\n\\n  - 在`function/` 的目錄下，新增一個資源控制器\\n  - 生成`index()` `create()` `store()` `show()` `edit()` `update()` `destroy()`\\n\\n- `--api`\\n\\n  ```bash\\n  php artisan make:controller api/NewController --api\\n  ```\\n\\n  - 一般 api 控制器會新增在 Controller/api 的目錄之下\\n  - 生成`index()` `store()` `show()` `update()` `destroy()`，省略 `create()` `edit()` 方法\\n\\n### resource controller function\\n\\n- `index()`: 顯示所有資料的列表\\n\\n- `create()`: 顯示新增畫面\\n- `store()`: 新增資料\\n- `show()`: 顯示指定 id 的資料\\n- `edit()`: 顯示編輯的畫面\\n- `update()`: 更新資料\\n- `destroy()`: 刪除資料\\n\\n### controller 傳入參數\\n\\n一般參數\\n\\n```php\\npublic function show($id)\\n{\\n   return response()->json(New::find($id), 200);\\n}\\n```\\n\\n構造函數注入(Constructor Injection)\\n\\n```php\\npublic function show(New $new)\\n{\\n    return response()->json($new, 200);\\n}\\n```\\n\\n### 參數預設值\\n\\n當傳入 controller 的參數為空時，參數返回預設值。\\n\\n```php\\n// route/api.php:\\nRoute::post('new/{new?}', 'NewController@show');\\n\\n// NewController.php:\\nclass NewController extends Controller\\n{\\n    public function show($new = \\\"nothing news\\\")\\n    {\\n        // ...\\n    }\\n}\\n```\\n\\n## Route\\n\\nlaravel 中 route 有兩種:`routes/web.php` `routes/api.php`，分別為一般頁面和 api\\n\\n### route 基本寫法\\n\\n- 一般參數\\n\\n  ```php\\n  Route::get(‘new’, ‘api\\\\NewController@index’);\\n  Route::get(‘new/{id}’, ‘api\\\\NewController@show’);\\n  Route::post(‘new’, ‘api\\\\NewController@store’);\\n  Route::put(‘new/{id}’, ‘api\\\\NewController@update’);\\n  Route::delete(‘new/{id}’, ‘api\\\\NewController@destroy’);\\n  ```\\n\\n- 構造函數注入\\n\\n  ```php\\n  Route::get(‘new’, ‘api\\\\NewController@index’);\\n  Route::get(‘new/{new}’, ‘api\\\\NewController@show’);\\n  Route::post(‘new’, ‘api\\\\NewController@store’);\\n  Route::put(‘new/{new}’, ‘api\\\\NewController@update’);\\n  Route::delete(‘new/{new}’, ‘api\\\\NewController@destroy’);\\n  ```\\n\\n  - 第一個參數是對應的路徑，後面有`{}`代表傳入的參數\\n  - 第二個參數是對應的 controller @後面為 controller 內要呼叫的方法\\n\\n### resource controller 資源控制器\\n\\n```php\\nRoute::Resource('new', 'NewController');\\n\\n// api資源控制器\\nRoute::apiResource('new', 'api\\\\NewController');\\n```\\n\\n### route 分組\\n\\n- prefix: 前綴用來設定 URL 開始共同的部分。\\n\\n```php\\nRoute::prefix(\\\"new\\\")->group(function () {\\n    Route::get('view', 'NewController@show');\\n    Route::post('create', 'NewController@create');\\n    Route::put('update', 'NewController@edit');\\n    // ...\\n});\\n\\n```\\n\\n- namespace: 若要綁定的 controller 不在預設的 app/Http/Controller 裡，而是有更進一步的分類，可以設定 namespace()方便管理。\\n\\n```php\\n// app/Http/Controller/New\\nRoute::namespace(\\\"new\\\")->group(function () {\\n    Route::get('new/view/{id}', 'NewController@show');\\n    Route::post('new/create', 'NewController@create');\\n    Route::put('new/update', 'NewController@edit');\\n    // ...\\n});\\n```\\n\\n- middleware: laravel 進入 action 之前會先對 http request 進行檢查\\n\\n```php\\nRoute::middleware('adminonly')->group(function () {\\n    Route::get('new/create', 'NewController@create');\\n    Route::get('new/{id}/delete', 'NewController@delete');\\n    // ...\\n});\\n```\\n\\n## Laravel 功能實現\\n\\n### 儲存檔案並刪除舊檔\\n\\n```php\\npublic function updateProfile(Request $request)\\n{\\n  $user = auth()->user();\\n  // 表單驗證規則\\n  $validated = $this->validateUserProfile($request->all(), $user->id)->validate();\\n  if ($request->has('image')) {\\n    // 取得資料表中原始資料\\n    $originalData = User::find(auth()->user()->id)->getAttributes();\\n    if ($originalData['image']) {\\n      $filename = $originalData['image'];\\n      $storage = Storage::disk('upload');\\n      // 如果資料表中有紀錄，那就刪除檔案\\n      if ($storage->exists($filename)) {\\n        $storage->delete($filename);\\n      }\\n    }\\n    // 原始$request['image']的值為暫存路徑，現將其改為資料表中的路徑\\n    if ($request->hasFile('image')) {\\n      $validated['image'] = $request->file('image')->store('images/users', 'upload');\\n    }\\n  }\\n  $user->update($validated);\\n}\\n```\\n\\n## Class not found\\n\\n當出現 `Class 'xxx\\\\\\\\xxx\\\\\\\\xxx\\\\\\\\xxx' not found` 時，可能原因為 composer autoload 尚未註冊或是註冊錯誤。\\n\\n解決方法：\\n\\n- 方法一\\n\\n  ```terminal\\n  composer dump-autoload -o\\n  ```\\n\\n- 方法二\\n\\n  檢查 vendor/composer 下面的 autoload 資料夾中的檔案 autoload_classmap.php 和 autoload_static.php\\n\\n## 框架設計模式\\n\\n在小型專案中，典型的 MVC 架構沒什麼問題，但隨著系統越來越複雜，必須再細分更多層，於是衍生出 View - Presenter - Controller - Service - Repository - Model 六層框架設計模式。\\n\\n### 每一層的職責\\n\\n- Model 盡可能隱藏操作資料的 know-how，將資料抽象化，作為一個 Object Relational Mapping。\\n- Repository 藉由操作 Model，幫助 Service 實現各種商務邏輯對應的資料庫操作方法。\\n- Service 實現商務邏輯，並且讓 Controller 僅需要專注在溝通上。\\n- Controller 作為 View 與商務邏輯間的溝通橋樑。\\n- Presenter 負責 \\\"如何處理資料\\\"\\n- View 負責\\\"要給客戶看到什麼\\\"\\n\\n### MVC 框架\\n\\n> 參考資料：\\n>\\n> [Laravel 加入 Repository 與 Service](https://vocus.cc/article/5fa7fe49fd8978000125da22)\\n\\n若將這六個 layer 的職責對應到 MVC 框架中，小專案下的 model 其實就是 Business Model，包含商業邏輯以及和資料庫溝通。而 View 也不會刻意把資料操作邏輯與資料處理方式獨立成一個 Presenter，因此\\n小型專案的 View 往往混著一些邏輯判斷。\\n\\n- Model\\n  - Service\\n  - Repository\\n  - Model\\n- Controller\\n  - Controller\\n- View\\n  - View\\n  - Presenter\\n\\n### Web API Service\\n\\n通 Web API Service 僅僅是將 service 送來的資料變成 JSON format 輸出到 View 上，所以有時 Controller 就涵蓋了 Presenter 的職責，View 純粹只是 JSON, XML 等格式資料。\\n\\n- Model\\n  - Service\\n  - Repository\\n  - Model\\n- Controller\\n  - Presenter\\n  - Controller\\n- View\\n  - View\\n\",\"tocContent\":\"- [Laravel 學習筆記](#laravel-學習筆記)\\n  - [基礎建立](#基礎建立)\\n  - [連線資料庫將資料顯示在畫面上](#連線資料庫將資料顯示在畫面上)\\n    - [mysql](#mysql)\\n    - [redis](#redis)\\n  - [新增一個 html 測試`input`到資料庫](#新增一個-html-測試input到資料庫)\\n    - [將變數傳入 `view` 的三種方法](#將變數傳入-view-的三種方法)\\n  - [Controller](#controller)\\n    - [生成 controller](#生成-controller)\\n    - [resource controller function](#resource-controller-function)\\n    - [controller 傳入參數](#controller-傳入參數)\\n    - [參數預設值](#參數預設值)\\n  - [Route](#route)\\n    - [route 基本寫法](#route-基本寫法)\\n    - [resource controller 資源控制器](#resource-controller-資源控制器)\\n    - [route 分組](#route-分組)\\n  - [Laravel 功能實現](#laravel-功能實現)\\n    - [儲存檔案並刪除舊檔](#儲存檔案並刪除舊檔)\\n  - [Class not found](#class-not-found)\\n  - [框架設計模式](#框架設計模式)\\n    - [每一層的職責](#每一層的職責)\\n    - [MVC 框架](#mvc-框架)\\n    - [Web API Service](#web-api-service)\"}")},2596:function(n){"use strict";n.exports=JSON.parse("{\"name\":\"Laravel 實作權限.md\",\"content\":\"# Laravel 實作權限\\n\\n## Gates\\n\\n### 使用者角色\\n\\n將使用者區分為:\\n\\n- 系統管理者: admin\\n- 一般管理者: manager\\n- 一般使用者: user\\n\\n編輯`app/User.php`，加入帳號角色名稱常數，並將`role`欄位加入 `fillable` 中\\n\\n```php\\nclass User extends Authenticatable\\n{\\n    // ...\\n\\n    const ROLE_ADMIN = 'admin';\\n    const ROLE_MANAGER = 'manager';\\n    const ROLE_USER = 'user';\\n\\n    protected $fillable = [\\n        'name', 'email', 'password', 'role',\\n    ];\\n\\n    // ...\\n}\\n```\\n\\n### 資料庫 migration\\n\\n建立一個 `migration` 設定檔，在 `users` 資料表中加入儲存帳號角色的 `role` 欄位\\n\\n```php\\nclass AddRoleColumnToUsersTable extends Migration\\n{\\n    /**\\n     * Run the migrations.\\n     *\\n     * @return void\\n     */\\n    public function up()\\n    {\\n        Schema::table('users', function (Blueprint $table) {\\n            $table->string('role')->default(Admin::ROLE_USER);\\n        });\\n    }\\n\\n    /**\\n     * Reverse the migrations.\\n     *\\n     * @return void\\n     */\\n    public function down()\\n    {\\n        Schema::table('users', function (Blueprint $table) {\\n            $table->dropColumn('role');\\n        });\\n    }\\n}\\n```\\n\\n修改完成後，執行 migrate\\n\\n### 使用者註冊 Controller\\n\\n編輯`app/Http/Controllers/Auth/RegisterController.php`，設定使用者註冊時，預設角色為一般使用者\\n\\n```php\\nprotected function create(array $data)\\n{\\n    return User::create([\\n        'name' => $data['name'],\\n        'email' => $data['email'],\\n        'password' => Hash::make($data['password']),\\n        'role' => User::ROLE_USER,  // 預設為一般使用者\\n    ]);\\n}\\n```\\n\\n### 建立 Gate 規則權限\\n\\n編輯`app/Providers/AuthServiceProvider.php`，加入自訂的 Gates 規則\\n\\n```php\\nuse App\\\\User;\\n\\nclass AuthServiceProvider extends ServiceProvider\\n{\\n    // ..\\n\\n    public function boot()\\n    {\\n        $this->registerPolicies();\\n\\n        // 系統管理者 Gate 規則\\n        Gate::define('admin', function ($user) {\\n            return $user->role === User::ROLE_ADMIN;\\n        });\\n\\n        // 一般管理者 Gate 規則\\n        Gate::define('manager', function ($user) {\\n            return $user->role === User::ROLE_MANAGER;\\n        });\\n\\n        // 一般使用者 Gate 規則\\n        Gate::define('user', function ($user) {\\n            return $user->role === User::ROLE_USER;\\n        });\\n    }\\n}\\n```\\n\\n### 在 Blade 運用 Gate 權限設定\\n\\n在 Blade 樣板中可以運用 `@can`、`@cannot` 或 `@canany` 來判斷使用者的權限\\n\\n```php\\n@can('admin')\\n    \x3c!-- 系統管理者 --\x3e\\n@elsecan('manager')\\n    \x3c!-- 一般管理者 --\x3e\\n@else\\n    \x3c!-- 一般使用者 --\x3e\\n@endcan\\n```\\n\\n### Controller 運用 Gate 權限設定\\n\\n在 Controller 中則可使用 `Gate::allows` 或 `Gate::denies` 判斷使用者權限\\n\\n```php\\nuse Illuminate\\\\Support\\\\Facades\\\\Gate;\\n\\nclass Controller extends BaseController\\n{\\n    // ...\\n\\n    public function someAction()\\n    {\\n        if (Gate::allows('admin')) {\\n            return '系統管理者。';\\n        }\\n\\n        if (Gate::denies('admin')) {\\n            return '非系統管理者！';\\n        }\\n    }\\n}\\n```\\n\\n運用 `authorize` 直接限制整個函數的執行權限\\n\\n```php\\nclass Controller extends BaseController\\n{\\n    // ...\\n\\n    // 只有系統管理者可以執行\\n    public function adminAction()\\n    {\\n        $this->authorize('admin');\\n\\n        // ...\\n    }\\n}\\n```\\n\\n### Middleware 運用 Gate 權限設定\\n\\n應用在 Route\\n\\n```php\\n// 只有系統管理者可以執行\\nRoute::get('/someAction', 'MyController@someAction') -> middleware('can:admin');\\n```\\n\\n## Policy\\n\\n可以針對一個 Model 或資源實作限制權限\\n\\n```php\\nphp artisan make:policy PostPolicy --model=Post\\n```\\n\\n到`app/Providers/AuthServiceProvider`註冊剛建立好的 Policy\\n\\n```php\\nprotected $policies = [\\n    // 'App\\\\Model' => 'App\\\\Policies\\\\ModelPolicy',\\n    Post::class => PostPolicy::class,\\n];\\n```\\n\\n到`app/Policies/PostPolicy`修改條件\\n\\n```php\\npublic function update(User $user, Post $post)\\n{\\n    return $user->id === $post->user_id;\\n}\\n```\\n\",\"tocContent\":\"\"}")},343:function(n){"use strict";n.exports=JSON.parse('{"name":"Laravel 服務容器.md","content":"# Laravel 服務容器\\n\\n> **參考資料**：\\n> [Laravel 學習筆記—— 神奇的服務容器\\n> ](https://learnku.com/articles/789/laravel-learning-notes-the-magic-of-the-service-container)\\n>\\n> 容器，字面上理解就是裝東西的東西。\\n> 常見的變量、物件屬性等都可以算是容器。\\n> 一個容器能夠裝什麼，全部取決於你對該容器的定義。\\n> 當然，有這樣一種容器，它存放的不是文本、數值，而是物件、物件的描述(類別、介面)或者是提供物件的回調，\\n> 通過這種容器，我們得以實現許多高級的功能，其中最常提到的，就是\\"解耦\\"、\\"依賴注入(DI)\\"。本文就從這裡開始。\\n\\n## IoC 容器 laravel 的核心\\n\\nLaravel 的核心就是一個 IoC 容器，根據官方文件，稱其為\\"服務容器\\"，顧名思義，該容器提供了整個框架中需要的一系列服務。作為初學者，很多人會在這一個概念上犯難，因此，我打算從一些基礎的內容開始講解，通過理解面向物件開發中依賴的產生和解決方法，來逐漸揭開\\"依賴注入\\"的面紗，逐漸理解這一神奇的設計理念。\\n\\n## IoC 容器誕生的故事\\n\\n超人和超能力，依賴的產生！\\n物件導向程式碼，有以下幾樣東西無時不刻的接觸：介面、類別還有物件。這其中，介面是類別的原型，一個類別必須要遵守其實現的介面；物件則是一個類別實例化後的產物，我們稱其為一個實例。當然這樣說肯定不利於理解，我們就實際的寫點中看不中用的代碼輔助學習。\\n\\n> 怪物橫行的世界，總歸需要點超級人物來擺平。\\n\\n我們把一個\\"超人\\"作為一個類別，\\n\\n```php\\nclass Superman {}\\n```\\n\\n我們可以想像，一個超人誕生的時候肯定擁有至少一個超能力，這個超能力也可以抽象為一個物件，為這個物件定義一個描述他的類別吧。一個超能力肯定有多種屬性、(操作)方法，這個盡情的想像，但是目前我們先大致定義一個只有屬性的\\"超能力\\"，至於能幹啥，我們以後再豐富：\\n\\n```php\\nclass Power\\n{\\n    /**\\n    * 能力值\\n    */\\n    protected $ability;\\n\\n    /**\\n     * 能力範圍或距離\\n     */\\n    protected $range;\\n\\n    public function __construct($ability, $range) {\\n        $this->ability = $ability;\\n        $this->range = $range;\\n    }\\n}\\n```\\n\\n這時候我們回過頭，修改一下之前的\\"超人\\"類別，讓一個\\"超人\\"創建的時候被賦予一個超能力：\\n\\n```php\\nclass Superman\\n{\\n    protected $power;\\n\\n    public function __construct()\\n    {\\n        $this->power = new Power(999, 100);\\n    }\\n\\n}\\n```\\n\\n這樣的話，當我們創建一個\\"超人\\"實例的時候，同時也創建了一個\\"超能力\\"的實例，但是，我們看到了一點，\\"超人\\"和\\"超能力\\"之間不可避免的產生了一個依賴。\\n\\n> 所謂\\"依賴\\"，就是\\"我若依賴你，少了你就沒有我\\"。\\n\\n在一個貫徹物件導向程式碼的項目中，這樣的依賴隨處可見。少量的依賴並不會有太過直觀的影響，我們隨著這個例子逐漸鋪開，讓大家慢慢意識到，當依賴達到一個量級時，是怎樣一番噩夢般的體驗。當然，我也會自然而然的講述如何解決問題。\\n\\n### 一堆亂麻——可怕的依賴\\n\\n之前的例子中，超能力類別實例化後是一個具體的超能力，但是我們知道，超人的超能力是多元化的，每種超能力的方法、屬性都有不小的差異，沒法通過一種類別描述完全。我們現在進行修改，我們假設超人可以有以下多種超能力：\\n\\n- 飛行，屬性有：飛行速度、持續飛行時間\\n- 蠻力，屬性有：力量值\\n- 能量彈，屬性有：傷害值、射擊距離、同時射擊個數\\n\\n我們建立以下類別：\\n\\n```php\\nclass Flight\\n{\\n    protected $speed;\\n    protected $hold_time;\\n    public function __construct($speed, $hold_time) {}\\n}\\n\\nclass Force\\n{\\n    protected $force;\\n    public function __construct($force) {}\\n}\\n\\nclass Shot\\n{\\n    protected $atk;\\n    protected $range;\\n    protected $limit;\\n    public function __construct($atk, $range, $limit) {}\\n}\\n\\n```\\n\\n**這邊沒有詳細寫出 `__construct()` 這個構造函數的全部，只寫了需要傳遞的參數**\\n\\n好了，這下我們的超人有點\\"忙\\"了。在超人初始化的時候，我們會根據需要來實例化其擁有的超能力嗎，大致如下：\\n\\n```php\\nclass Superman\\n{\\n    protected $power;\\n\\n    public function __construct()\\n    {\\n        $this->power = new Fight(9, 100);\\n        // $this->power = new Force(45);\\n        // $this->power = new Shot(99, 50, 2);\\n        /*\\n        $this->power = array(\\n            new Force(45),\\n            new Shot(99, 50, 2)\\n        );\\n        */\\n    }\\n\\n}\\n```\\n\\n我們需要自己手動的在構造函數內(或者其他方法裡)實例化一系列需要的類別，這樣並不好。可以想像，假如需求變更(不同的怪物橫行地球)，需要更多的有針對性的 新的 超能力，或者需要 變更 超能力的方法，我們必須 重新改造 超人。換句話說就是，改變超能力的同時，我還得重新製造個超人。效率太低了！新超人還沒創造完成世界早已被毀滅。\\n\\n> 這時，靈機一動的人想到：為什麼不可以這樣呢？超人的能力可以被隨時更換，只需要添加或者更新一個芯片或者其他裝置啥的(想到鋼鐵人沒)\\n> 這樣的話就不要整個重新來過了。\\n\\n對，就是這樣的。\\n\\n我們不應該手動在\\"超人\\"類別中固化了他的\\"超能力\\"初始化的行為，而轉由外部負責，由外部創造超能力模組、裝置或者芯片等(我們後面統一稱為\\"模組\\")，植入超人體內的某一個介面，這個介面是一個既定的，只要這個\\"模組\\"滿足這個介面的裝置都可以被超人所利用，可以提升、增加超人的某一種能力。這種由外部負責其依賴需求的行為，我們可以稱其為`控制反轉(IoC)`。\\n\\n### 工廠模式，依賴轉移\\n\\n當然，實現控制反轉的方法有幾種。在這之前，不如我們先了解一些好玩的東西。\\n\\n> 我們可以想到，組件、工具(或者超人的模組)，是一種可被生產的玩意兒，生產的地方當然是\\"工廠(Factory)\\"，於是有人就提出了這樣一種模式：`工廠模式`。\\n\\n工廠模式，顧名思義，就是一個類別所以依賴的外部事物的實例，都可以被一個或多個\\"工廠\\"創建的這樣一種開發模式，就是工廠模式。\\n\\n我們為了給超人製造超能力模組，我們創建了一個工廠，它可以製造各種各樣的模組，且僅需要通過一個方法：\\n\\n```php\\nclass SuperModuleFactory\\n{\\n    public function makeModule($moduleName, $options) {\\n        switch ($moduleName) {\\n            case \'Fight\':\\n                return new Fight($options[0], $options[1]);\\n            case \'Force\':\\n                return new Force($options[0]);\\n            case \'Shot\':\\n                return new Shot($options[0], $options[1], $options[2]);\\n        }\\n    }\\n}\\n```\\n\\n這時候，超人創建之初就可以使用這個工廠！\\n\\n```php\\nclass Superman\\n{\\nprotected $power;\\n\\n    public function __construct()\\n    {\\n        // 初始化工廠\\n        $factory = new SuperModuleFactory;\\n\\n        // 通過工廠提供的方法制造需要的模組\\n        $this->power = $factory->makeModule(\'Fight\', [9, 100]);\\n        // $this->power = $factory->makeModule(\'Force\', [45]);\\n        // $this->power = $factory->makeModule(\'Shot\', [99, 50, 2]);\\n        /*\\n        $this->power = array(\\n            $factory->makeModule(\'Force\', [45]),\\n            $factory->makeModule(\'Shot\', [99, 50, 2])\\n        );\\n        */\\n    }\\n\\n}\\n```\\n\\n可以看得出，我們不再需要在超人初始化之初，去初始化許多第三方類別，只需初始化一個工廠類別，即可滿足需求。但這樣似乎和以前區別不大，只是沒有那麼多 new 關鍵字。其實我們稍微改造一下這個類別，你就明白，工廠類別的真正意義和價值了。\\n\\n```php\\nclass Superman\\n{\\n    protected $power;\\n\\n    public function __construct(array $modules)\\n    {\\n        // 初始化工廠\\n        $factory = new SuperModuleFactory;\\n\\n        // 通過工廠提供的方法制造需要的模組\\n        foreach ($modules as $moduleName => $moduleOptions) {\\n            $this->power[] = $factory->makeModule($moduleName, $moduleOptions);\\n        }\\n    }\\n\\n}\\n\\n// 建立超人\\n$superman = new Superman([\\n    \'Fight\' => [9, 100],\\n    \'Shot\' => [99, 50, 2]\\n]);\\n```\\n\\n現在修改的結果令人滿意。現在，\\"超人\\"的創建不再依賴任何一個\\"超能力\\"的類別，我們如若修改了或者增加了新的超能力，只需要針對修改 `SuperModuleFactory` 即可。擴充超能力的同時不再需要重新編輯超人的類別文件，使得我們變得很輕鬆。但是，這才剛剛開始。\\n\\n### 再進一步！IoC 容器的重要組成—— 依賴注入\\n\\n由\\"超人\\"對\\"超能力\\"的依賴變成\\"超人\\"對\\"超能力模組工廠\\"的依賴後，對付小怪獸們變得更加得心應手。但這也正如你所看到的，依賴並未解除，只是由原來對多個外部的依賴變成了對一個\\"工廠\\"的依賴。假如工廠出了點麻煩，問題變得就很棘手。\\n\\n> 其實大多數情況下，工廠模式已經足夠了。\\n> 工廠模式的缺點就是：介面未知(即沒有一個很好的契約模型，關於這個我馬上會有解釋)、產生物件類別型單一。\\n> 總之就是，還是不夠靈活。\\n> 雖然如此，工廠模式依舊十分優秀，並且適用於絕大多數情況。\\n> 不過我們為了講解後面的依賴注入，這裡就先誇大一下工廠模式的缺陷咯。\\n\\n我們知道，超人依賴的模組，我們要求有統一的介面，這樣才能和超人身上的注入介面對接，最終起到提升超能力的效果。\\n\\n事實上，我之前說謊了，不僅僅只有一堆小怪獸，還有更多的大怪獸。嘿嘿。額，這時候似乎工廠的生產能力顯得有些不足—— 由於工廠模式下，所有的模組都已經在工廠類別中安排好了，如果有新的、高級的模組加入，我們必須修改工廠類別(好比增加新的生產線)：\\n\\n```php\\nclass SuperModuleFactory\\n{\\n    public function makeModule($moduleName, $options){\\n        switch ($moduleName) {\\n            case \'Fight\':\\n                return new Fight($options[0], $options[1]);\\n            case \'Force\':\\n                return new Force($options[0]);\\n            case \'Shot\':\\n                return new Shot($options[0], $options[1], $options[2]);\\n            // case \'more\': .......\\n            // case \'and more\': .......\\n            // case \'and more\': .......\\n            // case \'oh no! its too many!\': .......\\n        }\\n    }\\n}\\n```\\n\\n噩夢般的感受！\\n\\n> 其實靈感就差一步！你可能會想到更為靈活的辦法！對，下一步就是我們今天的主要配角—— DI (依賴注入)\\n\\n由於對超能力模組的需求不斷增大，我們需要集合整個世界的高智商人才，一起解決問題，不應該僅僅只有幾個工廠壟斷負責。不過高智商人才們都非常自負，認為自己的想法是對的，創造出的超能力模組沒有統一的介面，自然而然無法被正常使用。這時我們需要提出一種契約，這樣無論是誰創造出的模組，都符合這樣的介面，自然就可被正常使用。\\n\\n```php\\ninterface SuperModuleInterface\\n{\\n    /*\\n     * 超能力啟動方法\\n     *\\n     * 任何一個超能力都得有該方法，並擁有一個參數\\n     * @param array $target 針對目標，可以是一個或多個，自己或他人\\n     */\\n    public function activate(array $target);\\n}\\n```\\n\\n上文中，我們定下了一個介面(超能力模組的規範、契約)，所有被創造的模組必須遵守該規範，才能被生產。\\n\\n> 其實，這就是 php 中 介面( interface ) 的用處和意義！\\n> 很多人覺得，為什麼 php 需要介面這種東西？難道不是 java 、 C# 之類別的語言才有的嗎？\\n> 這麼說，只要是一個正常的物件導向程式碼語言(雖然 php 可以程序式程式設計)，都應該具備這一特性。\\n> 因為一個 物件(object) 本身是由他的模板或者原型——類別(class)，經過實例化後產生的一個具體事物，\\n> 而有時候，實現同一種方法且不同功能(或特性)的時候，會存在很多的類別(class)，\\n> 這時候就需要有一個契約，讓大家編寫出可以被隨時替換卻不會產生影響的介面。\\n> 這種由程式碼語言本身提出的硬性規範，會增加更多優秀的特性。\\n>\\n> 雖然有些繞，但通過我們接下來的實例，大家會慢慢領會介面帶來的好處。\\n\\n這時候，那些提出更好的超能力模組的高智商人才，遵循這個介面，創建了下述(模組)類別：\\n\\n```php\\n/**\\n *\\n * X-超能量\\n */\\nclass XPower implements SuperModuleInterface\\n{\\n    public function activate(array $target) {\\n        //\\n    }\\n}\\n\\n/**\\n *\\n * 終極炸彈\\n */\\nclass UltraBomb implements SuperModuleInterface\\n{\\n    public function activate(array $target)\\n    {\\n        //\\n    }\\n}\\n```\\n\\n同時，為了防止有些\\"磚家\\"自作聰明，或者一些叛徒惡意搗蛋，不遵守契約胡亂製造模組，影響超人，我們對超人初始化的方法進行改造：\\n\\n```php\\nclass Superman\\n{\\n    protected $module;\\n\\n    public function __construct(SuperModuleInterface $module)\\n    {\\n        $this->module = $module\\n    }\\n\\n}\\n```\\n\\n改造完畢！現在，當我們初始化\\"超人\\"類別的時候，提供的模組實例必須是一個 `SuperModuleInterface` 介面的實現。否則就會提示錯誤。\\n\\n正是由於超人的創造變得容易，一個超人也就不需要太多的超能力，我們可以創造多個超人，並分別注入需要的超能力模組即可。這樣的話，雖然一個超人只有一個超能力，但超人更容易變多，我們也不怕怪獸啦！\\n\\n> 現在有人疑惑了，你要講的 依賴注入 呢？\\n>\\n> 其實，上面講的內容，正是依賴注入。\\n\\n什麼叫做依賴注入？\\n\\n本文從開頭到現在提到的一系列依賴，只要不是由內部生產(比如初始化、構造函數 \\\\_\\\\_construct 中通過工廠方法、自行手動 new 的)，而是由外部以參數或其他形式註入的，都屬於依賴注入(DI)。是不是豁然開朗？事實上，就是這麼簡單。下面就是一個典型的依賴注入：\\n\\n```php\\n// 超能力模组\\n$superModule = new XPower;\\n\\n// 初始化一個超人，並注入一個超能力模组依賴\\n$superMan = new Superman($superModule);\\n\\n```\\n\\n關於依賴注入這個本文的主要配角，也就這麼多需要講的。理解了依賴注入，我們就可以繼續深入問題。慢慢走近今天的主角……\\n\\n### 更為先進的工廠—— IoC 容器\\n\\n剛剛列了一段代碼：\\n\\n```php\\n$superModule = new XPower;\\n\\n$superMan = new Superman($superModule);\\n```\\n\\n讀者應該看出來了，手動的創建了一個超能力模組、手動的創建超人並註入了剛剛創建超能力模組。呵呵，手動。\\n\\n現代社會，應該是高效率的生產，乾淨的現場，完美的自動化生產。\\n\\n一群怪獸來了，如此低效率產出超人是不現實，我們需要自動化—— 最多一條指令，千軍萬馬來相見。我們需要一種高級的生產現場，我們只需要向生產現場提交一個腳本，工廠便能夠通過指令自動化生產。這種更為高級的工廠，就是工廠模式的昇華—— IoC 容器。\\n\\n```php\\nclass Container\\n{\\n    protected $binds;\\n\\n    protected $instances;\\n\\n    public function bind($abstract, $concrete)\\n    {\\n        if ($concrete instanceof Closure) {\\n            $this->binds[$abstract] = $concrete;\\n        } else {\\n            $this->instances[$abstract] = $concrete;\\n        }\\n    }\\n\\n    public function make($abstract, $parameters = [])\\n    {\\n        if (isset($this->instances[$abstract])) {\\n            return $this->instances[$abstract];\\n        }\\n\\n        array_unshift($parameters, $this);\\n\\n        return call_user_func_array($this->binds[$abstract], $parameters);\\n    }\\n\\n}\\n```\\n\\n這時候，一個十分粗糙的容器就誕生了。現在的確很簡陋，但不妨礙我們進一步提升他。先著眼現在，看看這個容器如何使用吧！\\n\\n```php\\n// 创建一個容器(后面称作超级工廠)\\n$container = new Container;\\n\\n// 向該 超级工廠 添加 超人 的生產脚本\\n$container->bind(\'superman\', function($container, $moduleName) {\\n    return new Superman($container->make($moduleName));\\n});\\n\\n// 向該 超级工廠 添加 超能力模组 的生產脚本\\n$container->bind(\'xpower\', function($container) {\\nreturn new XPower;\\n});\\n\\n// 同上\\n$container->bind(\'ultrabomb\', function($container) {\\nreturn new UltraBomb;\\n});\\n\\n// ****************** 华丽丽的分割线 **********************\\n// 開始啟動生產\\n$superman_1 = $container->make(\'superman\', \'xpower\');\\n$superman_2 = $container->make(\'superman\', \'ultrabomb\');\\n$superman_3 = $container->make(\'superman\', \'xpower\');\\n// ...随意添加\\n```\\n\\n看到沒？通過最初的 绑定(bind) 操作，我們向超級工廠註冊了一些生產腳本，這些生產腳本在生產指令下達之時便會執行。發現沒有？我們徹底的解除了超人與超能力模組的依賴關係，更重要的是，容器類別也絲毫沒有和他們產生任何依賴！我們通過註冊、綁定的方式向容器中添加一段可以被執行的回調(可以是匿名函數、非匿名函數、類別的方法)作為生產一個類別的實例的腳本，只有在真正的 生產(make) 操作被調用執行時，才會觸發。\\n\\n這樣一種方式，使得我們更容易在創建一個實例的同時解決其依賴關係，並且更加靈活。當有新的需求，只需另外綁定一個\\"生產腳本\\"即可。\\n\\n> 實際上，真正的 IoC 容器更為高級。\\n> 我們現在的例子中，還是需要手動提供超人所需要的模組參數，\\n> 但真正的 IoC 容器會根據類別的依賴需求，自動在註冊、綁定的一堆實例中搜尋符合的依賴需求，並自動注入到構造函數參數中去。\\n> Laravel 框架的服務容器正是這麼做的。\\n>\\n> 這種自動搜尋依賴需求的功能，是通過 `反射(Reflection)` 實現的，恰好的，php 完美的支持反射機制！\\n>\\n> [PHP 官方文件 - 反射](https://www.php.net/manual/zh/book.reflection.php)\\n\\n現在，到目前為止，我們已經不再懼怕怪獸們了。高智商人才集思廣益，井井有條，根據介面契約創造規範的超能力模組。超人開始批量產出。最終，人人都是超人，你也可以是哦！\\n\\n## 回歸正常世界。我們開始重新審視 laravel 的核心\\n\\n現在，我們開始慢慢解讀 laravel 的核心。其實，laravel 的核心就是一個 IoC 容器，也恰好是我之前所說的高級的 IoC 容器。\\n\\n可以說，laravel 的核心本身十分輕量，並沒有什麼很神奇很實質性的應用功能。很多人用到的各種功能模組比如 Route(路由)、Eloquent ORM(資料庫 ORM 组件)、Request and Response(乞求和響應)等等等等，實際上都是與核心無關的類別模組提供的，這些類別從註冊到實例化，最終被你所使用，其實都是 laravel 的服務容器負責的。\\n\\n我們以大家最常見的 Route 類別作為例子。大家可能經常見到路由定義是這樣的：\\n\\n```php\\nRoute::get(\'/\', function() {\\n    // bla bla bla...\\n});\\n```\\n\\n實際上，Route 類別被定義在這個命名空間：Illuminate\\\\Routing\\\\Router，文件 vendor/laravel/framework/src/Illuminate/Routing/Router.php。\\n\\n我們通過打開發現，這個類別的這一系列方法，如 get，post，any 等都不是靜態(static)方法，這是怎麼一回事兒？不要急，我們繼續。\\n\\n服務提供者\\n我們在前文介紹 IoC 容器的部分中，提到了，一個類別需要綁定、註冊至容器中，才能被\\"製造\\"。\\n\\n對，一個類別要被容器所能夠提取，必須要先註冊至這個容器。既然 laravel 稱這個容器叫做服務容器，那麼我們需要某個服務，就得先註冊、綁定這個服務到容器，那麼提供服務並綁定服務至容器的東西，就是服務提供者(ServiceProvider)。\\n\\n雖然，綁定一個類別到容器不一定非要通過服務提供者(ServiceProvider)。\\n\\n但是，我們知道，有時候我們的類別、模組會有需要其他類別和組件的情況，為了保證初始化階段不會出現所需要的模組和組件沒有註冊的情況，laravel 將註冊和初始化行為進行拆分，註冊的時候就只能註冊，初始化的時候就是初始化。拆分後的產物就是現在的服務提供者。\\n\\n服務提供者主要分為兩個部分，register(注册)和 boot(引導、初始化)，具體參考官方文件。register 負責進行向容器註冊\\"腳本\\"，但要注意註冊部分不要有對未知事物的依賴，如果有，就要移步至 boot 部分。\\n\\n正面\\n我們現在解答之前關於 Route 的方法為何能以靜態方法訪問的問題。實際上這個問題官方文件上有寫，簡單說來就是模擬一個類別，提供一個靜態魔術方法\\\\_\\\\_callStatic，並將該靜態方法對應到真正的方法上。\\n\\n我們使用的 Route 類別實際上是 Illuminate\\\\Support\\\\Facades\\\\Route 通過 class_alias() 函數創造的 别名 而已，這個類別被定義在文件 vendor/laravel/framework/src/Illuminate/Support/Facades/Route.php。\\n\\n我們打開文件一看…… 誒？怎麼只有這麼簡單的一段代碼呢？\\n\\n```php\\nnamespace Illuminate\\\\Support\\\\Facades;\\n\\n/**\\n * @see \\\\Illuminate\\\\Routing\\\\Router\\n */\\nclass Route extends Facade {\\n\\n    /**\\n     * Get the registered name of the component.\\n     *\\n     * @return string\\n     */\\n    protected static function getFacadeAccessor() {\\n        return \'router\';\\n    }\\n}\\n```\\n\\n其實仔細看，會發現這個類別繼承了一個叫做 Facade 的類別，到這裡謎底差不多要解開了。\\n\\n上述簡單的定義中，我們看到了 getFacadeAccessor 方法返回了一個 route，這是什麼意思呢？事實上，這個值被一個 ServiceProvider 註冊過，大家應該知道註冊了個什麼，當然是那個真正的路由類別！\\n","tocContent":""}')},9750:function(n){"use strict";n.exports=JSON.parse('{"name":"Laravel 環境設置.md","content":"# Laravel 環境設置\\n\\n>\\n\\n## 環境初始設定\\n\\n### 1. 安裝 XAMPP or phpEnv\\n\\n#### xampp 更改 php 版本: 版本 5 => 7\\n\\n> 注意！php 8.1 不相容 laravel 6.x 以下(包含 6)\\n\\n1. 開啟 Apache Admin 查看當前 XAMPP 所有版本資訊\\n2. 到[XAMPP](https://windows.php.net/download/)下載要更新的 php 版本的 zip 檔。(注意！選擇 `Thread Safe` 版本！)\\n3. 解壓縮定指定資料夾名稱為`php`，將此資料夾放至 XAMPP 資料夾中，並將原本的 php 資料夾另外命名\\n4. 至 XAMPP 控制面板點選 `config` 按鈕，開啟 `httpd-xampp.conf` 檔，並修改其內容\\n\\n   1. 找到以下文字，並將其修改\\n\\n      修改前\\n\\n      ```txt\\n      LoadFile \\"C:/xampp/php/php5ts.dll\\"\\n      LoadFile \\"C:/xampp/php/libpq.dll\\"\\n      LoadModule php5_module \\"C:/xampp/php/php5apache2_4.dll\\"\\n      ```\\n\\n      修改後\\n\\n      ```txt\\n      LoadFile \\"C:/xampp/php/php7ts.dll\\"\\n      LoadFile \\"C:/xampp/php/libpq.dll\\"\\n      LoadModule php7_module \\"C:/xampp/php/php7apache2_4.dll\\"\\n      ```\\n\\n      - 修改時需確認修改路徑的檔案確實存在，若無此檔案，可能是 php 版本的關係\\n\\n   2. 將 `httpd-xampp.conf` 設定檔中所有 `php5_module` 改為 `php7_module`\\n      - 在 php8 的 `httpd-xampp.conf` 設定檔為 `php_module`\\n\\n5. 重建 `php.ini` 設定檔\\n\\n   1. 複製 php 資料夾中的 php.ini-development，並重新命名為 php.ini\\n   2. 開啟 php.ini 並依開發或網站需求，開啟相關模組(刪除前面的分號`;`)\\n      1. `Dynamic Extensions` 動態延伸功能\\n         - extension=curl\\n         - extension=gd2(version 7) / gd(version 8)\\n           - 在 php 8.0，DG 延伸功能 windows dll 文件名稱由 php_gd2.dll 改為 php_gd.dll)\\n         - extension=mbstring\\n         - **extension=mysqli**\\n         - extension=openssl\\n      2. `Paths and Directories` 路徑和目錄\\n         - **extension_dir = \\"ext\\"**\\n      3. 常見設定\\n         - max_execution_time = 600\\n         - short_open_tag = On\\n         - max_input_time = 180\\n         - **error_reporting=E_ALL & ~E_DEPRECATED & ~E_STRICT**\\n           - 設置錯誤訊息通知，加入版本兼融性的提示\\n         - memory_limit = 500M\\n         - post_max_size = 500M\\n         - upload_max_filesize = 100M\\n         - max_file_uploads = 50\\n\\n6. 至 XAMPP 面板重啟 Apache\\n7. 重新執行 composer update\\n\\n#### XAMPP 除錯\\n\\n> 問題：XAMPP 開啟 MySQL 失敗\\n\\n錯誤訊息：\\n\\n```txt\\n2023-08-24 16:06:19 0 [Note] InnoDB: Mutexes and rw_locks use Windows interlocked functions\\n2023-08-24 16:06:19 0 [Note] InnoDB: Uses event mutexes\\n2023-08-24 16:06:19 0 [Note] InnoDB: Compressed tables use zlib 1.2.12\\n2023-08-24 16:06:19 0 [Note] InnoDB: Number of pools: 1\\n2023-08-24 16:06:19 0 [Note] InnoDB: Using SSE2 crc32 instructions\\n2023-08-24 16:06:19 0 [Note] InnoDB: Initializing buffer pool, total size = 16M, instances = 1, chunk size = 16M\\n2023-08-24 16:06:19 0 [Note] InnoDB: Completed initialization of buffer pool\\n2023-08-24 16:06:19 0 [Note] InnoDB: 128 out of 128 rollback segments are active.\\n2023-08-24 16:06:19 0 [Note] InnoDB: Creating shared tablespace for temporary tables\\n2023-08-24 16:06:19 0 [Note] InnoDB: Setting file \'C:\\\\xampp\\\\mysql\\\\data\\\\ibtmp1\' size to 12 MB. Physically writing the file full; Please wait ...\\n2023-08-24 16:06:19 0 [Note] InnoDB: File \'C:\\\\xampp\\\\mysql\\\\data\\\\ibtmp1\' size is now 12 MB.\\n2023-08-24 16:06:19 0 [Note] InnoDB: Waiting for purge to start\\n2023-08-24 16:06:19 0 [Note] InnoDB: 10.4.27 started; log sequence number 72915773; transaction id 17227\\n2023-08-24 16:06:19 0 [Note] InnoDB: Loading buffer pool(s) from C:\\\\xampp\\\\mysql\\\\data\\\\ib_buffer_pool\\n2023-08-24 16:06:19 0 [Note] Plugin \'FEEDBACK\' is disabled.\\n2023-08-24 16:06:19 0 [Note] Server socket created on IP: \'::\'.\\n```\\n\\n解決辦法：\\n\\n1. 先到路徑：`C:\\\\xampp\\\\mysql\\\\data`\\n2. 將 data 資料夾備份\\n3. 再建立一個新的 data 資料夾\\n4. 建立後重啟 mysql\\n5. 重啟失敗後，data 資料夾會新增程式自動建立的檔案\\n6. 此時將`C:\\\\xampp\\\\mysql\\\\backup`中的資料夾複製到 data 資料夾中\\n7. 這時再重啟 mysql 已經可以正常運行了，接下來將就的資料庫加回來\\n8. 此時先關閉 mysql，將剛剛備份的 data 資料夾底下的資料夾與 `ibdata1` 檔案，複製到新的 data 資料夾底下\\n9. 重啟 mysql 即可\\n\\n### macOS Monterey 上安裝 PHP\\n\\n> 問題：安裝完 MAMP 之後，要用終端機安裝 composer，結果出現`zsh: command not found: php`\\n>\\n> 原因：MacOS Monterey 版本，預設沒有安裝 PHP。\\n\\n1. 安裝 PHP\\n   [Installing PHP on your Mac](https://daily-dev-tips.com/posts/installing-php-on-your-mac/)\\n\\n1. 安裝 Homebrew\\n   在 terminal 輸入\\n\\n   ```terminal\\n   /bin/bash -c \\"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\\"\\n   ```\\n\\n   顯示路徑問題的解決辦法\\n\\n   ```terminal\\n   echo \'eval \\"$(/opt/homebrew/bin/brew shellenv)\\"\' >> /Users/changgenglu/.zprofile\\n\\n   eval \\"$(/opt/homebrew/bin/brew shellenv)\\"\\n   ```\\n\\n1. 使用 Homebrew 安裝 PHP\\n   先確定 Homebrew 安裝成功\\n\\n   ```terminal\\n   brew update\\n   brew doctor\\n   ```\\n\\n   安裝 PHP\\n\\n   ```terminal\\n   brew install php\\n   ```\\n\\n   安裝特定版本\\n\\n   ```terminal\\n   brew install php@7.4\\n   ```\\n\\n   - 安裝指定版本後，並不會自動切換 PHP 本版本\\n\\n1. 使用 Homebrew 切換 PHP\\n   檢查當前版本\\n\\n   ```terminal\\n   php -v\\n\\n   # PHP 8.0.1 (cli) (built: Jan  8 2021 01:27:28) ( NTS )\\n   ```\\n\\n   取消該版本\\n\\n   ```terminal\\n   brew unlink php@8.0\\n   ```\\n\\n   選擇版本\\n\\n   ```terminal\\n   brew link php@7.4\\n   ```\\n\\n   出現路徑問題，提示：須遜行腳本來添加路徑\\n\\n   ```terminal\\n   echo \'export PATH=\\"/opt/homebrew/opt/php@7.4/bin:$PATH\\"\' >> ~/.zshrc\\n\\n   ```\\n\\n### 2. 安裝 composer\\n\\n#### windows 透過 composer 官網下載 composer 安裝檔\\n\\n#### 下載 Composer: MacOS\\n\\n- 代碼以[Composer 官網](https://getcomposer.org/download/)為主\\n\\n下載安裝程序到當前目錄\\n\\n```bash\\nphp -r \\"copy(\'https://getcomposer.org/installer\', \'composer-setup.php\');\\"\\n```\\n\\n驗證安裝程序\\n\\n```bash\\nphp -r \\"if (hash_file(\'sha384\', \'composer-setup.php\') === \'906a84df04cea2aa72f40b5f787e49f22d4c2f19492ac310e8cba5b96ac8b64115ac402c8cd292b8a03482574915d1a8\') { echo \'Installer verified\'; } else { echo \'Installer corrupt\'; unlink(\'composer-setup.php\'); } echo PHP_EOL;\\"\\n```\\n\\n運行安裝程序\\n\\n```bash\\nphp composer-setup.php\\n```\\n\\n刪除安裝程序\\n\\n```bash\\nphp -r \\"unlink(\'composer-setup.php\');\\"\\n```\\n\\n- MacOS 如果出現 `zsh: command not found: php`\\n\\n  原因：MacOS Monterry 版本，沒有包括 PHP。請參考：[macOS Monterey 上安裝 PHP](https://hackmd.io/wnFCr0GUS-iIRxHY2zrBgw)\\n\\n- MacOS 須確保 Composer 的系統等級 vendor bin 資料夾有放在$PATH 中，這樣作業系統才能找到`laravel` 可執行檔。一般常見的位置如下：\\n  - macOS: $HOME/.composer/vendor/bin\\n  - Windows: %USERPROFILE%\\\\AppData\\\\Roaming\\\\Composer\\\\vendor\\\\bin\\n\\n#### 全局調用 Composer: MacOS\\n\\n確認是否成功安裝 Composer\\n\\n```bash\\n# 要看到有composer.phar的檔案\\nls\\n```\\n\\n將 composer.phar 放入本地的目錄\\n\\n```bash\\nsudo mv composer.phar /usr/local/bin/composer\\n```\\n\\n測試是否安裝成功\\n\\n```bash\\ncomposer\\n```\\n\\n### 3. 安裝 Visual Studio Code or phpStorm\\n\\n### 4. Laravel 全域安裝 XAMPP\\n\\n```bash\\ncd c:\\\\xampp\\\\htdocs\\ncomposer global require laravel/installer\\n\\nlaravel new project_name\\n\\ncd project_name\\n\\nphp artisan serve\\n```\\n\\n## 從 Git clone Laravel 專案\\n\\n由於安全性及維護的考量，Laravel 預設有 .gitignore，所以較為敏感的檔案，不會被 push 上去。\\n因此專案 clone 下來之後，必須要重建才能正常執行。\\n\\n### 開發環境設定\\n\\n1. 安裝依賴套件\\n\\n   ```bash\\n   composer install\\n   ```\\n\\n2. 設定.env 檔\\n\\n   複製.env.example 並更改為.env\\n\\n   ```bash\\n   cp .env.example .env\\n   ```\\n\\n   修改.env\\n\\n3. 設定加密的 APP_KEY\\n\\n   ```bash\\n   php artisan key:generate\\n   ```\\n\\n4. 設定資料庫\\n\\n   建立 MySQL 所需的資料庫\\n\\n5. Migration 和 Seeding 建立資料表結構\\n\\n   ```cmd\\n   php artisan migrate\\n   &\\n   php artisan db:seed\\n   &\\n   php artisan migrate --seed\\n   ```\\n\\n6. 若有安裝 passport 需運行命令產生 Access Token\\n\\n   ```bash\\n   php artisan passport:install\\n   ```\\n\\n7. 建立符號連結\\n   如果有使用到 public storage （如：Storage::disk(\'public\')），\\n   記得使用以下指令，將 storage 軟連結到 storage/app/public\\n\\n   ```cmd\\n   php artisan storage:link\\n   ```\\n\\n8. 設定伺服器\\n\\n   例如到 NGINX 新增、調整 conf 檔\\n\\n9. 設定任務排程\\n\\n   如果有在 Laravel 中定義排程的任務，\\n   記得在 crontab 中增加 Laravel 指令排程器\\n\\n   ```cmd\\n   # 在 crontab -e 中\\n   * * * * * php /path-to-your-project/artisan schedule:run >> /dev/null 2>&1\\n   ```\\n\\n### 上線環境設定\\n\\n1. 安裝 composer 排除 dev 項目\\n\\n   ```bash\\n   composer install --optimize-\\n   loader --no-dev\\n   ```\\n\\n2. `.env`設定轉為線上並且關閉錯誤提示\\n\\n   ```php\\n   APP_NAME=專案名稱\\n   APP_ENV=production\\n   APP_KEY=\\n   APP_DEBUG=false\\n   APP_URL=https://正式網址\\n   ```\\n\\n3. 設定快取\\n\\n   ```bash\\n   php artisan config:cache\\n\\n   #　下次更新程式記得更新config\\n   php artisan config:clear\\n   ```\\n\\n4. Router 快取\\n   error: (Unable to prepare route [api/user] for serialization. Uses Closure. )\\n\\n   ```bash\\n   php artisan route:cache\\n\\n   # 下次更新程式記得更新route\\n   php artisan route:clear\\n   php artisan cache:clear\\n   ```\\n\\n5. Composer 緩存\\n\\n   ```bash\\n   composer dump\\n   load -o\\n   # 每次更新composer install 後，都要再執行一次\\n   ```\\n\\n6. 類別緩存\\n   error: (Unable to prepare route [api/user] for serialization. Uses Closure. )\\n\\n   ```bash\\n   php artisan optimize\\n   ```\\n\\n7. 清除類別緩存\\n\\n   ```bash\\n   php artisan clear-compiled\\n   ```\\n\\n8. 建立 keygen\\n\\n   ```bash\\n   php artisan key:generate\\n   ```\\n\\n9. 若有安裝 passport 需運行命令產生 Access Token\\n\\n   ```bash\\n   php artisan passport:keys\\n   ```\\n\\n10. 執行\\n\\n```bash\\n# 遷移資料表\\nphp artisan migrate\\n# 填充資料\\nphp artisan db:seed\\n```\\n\\n### composer install 失敗\\n\\n```shell\\nnode: /lib64/libm.so.6: version `GLIBC_2.27` not found (required by node)\\nnode: /lib64/libc.so.6: version `GLIBC_2.28` not found (required by node)\\nnode: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.28` not found (required by node)\\n```\\n\\n當出現上面的錯誤訊息，表示 GLIBC 的版本不符合現行系統上的 node 版本。\\n\\n解決錯誤常見的方法有兩種：\\n\\n1. 安裝較舊、支援更廣泛的 Node.js (16.x) 版本\\n\\n   使用 `nvm` 安裝其他版本的 node.js\\n\\n   ```shell\\n   nvm install 16\\n   nvm use 16\\n   ```\\n\\n   完成後確認當前版本\\n\\n   ```shell\\n   nvm ls\\n   node --version\\n   ```\\n\\n   移除特定版本\\n\\n   ```shell\\n   # 👇️ uninstall Node.js version 13.X.X\\n   nvm uninstall 13\\n   ```\\n\\n   若還未安裝 nvm\\n\\n   ```shell\\n   curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh | bash\\n   chmod +x ~/.nvm/nvm.sh\\n   source ~/.bashrc\\n   # 驗證 nvm 是否安裝成功\\n   nvm -v\\n   ```\\n\\n2. 將 Linux 操作系統升級到更新版本。\\n\\n## Laravel ReactJS\\n\\n> Use laravel/ui Package to install react in laravel with Bootstrap 4.\\n\\n1. 建立新的專案\\n\\n   ```cmd\\n   composer create-project laravel/laravel --prefer-dist running_in_circles\\n\\n   laravel new running_in_circles\\n   ```\\n\\n2. 進入 Laravel 項目\\n\\n   ```cmd\\n   cd running_in_circles\\n   ```\\n\\n3. 安裝 laravel/ui\\n\\n   ```cmd\\n   composer require laravel/ui\\n   ```\\n\\n4. 在 Laravel 中安裝 React\\n\\n   ```cmd\\n   php artisan ui react\\n   ```\\n\\n5. 安裝所需的軟件包\\n\\n   ```cmd\\n   \x3c!-- 檢查node和npm是否安裝 --\x3e\\n       node -v\\n       npm -v\\n   \x3c!-- 建立一個node_modules資料夾並自動安裝package.json --\x3e\\n       npm install\\n   ```\\n\\n6. 在 Laravel 中設置 React 組件\\n\\n   ```javascript\\n   // 路徑 ==> resource/js/components/User.js\\n   import React from \\"react\\";\\n   import ReactDOM from \\"react-dom\\";\\n\\n   function User() {\\n     return (\\n       <div className=\\"container mt-5\\">\\n         <div className=\\"row justify-content-center\\">\\n           <div className=\\"col-md-8\\">\\n             <div className=\\"card text-center\\">\\n               <div className=\\"card-header\\">\\n                 <h2>React Component in Laravel</h2>\\n               </div>\\n               <div className=\\"card-body\\">I am tiny React component in Laravel app!</div>\\n             </div>\\n           </div>\\n         </div>\\n       </div>\\n     );\\n   }\\n\\n   export default User;\\n\\n   // DOM element\\n   if (document.getElementById(\\"user\\")) {\\n     ReactDOM.render(<User />, document.getElementById(\\"user\\"));\\n   }\\n   ```\\n\\n7. 修改 resources/js/app.js 註冊 React 文件\\n\\n   ```javascript\\n   require(\\"./bootstrap\\");\\n\\n   // Register React components\\n   require(\\"./components/Example\\");\\n   require(\\"./components/User\\");\\n   ```\\n\\n8. 修改 views/welcome.blade.php 模板\\n\\n   ```html\\n   <!DOCTYPE html>\\n   <html lang=\\"{{ str_replace(\'_\', \'-\', app()->getLocale()) }}\\">\\n     <head>\\n       <meta charset=\\"utf-8\\" />\\n       <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\" />\\n       <title>Laravel</title>\\n       \x3c!-- Styles --\x3e\\n       <link href=\\"{{ asset(\'css/app.css\') }}\\" rel=\\"stylesheet\\" />\\n     </head>\\n\\n     <body>\\n       \x3c!-- React root DOM --\x3e\\n       <div id=\\"user\\"></div>\\n       \x3c!-- React JS --\x3e\\n       <script src=\\"{{ asset(\'js/app.js\') }}\\" defer><\/script>\\n     </body>\\n   </html>\\n   ```\\n\\n9. 執行命令編譯 Laravel 和 React.js\\n\\n   ```cmd\\n   npm run watch\\n   ```\\n\\n10. 編譯成功，運行 laravel\\n\\n```cmd\\nphp artisan serve\\n```\\n\\n## Laravel 安裝 bootstrap\\n\\n### Laravel 8\\n\\n1. 終端機\\n\\n   ```cmd\\n   npm install\\n   ```\\n\\n2. 建立文件(如果尚未建立) `resources/sass/app.scss` 並引入:\\n   `@import \'~bootstrap\';`\\n\\n3. 在 webpack.mix.js 加入\\n\\n   ```php\\n   mix.sass(\'resources/sass/app.scss\', \'public/css\')\\n   ```\\n\\n4. 終端機\\n\\n   ```cmd\\n   npm run dev\\n   ```\\n\\n5. 現在可以引用 bootstrap\\n\\n   ```php\\n   <link href=\\"{{ asset(\'css/app.css\') }}\\" rel=\\"stylesheet\\">\\n   ```\\n\\n### Laravel 6\\n\\n1. 終端機輸入\\n\\n   ```cmd\\n   composer require laravel/ui=\\"1.*\\" --dev\\n   ```\\n\\n2. 輸入\\n\\n   ```cmd\\n   php artisan ui bootstrap\\n   ```\\n\\n3. 如果出現 \\"Command \\"ui\\" is not defined.\\"\\n\\n   ```cmd\\n   composer update\\n   ```\\n\\n4. 執行\\n\\n   ```cmd\\n   npm install\\n   ```\\n\\n5. 終端機\\n\\n   ```cmd\\n   npm run dev\\n   ```\\n\\n6. 現在可以引入\\n\\n   ```php\\n   <link rel=\\"stylesheet\\" href=\\"/css/app.css\\">\\n   <script src=\\"/js/app.js\\"><\/script>\\n   ```\\n\\n## Laravel Telescope\\n\\n提供察看 laravel 中的請求、異常、日誌、資料庫查詢等等功能\\n\\n### 安裝\\n\\n利用 composer 安裝到 laravel 中\\n\\n```bash\\ncomposer require laravel/telescope\\n```\\n\\n安裝後使用 artisan 命令發布資產\\n\\n```bash\\nphp artisan telescope:install\\n```\\n\\n並運行 migrate\\n\\n```bash\\nphp artisan migrate\\n```\\n\\n若指定在開發環境中安裝，則再發布資產後薛將配置文件，從 config/app.php 中註解，並在 AppServiceProvider 手動註冊服務\\n\\n```bash\\n# 指定在開發環境中安裝\\ncomposer require laravel/telescope --dev\\n```\\n","tocContent":"- [Laravel 環境設置](#laravel-環境設置)\\n  - [環境初始設定](#環境初始設定)\\n    - [1. 安裝 XAMPP or phpEnv](#1-安裝-xampp-or-phpenv)\\n      - [xampp 更改 php 版本: 版本 5 =\\\\> 7](#xampp-更改-php-版本-版本-5--7)\\n      - [XAMPP 除錯](#xampp-除錯)\\n    - [macOS Monterey 上安裝 PHP](#macos-monterey-上安裝-php)\\n    - [2. 安裝 composer](#2-安裝-composer)\\n      - [windows 透過 composer 官網下載 composer 安裝檔](#windows-透過-composer-官網下載-composer-安裝檔)\\n      - [下載 Composer: MacOS](#下載-composer-macos)\\n      - [全局調用 Composer: MacOS](#全局調用-composer-macos)\\n    - [3. 安裝 Visual Studio Code or phpStorm](#3-安裝-visual-studio-code-or-phpstorm)\\n    - [4. Laravel 全域安裝 XAMPP](#4-laravel-全域安裝-xampp)\\n  - [從 Git clone Laravel 專案](#從-git-clone-laravel-專案)\\n    - [開發環境設定](#開發環境設定)\\n    - [上線環境設定](#上線環境設定)\\n    - [composer install 失敗](#composer-install-失敗)\\n  - [Laravel ReactJS](#laravel-reactjs)\\n  - [Laravel 安裝 bootstrap](#laravel-安裝-bootstrap)\\n    - [Laravel 8](#laravel-8)\\n    - [Laravel 6](#laravel-6)\\n  - [Laravel Telescope](#laravel-telescope)\\n    - [安裝](#安裝)"}')},3626:function(n){"use strict";n.exports=JSON.parse("{\"name\":\"Laravel 表單驗證.md\",\"content\":\"# Laravel 表單驗證\\n\\n## 基礎驗證方法 `validate()`\\n\\n```php\\n$validatedData = $request->validate([\\n    'title' => ['required', 'unique:posts', 'max:255'],\\n    'body' => ['required'],\\n]);\\n```\\n\\n也可以使用 `validateWithBag()` 來請求驗證，並將所有錯誤訊息，儲存在一個命名錯誤訊息包\\n\\n```php\\n$validatedData = $request->validateWithBag('post', [\\n    'title' => ['required', 'unique:posts', 'max:255'],\\n    'body' => ['required'],\\n]);\\n```\\n\\n在驗證規則中，加入 bail，如果某個字串在第一次驗證失敗之後，就立即停止驗證。\\n\\n```php\\n$request->validate([\\n    'title' => 'bail|required|unique:posts|max:255',\\n    'body' => 'required',\\n]);\\n// 如果title沒通過unique的規則，那麼就不會再 繼續驗證max規則\\n```\\n\\n如果你的 HTTP 請求，包還嵌套參數(比如陣列)，你可以在驗證規則中使用「點」語法，來指定這些參數\\n\\n```php\\n$request->validate([\\n    'title' => 'required|unique:posts|max:255',\\n    'author.name' => 'required',\\n    'author.description' => 'required',\\n]);\\n```\\n\\n如果你的字段名稱包含點，則可以使用跳脫符號\\n\\n```php\\n$request->validate([\\n    'title' => 'required|unique:posts|max:255',\\n    'v1\\\\.0' => 'required',\\n]);\\n```\\n\\n## [常用規則](https://learnku.com/docs/laravel/8.x/validation/9374)\\n\",\"tocContent\":\"\"}")},2189:function(n){"use strict";n.exports=JSON.parse('{"name":"Laravel 資料庫設計範例.md","content":"# Laravel 資料庫設計範例\\n\\n## 建立新專案\\n\\n```cmd\\nlaravel new blog\\n```\\n\\n## 編輯 .env\\n\\n```php\\nDB_CONNECTION=mysql\\nDB_HOST=127.0.0.1\\nDB_PORT=3306\\nDB_DATABASE=your_database\\nDB_USERNAME=your_name\\nDB_PASSWORD=your_password\\n```\\n\\n- XAMPP 預設的密碼是空白，phpEnv 要先行設定資料庫密碼\\n\\n## 同時建立 migration controller model\\n\\n終端機執行\\n\\n```cmd\\nphp artisan make:model Employee -mcr\\n```\\n\\n完成後產生三個檔案\\n\\n- database\\\\migrations\\\\yyyy_mm_dd_time_create_employees_table.php\\n- app\\\\Http\\\\Controllers\\\\EmployeeController.php\\n- app\\\\Models\\\\Employee.php\\n\\n修改 migration 檔案，將 up() 函式改成\\n\\n```php\\npublic function up()\\n{\\n    Schema::create(\'employees\', function (Blueprint $table) {\\n        $table->bigIncrements(\'id\');\\n        $table->string(\'firstName\');\\n        $table->string(\'lastName\');\\n        $table->timestamps();\\n    });\\n}\\n```\\n\\n執行 migrate ，在資料庫中建立資料表\\n\\n```cmd\\nphp artisan migrate\\n```\\n\\n## 建立資料\\n\\n終端機開啟 tinker 工具程式\\n\\n```cmd\\nphp artisan tinker\\n```\\n\\n依序輸入指令\\n\\n```cmd\\n1 + 2\\nDB::table(\'employees\')->insert([\'firstName\' => \'Jeremy\', \'lastName\' => \'Lin\', \'created_at\' => new Datetime, \'updated_at\' => new Datetime ])\\nDB::table(\'employees\')->insert([\'firstName\' => \'Derek\', \'lastName\' => \'Jeter\', \'created_at\' => new Datetime, \'updated_at\' => new Datetime ])\\nDB::table(\'employees\')->insert([\'firstName\' => \'Lionel\', \'lastName\' => \'Messi\', \'created_at\' => new Datetime, \'updated_at\' => new Datetime ])\\nDB::table(\'employees\')->insert([\'firstName\' => \'test\', \'lastName\' => \'test\', \'created_at\' => new Datetime, \'updated_at\' => new Datetime ])\\n\\nDB::table(\'employees\')->get();\\nDB::table(\'employees\')->find(1)\\nDB::table(\'employees\')->where(\'lastName\', \'test\')->first()\\nDB::table(\'employees\')->where(\'lastName\', \'test\')->delete()\\n\\nApp\\\\Models\\\\Employee::all();\\nApp\\\\Models\\\\Employee::find(1);\\n\\nexit\\n```\\n\\n## 渲染員工清單\\n\\n編輯 web.php\\n\\n```php\\nRoute::get(\'/\', \'App\\\\Http\\\\Controllers\\\\EmployeeController@index\');\\nRoute::resource(\'employees\', \'App\\\\Http\\\\Controllers\\\\EmployeeController\');\\n```\\n\\n編輯 EmployeesController，需參用 Employee 類別\\n\\n```php\\nuse App\\\\Models\\\\Employee;\\n```\\n\\n修改 index()\\n\\n```php\\npublic function index() {\\n        $employeeList = Employee::all();\\n        return view(\'employees.index\', compact(\'employeeList\'));\\n    }\\n```\\n\\n建立 resources\\\\views\\\\employees\\\\index.blade.php\\n\\n```php\\n<!DOCTYPE html>\\n<html lang=\\"en\\">\\n<head>\\n  <title>Employee</title>\\n  <meta charset=\\"utf-8\\">\\n  <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\">\\n  <link rel=\\"stylesheet\\" href=\\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css\\">\\n  <script src=\\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\\"><\/script>\\n  <script src=\\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/js/bootstrap.min.js\\"><\/script>\\n</head>\\n<body>\\n\\n<div class=\\"container\\">\\n  <h2>Employee List\\n    <a href=\\"/employees/create\\" class=\\"btn btn-md btn-success pull-right\\">\\n      <span class=\\"glyphicon glyphicon-plus\\"></span> 新增\\n    </a>\\n  </h2>\\n  <table class=\\"table table-hover\\">\\n    <thead>\\n      <tr>\\n        <th>Firstname</th>\\n        <th>Lastname</th>\\n        <th>&nbsp;</th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n    <tr>\\n        <td>firstName1</td>\\n        <td>lastName1</td>\\n        <td>\\n            <span class=\\"pull-right\\">\\n                <form method=\\"post\\" action=\\"/employees/1\\">\\n                    <a href=\\"/employees/1/edit\\" class=\\"btn btn-xs btn-info\\">\\n               <span class=\\"glyphicon glyphicon-pencil\\"></span> 修改\\n              </a> |\\n                    @csrf\\n                    @method(\'DELETE\')\\n                    <button type=\\"submit\\" class=\\"btn btn-xs btn-danger\\">\\n               <span class=\\"glyphicon glyphicon-remove\\"></span> 刪除\\n              </button>\\n                </form>\\n            </span>\\n        </td>\\n    </tr>\\n    <tr>\\n        <td>firstName2</td>\\n        <td>lastName2</td>\\n        <td>\\n            <span class=\\"pull-right\\">\\n                <form method=\\"post\\" action=\\"/employees/2\\">\\n                    <a href=\\"/employees/2/edit\\" class=\\"btn btn-xs btn-info\\">\\n               <span class=\\"glyphicon glyphicon-pencil\\"></span> 修改\\n              </a> |\\n                    @csrf\\n                    @method(\'DELETE\')\\n                    <button type=\\"submit\\" class=\\"btn btn-xs btn-danger\\">\\n               <span class=\\"glyphicon glyphicon-remove\\"></span> 刪除\\n              </button>\\n                </form>\\n            </span>\\n        </td>\\n    </tr>\\n    <tr>\\n        <td>firstName3</td>\\n        <td>lastName3</td>\\n        <td>\\n            <span class=\\"pull-right\\">\\n                <form method=\\"post\\" action=\\"/employees/3\\">\\n                    <a href=\\"/employees/3/edit\\" class=\\"btn btn-xs btn-info\\">\\n               <span class=\\"glyphicon glyphicon-pencil\\"></span> 修改\\n              </a> |\\n                    @csrf\\n                    @method(\'DELETE\')\\n                    <button type=\\"submit\\" class=\\"btn btn-xs btn-danger\\">\\n               <span class=\\"glyphicon glyphicon-remove\\"></span> 刪除\\n              </button>\\n                </form>\\n            </span>\\n        </td>\\n    </tr>\\n    </tbody>\\n  </table>\\n</div>\\n</body>\\n</html>\\n```\\n\\n啟動 Web 伺服器\\n\\n```cmd\\nphp artisan serve\\n```\\n\\n## 動態渲染員工資料\\n\\n修改 resources\\\\views\\\\employees\\\\index.blade.php\\n\\n```php\\n<tbody>\\n    @foreach ($employeeList as $emp)\\n     <tr>\\n         <td>{{$emp->firstName}}</td>\\n         <td>{{$emp->lastName}}</td>\\n         <td>\\n             <span class=\\"pull-right\\">\\n                 <form method=\\"post\\" action=\\"/employees/{{$emp->id}}\\">\\n                     <a href=\\"/employees/{{$emp->id}}/edit\\" class=\\"btn btn-xs btn-info\\">\\n          <span class=\\"glyphicon glyphicon-pencil\\"></span> 修改\\n         </a> |\\n                     @csrf\\n                     @method(\'DELETE\')\\n                     <button type=\\"submit\\" class=\\"btn btn-xs btn-danger\\">\\n          <span class=\\"glyphicon glyphicon-remove\\"></span> 刪除\\n         </button>\\n                  </form>\\n             </span>\\n         </td>\\n     </tr>\\n    @endforeach\\n</tbody>\\n```\\n\\n## 新增員工資料\\n\\n修改 EmployeesController.php\\n\\n```php\\npublic function create()\\n    {\\n        return view(\\"employees.create\\");\\n    }\\n```\\n\\n新增檔案 resources\\\\views\\\\employees\\\\create.blade.php\\n\\n```php\\n<!DOCTYPE html>\\n<html lang=\\"en\\">\\n\\n<head>\\n    <title>Employee</title>\\n    <meta charset=\\"utf-8\\">\\n    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\">\\n    <link rel=\\"stylesheet\\" href=\\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css\\">\\n    <script src=\\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\\"><\/script>\\n    <script src=\\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/js/bootstrap.min.js\\"><\/script>\\n</head>\\n\\n<body>\\n    <div class=\\"container\\">\\n        <form class=\\"form-horizontal\\">\\n     @csrf\\n            <fieldset>\\n                \x3c!-- Form Name --\x3e\\n                <legend>Employee Data</legend>\\n                \x3c!-- Text input--\x3e\\n                <div class=\\"form-group\\">\\n                    <label class=\\"col-md-4 control-label\\" for=\\"firstName\\">First Name:</label>\\n                    <div class=\\"col-md-4\\">\\n                        <input id=\\"firstName\\" name=\\"firstName\\" type=\\"text\\" placeholder=\\"\\" class=\\"form-control input-md\\">\\n                    </div>\\n                </div>\\n                \x3c!-- Text input--\x3e\\n                <div class=\\"form-group\\">\\n                    <label class=\\"col-md-4 control-label\\" for=\\"lastName\\">Last Name:</label>\\n                    <div class=\\"col-md-4\\">\\n                        <input id=\\"lastName\\" name=\\"lastName\\" type=\\"text\\" placeholder=\\"\\" class=\\"form-control input-md\\">\\n                    </div>\\n                </div>\\n                \x3c!-- Button (Double) --\x3e\\n                <div class=\\"form-group\\">\\n                    <label class=\\"col-md-4 control-label\\" for=\\"okOrCancel\\"></label>\\n                    <div class=\\"col-md-8\\">\\n                        <button type=\\"submit\\" id=\\"okOrCancel\\" name=\\"okOrCancel\\" class=\\"btn btn-success\\">\\n                         OK\\n                        </button>\\n         <button type=\\"submit\\" id=\\"okOrCancel\\" name=\\"okOrCancel\\" class=\\"btn btn-danger\\">\\n                         Cancel\\n                        </button>\\n                    </div>\\n                </div>\\n            </fieldset>\\n        </form>\\n    </div>\\n</body>\\n</html>\\n```\\n\\n修改 EmployeesController.php\\n\\n```php\\npublic function store(Request $request)\\n    {\\n        $emp = new Employee();\\n        $emp->firstName = $request->firstName;\\n        $emp->lastName = $request->lastName;\\n        $emp->save();\\n        return redirect(\\"/employees\\");\\n    }\\n```\\n\\n## 修改會員資料\\n\\n修改 EmployeesController.php\\n\\n```php\\npublic function edit($id)\\n    {\\n        $emp = Employee::find($id);\\n        return view(\'employees.edit\', compact(\'emp\'));\\n    }\\n```\\n\\n新增檔案 resources\\\\views\\\\employees\\\\edit.blade.php\\n\\n```php\\n<!DOCTYPE html>\\n<html lang=\\"en\\">\\n\\n<head>\\n    <title>Employee</title>\\n    <meta charset=\\"utf-8\\">\\n    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\">\\n    <link rel=\\"stylesheet\\" href=\\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css\\">\\n    <script src=\\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\\"><\/script>\\n    <script src=\\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/js/bootstrap.min.js\\"><\/script>\\n</head>\\n\\n<body>\\n    <div class=\\"container\\">\\n        <form class=\\"form-horizontal\\">\\n     @csrf\\n  @method(\'PUT\')\\n            <fieldset>\\n                \x3c!-- Form Name --\x3e\\n                <legend>Employee Data</legend>\\n                \x3c!-- Text input--\x3e\\n                <div class=\\"form-group\\">\\n                    <label class=\\"col-md-4 control-label\\" for=\\"firstName\\">First Name:</label>\\n                    <div class=\\"col-md-4\\">\\n                        <input id=\\"firstName\\" name=\\"firstName\\" value=\\"{{ $emp->firstName }}\\" type=\\"text\\" placeholder=\\"\\" class=\\"form-control input-md\\">\\n                    </div>\\n                </div>\\n                \x3c!-- Text input--\x3e\\n                <div class=\\"form-group\\">\\n                    <label class=\\"col-md-4 control-label\\" for=\\"lastName\\">Last Name:</label>\\n                    <div class=\\"col-md-4\\">\\n                        <input id=\\"firstName\\" name=\\"firstName\\" value=\\"{{ $emp->lastName }}\\" type=\\"text\\" placeholder=\\"\\" class=\\"form-control input-md\\">\\n                    </div>\\n                </div>\\n                \x3c!-- Button (Double) --\x3e\\n                <div class=\\"form-group\\">\\n                    <label class=\\"col-md-4 control-label\\" for=\\"okOrCancel\\"></label>\\n                    <div class=\\"col-md-8\\">\\n                     <button type=\\"submit\\" id=\\"okOrCancel\\" name=\\"okOrCancel\\" class=\\"btn btn-success\\">\\n                         OK\\n                        </button>\\n         <button type=\\"submit\\" id=\\"okOrCancel\\" name=\\"okOrCancel\\" class=\\"btn btn-danger\\">\\n                         Cancel\\n                        </button>\\n                    </div>\\n                </div>\\n            </fieldset>\\n        </form>\\n    </div>\\n</body>\\n</html>\\n```\\n\\n修改 EmployeesController.php\\n\\n```php\\npublic function update(Request $request, $id)\\n    {\\n        $emp = Employee::find($id);\\n        $emp->firstName = $request->firstName;\\n        $emp->lastName = $request->lastName;\\n        $emp->save();\\n        return redirect(\\"/employees\\");\\n    }\\n```\\n\\n## 刪除會員資料\\n\\n修改 EmployeesController.php\\n\\n```php\\npublic function destroy($id)\\n    {\\n        $emp = Employee::find($id);\\n        $emp->delete();\\n        return redirect(\\"/employees\\");\\n    }\\n```\\n","tocContent":""}')},4903:function(n){"use strict";n.exports=JSON.parse("{\"name\":\"MQTT 學習筆記.md\",\"content\":\"# MQTT\\n\\n> 目前最新版本為 v5.0 (但 v3.1 版較為普及)\\n\\n>\\n\\n## 概述\\n\\n適用於 Server 與 Client 訊息傳 遞的通訊協定\\n\\n利用訂閱(Subscribe)與發佈(Public)的機制來進行訊息傳遞\\n\\n因其訊息結構簡單且輕量化，因此非常適合用於硬體效能較低的控制器，或作為物聯網的輕量資料收集應用。\\n\\n在此架構下，會有三種角色：\\n\\n- `Broker`: 代理人\\n- `Publisher`: 訊息發佈人\\n- `Subscriber`: 訊息訂閱者\\n\\n訊息發佈者(Publisher)多為感測器，發送資料。訊息訂閱者(Subscriber)為使用者的裝置(pc, 手機)，代理人(Broker)接收來自感測器的資料，透過 Topic 來辨別目標的使用者裝置。有訂閱 Topic 的訊息訂閱，會收到相對應的資料。\\n\\n### MQTT 訊息格式\\n\\n- `Control Header`(1 byte)\\n- `Remaining Length`(1 - 4 bytes)\\n- `Variable Header`\\n- `Payload`\\n\\nControl Header 和 Remaining Length 為必須，後面的 Variable Header 和 Payload 則是依需求決定。\\n\\n在傳遞的過程中，Publisher 不需要知道 Subscriber 的 IP ，只需要知道 Broker 的位址就可以進行訊息傳遞。\\n\\nTopic 有階層式設計，用`/`分開，並且有大小寫的差異。\\n\\n### 重要特色\\n\\nMQTT 可以針對網路品質(QoS)，決定操作等級\\n\\n- `QoS Level0`: Publisher 丟訊息給 Broker 後不理\\n- `QoS Level1`: Publisher 丟出訊息後，Broker 必回傳 PUBACK 以確定訊息有收到，倘若沒收到 PUBACK，Publisher 會再重傳一次資料。(缺點為若回傳 PUBACK 時斷線，Publisher 會判斷傳送失敗而再重傳一次資料，將導致 Subscriber 重複收到相同的資料)\\n- `QoS Level2`: 在 Publisher 確認 Broker 有收到訊息後，Broker 才將資料傳遞給 Subscriber，且 Subscriber 收到訊息後，也須回傳 PUBACK 給 Publisher，可避免收到重複的訊息，但較佔頻寬。\\n\\n## 在 windows 建立 MQTT 測試主機: Eclipse Mosquitto\\n\\n- 在[官網](https://mosquitto.org/download/)下載。\\n- 在 `Choose Components` 中，如果勾選 `service` 的選項，MQTT Broker 就會變成 windows 的服務，當開機時便會被執行。(若測試環境，建議手動開啟即可)\\n- 設定 windows 防火牆：在 MQTT 預設的通訊埠號為 1883 在 windows 是關閉的。\\n  - 開啟 windows Defender 防火牆設定頁面，按下進階設定。\\n  - 輸入規則，按下新增規則\\n  - 選擇連接埠\\n  - 選擇 TPC 通訊協定與特定本機連接埠 1833\\n  - 選擇允許連線\\n  - 選擇私人連線\\n  - 設定名字，即可完成針對 TPC 連線的 1833 port 輸入規則\\n  - 接著設定輸出規則，步驟相同，一樣指定 TPC 與埠號 1833\\n  - 最後確認輸入及輸出正常啟用即可\\n\\n## 在虛擬主機建立 MQTT Broker: Mosquitto\\n\\n- 下載 mosquitto 程式庫\\n\\n  ```bash\\n  sudo apt-add-repository ppa:mosquitto-dev/mosquitto-ppa\\n  ```\\n\\n- 更新程式庫\\n\\n  ```bash\\n  sudo apt-get update\\n  ```\\n\\n- 安裝 mosquitto\\n\\n  ```bash\\n  sudo apt-get install mosquitto\\n  ```\\n\\n  - 安裝好後，broker 會自動運行\\n\\n- 控制指令\\n\\n  ```bash\\n  # 查詢 mosquitto 服務狀態\\n  systemctl status mosquitto\\n\\n  # 啟動 mosquitto 服務\\n  sudo systemctl start mosquitto\\n\\n  # 停止 mosquitto 服務\\n  sudo systemctl stop mosquitto\\n\\n  # 重新啟動 mosquitto 服務\\n  sudo systemctl restart mosquitto\\n  ```\\n\\n- 確認運行\\n\\n  - 查看 server 狀態\\n\\n  ```bash\\n  sudo service mosquitto status\\n  ```\\n\\n  - 列舉目前作用中的連線：mosquitto server 預設運作於 port: 1833\\n\\n  ```bash\\n  rexlite_public@rexlitemqtt:~$ netstat -an\\n  Active Internet connections (servers and established)\\n  Proto Recv-Q Send-Q Local Address           Foreign Address         State\\n  tcp        0      0 0.0.0.0:1833            0.0.0.0:*               LISTEN\\n  ```\\n\\n- 本機測試\\n\\n  - `-d` debug 模式\\n  - `-t` 訂閱的主題\\n  - `-h` broker 的 IP\\n  - `-m` 發送的內容\\n  - `-v` 顯示主題名稱\\n\\n  - 訂閱\\n\\n    ```bash\\n    mosquitto_sub -v -d -t <topic> -u <user> -P <Password>\\n    ```\\n\\n  - 推送\\n\\n    ```bash\\n    mosquitto_pub -d -t <Topic> -m <Message> -u <User> -P <Password>\\n    ```\\n\\n- 開啟 server 防火牆的 port: 1883\\n\\nmosquitto 的 broker 通訊埠號預設為：1833，因此需要在 server 的防火牆開通道\\n\\n讓外界可以透過這個通道跟 MQTT Broker 溝通\\n\\n- 打開資訊欄 => 虛擬私有雲網路 => 防火牆 => CREATE FIREWALL rule\\n- 填入\\n  - 名稱：自訂名稱\\n  - 目標：選擇網路中所有執行個體\\n  - 來源 ip 範圍：0.0.0.0/0\\n- 通訊協定和通訊埠：\\n  - 指定的通訊協定和通訊埠：tcp:1883\\n- 點擊建立\\n\\n## Mosquitto conf 設定與啟動\\n\\n移動到軟體檔案安裝的目錄下(linux: /etc/mosquitto)，用編輯器打開 mosquitto.conf。\\n\\n### 設定使用者須使用帳號密碼連線\\n\\n用 `mosquitto_passwd`，來建立密碼\\n\\n```bash\\nmosquitto_passwd -c <password file> <username>\\n```\\n\\n- 參數 `-c` 為建立密碼文件，若指定的檔案已存在，將會被覆蓋\\n\\n若要將更多的使用者添加到現有的文件中，則省略 `-c` 參數\\n\\n```bash\\nmosquitto_passwd <password file> <username>\\n```\\n\\n若要從密碼文件中刪除用戶\\n\\n```bash\\nmosquitto_passwd -D <password file> <username>\\n```\\n\\n```txt\\nallow_anonymous false\\npassword_file C:\\\\你的路徑\\\\mosquitto\\\\usrlist.txt\\nlistener 1883\\n```\\n\\n- `allow_anonymous false`: 不允許匿名登入\\n- `password_file` : 指定帳號清單的目錄\\n- `listener` : 指定遠端登入時可以使用的 PORT\\n\\n### 重新啟動 Mosquitto\\n\\n```bash\\nsudo systemctl restart mosquitto\\n```\\n\\n### 啟動 MQTT Broker\\n\\n在安裝目錄下輸入\\n\\n```bash\\n./mosquitto.exe -c mosquitto.conf -v\\n```\\n\\n- `-c` 指定 config 檔\\n- `-v` verbose mode 詳細模式\\n\\n當啟動成功會顯示所有 broker 的即時資訊\\n\\n## 測試 Broker\\n\\n- Chrome 瀏覽器擴充程式：MQTTLens\\n  - [MQTT 教學（四）：使用 MQTTLens 訂閱與發布 MQTT 訊息](https://swf.com.tw/?p=1009)\\n- MQTT Explorer\\n  - [| ESP32 教學 | Mosquitto conf 設定與 MQTT 測試](https://jimirobot.tw/esp32-mosquitto-conf-mqtt-tutorial/)\\n\\n## 安裝身分驗證套件: mosquitto-auth-plugin\\n\\n> Ubuntu 20\\n>\\n> Mosquitto 2.0  \\n> [mosquitto-auth-plugin](https://github.com/jpmens/mosquitto-auth-plug)  \\n> MySQL\\n>\\n> [Mosquitto 2.0 + mosquitto-auth-plugin + MySQL](https://www.jmeze.net/2021/06/mosquitto-20-mosquitto-auth-plugin-mysql.html)\\n>\\n> [Ubuntu 18 使用 apt 安装 mosquitto auth plugin 与 MySQL](https://www.jianshu.com/p/08b42c170a6a)\\n>\\n> [mosquitto 权限验证](https://tongxinmao.com/Article/Detail/id/166)\\n\\n### 設置 mosquitto\\n\\n- 安裝所需套件\\n\\n  ```bash\\n  apt install gcc g++ make xsltproc docbook-xsl libwebsockets-dev libmysqlclient-dev\\n  ```\\n\\n- 卸載舊版本的 Mosquitto\\n\\n  ```bash\\n  apt purge mosquitto\\n  ```\\n\\n- 從官方安裝 mosquitto 源碼\\n\\n  ```bash\\n  wget https://mosquitto.org/files/source/mosquitto-2.0.10.tar.gz\\n  tar xvf mosquitto-2.0.10.tar.gz\\n  ```\\n\\n- 更改 config.mk 設定\\n\\n  ```config\\n  WITH_WEBSOCKETS:=yes\\n  WITH_CJSON:=no\\n  ```\\n\\n  - `WITH_WEBSOCKETS` 當需要使用 websockets 連線到 mosquitto 時，才將其開啟。\\n  - `WITH_CJSON` 將此設定開啟會報錯(未知原因)\\n\\n- 將 mosquitto 編譯並安裝\\n\\n  ```bash\\n  make\\n  make install\\n  ```\\n\\n- 建立 mosquitto 使用者並改變目錄權限\\n\\n  ```bash\\n  useradd -r mosquitto\\n  mkdir /var/log/mosquitto\\n  chown mosquitto:mosquitto /var/log/mosquitto/\\n  mkdir /var/lib/mosquitto\\n  chown mosquitto:mosquitto /var/lib/mosquitto/\\n  ```\\n\\n- 建立文件 /etc/systemd/system/mosquitto.service\\n\\n  ```bash\\n  touch /etc/systemd/system/mosquitto.service\\n  ```\\n\\n  ```service\\n  [Unit]\\n  Description=Mosquitto MQTT v3.1/v3.1.1 server\\n  Wants=network.target\\n  Documentation=http://mosquitto.org/documentation/\\n\\n  [Service]\\n  Type=simple\\n  User=mosquitto\\n  Group=mosquitto\\n  ExecStart=/usr/local/sbin/mosquitto -c /etc/mosquitto/mosquitto.conf\\n  Restart=on-failure\\n  SyslogIdentifier=Mosquitto\\n\\n  [Install]\\n  WantedBy=multi-user.target\\n  ```\\n\\n### 安裝 mosquitto-auth-plug 套件\\n\\n- git clone\\n\\n```bash\\ngit clone https://github.com/kmihaylov/mosquitto-auth-plug.git\\n```\\n\\n- 在 mosquitto-auth-plug 的目錄底下編輯 config.mk 的副本\\n\\n```bash\\ncp config.mk.in config.mk\\nvim config.mk\\n```\\n\\n- 根據實際環境，設定 config.mk\\n\\n```mk\\n# mosquitto 源碼\\n# MOSQUITTO_SRC = /etc/mosquitto-2.0.10\\nMOSQUITTO_SRC = <your path>/mosquitto\\n\\n# OPENSSLDIR = /usr/lib/ssl\\nOPENSSLDIR = <your path>\\n```\\n\\n- 可以使用 `whereis openssl` 指令來顯示 OpenSSL 的目錄\\n\\n- 編譯此套件\\n\\n```bash\\nmake\\n```\\n\\n- errors\\n\\n```bash\\n/usr/local/include/mosquitto_plugin.h:167:46: error: unknown type name ‘mosquitto_plugin_id_t’; did you mean ‘mosquitto_property’?\\n```\\n\\n修改 `auth-plug.c` 與 `log.c` 檔\\n\\n```c\\n#include <mosquitto_broker.h>\\n#include <mosquitto_plugin.h>\\n#include <mosquitto.h>\\n```\\n\\n- 將編譯完成後生成的 `auth-plug.so` 複製至 mosquitto 的目錄下(不是源碼目錄，是安裝後的目錄)\\n\\n```bash\\ncp auth-plug.so /var/lib/mosquitto\\n```\\n\\n- 進入 mosquitto 安裝後的目錄(預設為 etc/mosquitto)，複製 mosquitto.conf.example 並在文件最後加入設定\\n\\n```conf\\ninclude_dir /etc/mosquitto/conf.d\\n```\\n\\n- 在 mosquitto 目錄下建立 conf.d 資料夾，並新增 auth-plug.conf\\n\\n```bash\\nmkdir /etc/mosquitto/conf.d\\nvim auth-plug.conf\\n```\\n\\n```conf\\n# auth_plugin /var/lib/mosquitto/auth-plug.so\\nauth_plugin /<your path>/auth-plug.so\\nauth_opt_backends mysql\\nauth_opt_log_quiet false\\n# auth_opt_host localhost\\nauth_opt_host <your mysql host>\\n# auth_opt_port 3306\\nauth_opt_port <your mysql port>\\nauth_opt_dbname <your mysql schema>\\nauth_opt_user <your mysql user>\\nauth_opt_pass <your mysql password>\\n\\nauth_opt_userquery SELECT pw FROM <your_users_table> WHERE username = '%s'\\nauth_opt_superquery SELECT COUNT(*) FROM <your_users_table> WHERE username = '%s' AND super = 1\\nauth_opt_aclquery SELECT topic FROM <your_acls_table> WHERE (username = '%s') AND (rw >= %d)\\n# auth_opt_superusers Sup\\nauth_opt_superusers S*\\nauth_opt_ssl_enabled true\\n```\\n\\n- 更改檔案權限\\n\\n  ```bash\\n  chown mosquitto:mosquitto auth-plug.conf\\n  chmod go-rwx auth-plug.conf\\n  ```\\n\\n### 若 mosquitto 無法正常運行\\n\\n使用 `sudo systemctl start mosquitto -l` 啟動 Mosquitto\\n\\n使用 `sudo systemctl status mosquitto -l` 查看運行狀態\\n\\n若狀態為失敗，運行輸入 `sudo /usr/local/sbin/mosquitto -c /etc/mosquitto/mosquitto.conf` (ExecStart=)，查看詳細的啟動錯誤資訊\\n\\n- 缺乏權限：將缺乏權限的目錄或是檔案，其權限歸於 mosquitto\\n- libmosquitto.so.1:cannot open shard object\\n  - 運行 `sudo /sbin/ldconfig` 更新庫的連接器緩存\\n\\n## 安裝身分驗證套件: mosquitto-go-auth\\n\\n> 僅支援 Linux (Debian, Ubuntu and Mintus) 和 MacOS\\n>\\n> [iegomez/mosquitto-go-auth](https://github.com/iegomez/mosquitto-go-auth#build)\\n>\\n> [Mosquitto 安装与部署](https://www.cnblogs.com/IC1101/p/14749722.html)\\n>\\n> [Uninstalling Go (golang)](https://askubuntu.com/questions/742078/uninstalling-go-golang)\\n\\n### 設置 mosquitto: 同 mosquitto-auth-plug 套件\\n\\n### 安裝 mosquitto-go-auth\\n\\n- 安裝之前，需先在系統上安裝 golang，所需 go 最低版本為 1.13.8。\\n\\n```bash\\ngo version\\n```\\n\\n- 安裝 go (若要更新 golang，需先將舊版本解除安裝 remove golang)\\n\\n```bash\\n# Update the following as per your system configuration\\nexport GO_VERSION=1.16.4\\nexport GO_OS=linux\\nexport GO_ARCH=amd64\\n\\nwget https://dl.google.com/go/go${GO_VERSION}.${GO_OS}-${GO_ARCH}.tar.gz -O golang.tar.gz\\nsudo tar -C /usr/local -xzf golang.tar.gz\\nexport PATH=$PATH:/usr/local/go/bin\\nrm golang.tar.gz\\n\\n# Prints the Go version\\ngo version\\n```\\n\\n- 將 mosquitto-go-auth 套件，git clone 下來，並打包\\n\\n```bash\\nmake\\n```\\n\\n- 設定 mosquitto 文件(mosquitto.conf)\\n\\n```conf\\ninclude_dir /etc/mosquitto/conf.d\\n```\\n\\nvim /mosquitto/conf.d/go-auth.conf\\n\\n```conf\\n# 套件編譯完成後的檔案\\nauth_plugin /etc/mosquitto/conf.d/go-auth.so\\n\\n# 後端\\nauth_opt_backends mysql\\n\\n# 密碼編碼方式\\nauth_opt_hasher bcrypt\\nauth_opt_hasher_cost 10\\n\\n# 設定  mosquitto log (上線後應將 log_level debug 關閉)\\nauth_opt_log_level debug\\nauth_opt_log_dest file\\nauth_opt_log_file /var/log/mosquitto/mosquitto.log\\n\\nauth_opt_mysql_protocol tcp\\n\\n# 允許使本機密碼\\nauth_opt_mysql_allow_native_passwords true\\n\\n# 連接資料庫的設定\\nauth_opt_mysql_host localhost\\nauth_opt_mysql_port 3306\\nauth_opt_mysql_dbname max_system\\nauth_opt_mysql_user max_system\\nauth_opt_mysql_password maxsystem@2021\\nauth_opt_mysql_connect_tries 5\\nauth_opt_mysql_userquery SELECT password_hash FROM test_user WHERE username = ? limit 1\\nauth_opt_mysql_superquery SELECT COUNT(*) FROM test_user WHERE username = ? AND is_admin = 1\\nauth_opt_mysql_aclquery SELECT topic FROM test_acl WHERE test_user_id = (SELECT id FROM test_user WHERE username = ?) AND (rw >= ?)\\n```\\n\\n### acl 權限設定\\n\\n其實一般而言只會使用到權限 2、5、7\\n\\n```txt\\n0: no access (NULL)\\n1: read access (r)  // 不會動\\n2: write access (w)\\n3: read and write access (rw)\\n4: subscribe access (s)\\n5: read & subscribe access (rs)\\n6: write & subscribe access (ws)\\n7: read, write and subscribe access (rws)\\n```\\n\\n## MQTT Client\\n\\n> [php-mqtt/client](https://github.com/php-mqtt/client)\\n>\\n> [php-mqtt/client-examples](https://github.com/php-mqtt/client-examples)\\n\\n### 安裝\\n\\n```git\\ngit clone https://github.com/php-mqtt/client-examples.git\\n```\\n\\n將專案複製到本機，進入專案資料夾，啟動 composer\\n\\n```bash\\ncd client-examples\\ncomposer install\\n```\\n\\n### 設定 mqtt-client 連線\\n\\n進入 share 資料夾，編輯 config.php\\n\\n```php\\n<?php\\n\\ndeclare(strict_types=1);\\n\\ndefine('MQTT_BROKER_HOST', '127.0.0.1');  // host\\ndefine('MQTT_BROKER_PORT', 1883);         // port\\ndefine('MQTT_BROKER_TLS_PORT', 8883);     // tls port\\n\\ndefine('TLS_SERVER_CA_FILE', '');\\ndefine('TLS_CLIENT_CERTIFICATE_FILE', '');\\ndefine('TLS_CLIENT_CERTIFICATE_KEY_FILE', '');\\ndefine('TLS_CLIENT_CERTIFICATE_KEY_PASSPHRASE', null);\\n\\ndefine('AUTHORIZATION_USERNAME', '');     // mqtt broker username\\ndefine('AUTHORIZATION_PASSWORD', '');     // mqtt broker password\\n```\\n\",\"tocContent\":\"- [MQTT](#mqtt)\\n  - [概述](#概述)\\n    - [MQTT 訊息格式](#mqtt-訊息格式)\\n    - [重要特色](#重要特色)\\n  - [在 windows 建立 MQTT 測試主機: Eclipse Mosquitto](#在-windows-建立-mqtt-測試主機-eclipse-mosquitto)\\n  - [在虛擬主機建立 MQTT Broker: Mosquitto](#在虛擬主機建立-mqtt-broker-mosquitto)\\n  - [Mosquitto conf 設定與啟動](#mosquitto-conf-設定與啟動)\\n    - [設定使用者須使用帳號密碼連線](#設定使用者須使用帳號密碼連線)\\n    - [重新啟動 Mosquitto](#重新啟動-mosquitto)\\n    - [啟動 MQTT Broker](#啟動-mqtt-broker)\\n  - [測試 Broker](#測試-broker)\\n  - [安裝身分驗證套件: mosquitto-auth-plugin](#安裝身分驗證套件-mosquitto-auth-plugin)\\n    - [設置 mosquitto](#設置-mosquitto)\\n    - [安裝 mosquitto-auth-plug 套件](#安裝-mosquitto-auth-plug-套件)\\n    - [若 mosquitto 無法正常運行](#若-mosquitto-無法正常運行)\\n  - [安裝身分驗證套件: mosquitto-go-auth](#安裝身分驗證套件-mosquitto-go-auth)\\n    - [設置 mosquitto: 同 mosquitto-auth-plug 套件](#設置-mosquitto-同-mosquitto-auth-plug-套件)\\n    - [安裝 mosquitto-go-auth](#安裝-mosquitto-go-auth)\\n    - [acl 權限設定](#acl-權限設定)\\n  - [MQTT Client](#mqtt-client)\\n    - [安裝](#安裝)\\n    - [設定 mqtt-client 連線](#設定-mqtt-client-連線)\"}")},3078:function(n){"use strict";n.exports=JSON.parse('{"name":"Markdown 學習筆記.md","content":"# Markdown 學習筆記\\n\\n## Markdown 程式碼區塊可宣告的程式語言\\n\\n| 語言名稱   | Markdown 語言宣告                 | 常見檔名                 |\\n| ---------- | --------------------------------- | ------------------------ |\\n| ApacheConf | apacheconf, aconf, apache         | \\\\*.apacheconf, .htaccess |\\n| Blade      | blade                             | \\\\*.blade                 |\\n| CSS        | css                               | \\\\*.css                   |\\n| Git Config | git-config, gitconfig, gitmodules | \\\\*.gitconfig, .gitconfig |\\n| HTML       | html, xhtml                       | \\\\*.html                  |\\n| HTML+PHP   | html+php                          | \\\\*.phtml                 |\\n| HTTP       | http                              | \\\\*.http                  |\\n| JSON       | json                              | \\\\*.json, .arcconfig      |\\n| JavaScript | javascript, js, node              | \\\\*.js, Jakefile          |\\n| Makefile   | makefile, bsdmake, make, mf       | \\\\*.mak, BSDmakefile      |\\n| Markdown   | markdown, pandoc                  | \\\\*.md, contents.lr       |\\n| Nginx      | nginx                             | \\\\*.nginxconf, nginx.conf |\\n| PHP        | php, inc                          | \\\\*.php, .php             |\\n| Text       | text, fundamental                 | \\\\*.txt, COPYING          |\\n| Vue        | vue                               | \\\\*.vue                   |\\n","tocContent":""}')},1023:function(n){"use strict";n.exports=JSON.parse("{\"name\":\"MySQL學習筆記.md\",\"content\":\"# MySQL 學習筆記\\n\\n>\\n\\n## 環境設定\\n\\n### 設定時區\\n\\n- `show variables like '%time_zone%'` 查看當前時區\\n  - 會返回兩行紀錄，第一行為 system_time_zone(系統時區)，第二行為 time_zone(資料庫時區)\\n- `set time_zone='+8:00'` 設置當前請求的時區\\n  - 不須重新連接 mysql\\n  - 僅當前的請求有效，若關閉則回復原始值。\\n- `set global time_zone='+8:00` 設定全域時區\\n  - 全域請求有效，但必須重新連接 mysql 才會生效(exit 後重新 mysql -uroot -p 進行連接)。\\n  - 不須重啟 mysql，重啟後回復原始值\\n- 修改 mysql 設定文件\\n  - 在 my.ini 中添加\\n  - 須重啟 mysql\\n\\n```ini\\n[mysqld]\\ndefault-time-zone=+00:00\\ncharacter-set-server=utf8mb4\\n```\\n\\n### MariaDB 設定命名時區\\n\\n命名時區是指使用時區的名字，而不是標準時間的小時差。例如 `Asia/Taipei` 就是命名時區，而不是 +08:00。\\n在 MariaDB 中域設有時區表，但預設為空，需要填充這些表後才能使用。\\n\\n#### 從 zoneinfo 匯入時區\\n\\n若系統環境為類 Unix 系統(Mac OS, Linux, FreeBSD, Sun Solaris)，zoneinfo 文件已經包含在系統中。\\n輸入指令將時區表加入 MariaDB 中的 MySQL 資料庫中\\n\\n```bash\\nmysql_tzinfo_to_sql /usr/share/zoneinfo | mariadb -u root -p mysql\\n&\\nmysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -u root -p mysql\\n```\\n\\n#### 從 mysql 提供的指令碼匯入\\n\\n由於 windows 沒有 zoneinfo 資料庫，所以必須透過 sql 指令碼匯入時區表\\n\\n- 下載 sql 指令碼並解壓縮：[https://downloads.mysql.com/general/timezone_2022g_posix_sql.zip](https://downloads.mysql.com/general/timezone_2022g_posix_sql.zip)\\n- 登入 mariaDB\\n\\n```bash\\n.\\\\mysql.exe -u root -p\\n# 輸入 root 使用者密碼\\n```\\n\\n- 連接 MySQL 資料庫\\n\\n```bash\\nUSE mysql\\n```\\n\\n- 從 SQL 指令碼匯入資料\\n\\n```bash\\nSOURCE C:\\\\Users\\\\Adam\\\\Downloads\\\\timezone_posix.sql\\n```\\n\\n- 檢查是否正確匯入\\n\\n```bash\\nSELECT * FROM mysql.time_zone_name;\\n```\\n\\n```output\\n+----------------------------------+--------------+\\n| Name                             | Time_zone_id |\\n+----------------------------------+--------------+\\n| Africa/Abidjan                   |            1 |\\n| Africa/Accra                     |            2 |\\n| Africa/Addis_Ababa               |            3 |\\n| Africa/Algiers                   |            4 |\\n| Africa/Asmara                    |            5 |\\n| Africa/Asmera                    |            6 |\\n| Africa/Bamako                    |            7 |\\n| Africa/Bangui                    |            8 |\\n| Africa/Banjul                    |            9 |\\n| Africa/Bissau                    |           10 |\\n...\\n...\\n| Zulu                             |          597 |\\n+----------------------------------+--------------+\\n597 rows in set (0.000 sec)\\n```\\n\\n## 資料表語法\\n\\n- 建立資料表\\n\\n  ```sql\\n  CREATE TABLE 資料表名稱 (\\n    欄位名稱  資料型態,\\n    ...\\n  )\\n  ```\\n\\n- 增加資料表欄位\\n\\n  ```sql\\n  ALTER TABLE 資料表 ADD 欄位名稱 資料型態;\\n  ```\\n\\n- 增加資料表內容\\n\\n  ```sql\\n  INSERT INTO 資料表 (欄位1, 欄位2, 欄位3, ...)\\n  VALUES (值1,  值2,  值3, ...);\\n  ```\\n\\n- 更新資料欄位\\n\\n  ```sql\\n  UPDATE 資料表 SET 欄位1 = '資料1', 欄位2 = '資料2' WHERE 條件;\\n  ```\\n\\n- 刪除資料欄位\\n\\n  ```sql\\n  delete from 資料表 where 欄位 = ;\\n  truncate table 資料表;\\n  drop table 資料表\\n\\n  -- 刪除外鍵欄位\\n  ALTER TABLE 資料表 DROP FOREIGN KEY FK_欄位 ; -- 先刪除外鍵名稱\\n  ALTER TABLE 資料表 DROP `欄位`;               --  才能刪除欄位\\n  ```\\n\\n- 選擇欄位\\n\\n  ```sql\\n      SELECT 別名.欄位,\\n      DISTINCT 別名.欄位          -- 欄位資料不重複\\n      CONCAT(別名.欄位, 別名.欄位) -- 欄位合併\\n      FROM 資料表 as 別名         -- 別名\\n\\n      join 資料表B on 資料表別名.欄位 = 資料表B別名.欄位\\n\\n      WHERE 別名.欄位 = \\\"內容\\\" AND 別名.欄位 = 內容  -- ...而且...\\n      WHERE (別名.欄位 = \\\"內容\\\" OR 別名.欄位 = 內容) -- (..或者..)\\n                                                  -- OR的前後要加上括弧，將條件限制住\\n      WHERE 別名.欄位 LIKE \\\"%內容%\\\"                 -- 內容部分有符合者\\n      WHERE 別名.欄位 BETWEEN 起始 and 結束         -- 連續不間段的區間\\n      WHERE 別名.欄位 in (內容, 內容)               -- 挑選同一型態指定內容\\n\\n      GROUP BY                -- 相同的東西記錄在一起\\n      HAVING                  -- 接在 GROUP BY 之後設定條件\\n      UNION\\n      ORDER BY 別名.欄位       -- 排序(預設由小到大)\\n      ORDER BY 別名.欄位 DESC  -- 排序由大到小\\n      LIMIT 起始位置, 資料筆數; -- 選擇資料中要顯示的項目\\n  ```\\n\\n- 使用者定義變數\\n\\n  ```sql\\n  SELECT @x; --\x3e x值為NULL\\n\\n  SET @x = 1;\\n  SELECT @x, ProductID  FROM Products;\\n  ```\\n\\n- 子查詢:查詢裡面有查詢\\n\\n  ```sql\\n  --\x3e 檢查資料表302中的 ProductID，不存在於資料表301 的 ProductID\\n  SELECT * FROM lab302\\n  WHERE ProductID NOT in (SELECT ProductID FROM lab301)\\n  ```\\n\\n- inner join | left join | right join | cross join\\n\\n  ```sql\\n  -- 結合兩個表中某欄位具有相同資料，一起列出查詢結果\\n  inner join\\n  -- 列出左/右邊的表，另一邊的表列出有相同的部分，不足的欄位印出NULL\\n  left join | right join\\n  -- 將所有可能的組合通通列出來(交叉查詢)\\n  cross join\\n  ```\\n\\n## 資料型態\\n\\n- 字串類型\\n\\n  - `char()` 與 `varchar()` 的空間大小是以後面參數來表示欄位的大小，不同的地方在於`varchar()` 是以動態的方式儲存。\\n\\n    ```sql\\n    char(10) = \\\"hello     \\\" -- 10 bytes  包含了五個空格\\n    varchar(10) = \\\"hello\\\"   -- 5 bytes\\n    ```\\n\\n  - `char()` 固定大小浪費空間，但是所需的計算時間少。\\n  - `varchar()` 不固定長度，但是每一次抓取都要運算，花費 CPU 運算時間\\n\\n- 數值類型\\n\\n  |    type     | storage(bytes) |          signed          |    unsigned    |\\n  | :---------: | :------------: | :----------------------: | :------------: |\\n  |  `TINYINT`  |       1        |        -128 ~ 127        |    0 ~ 225     |\\n  | `SMALLINT`  |       2        |      -32768 ~ 32767      |   0 ~ 65535    |\\n  | `MEDIUMINT` |       3        |    -8388608 ~ 8388607    |  0 ~ 16777215  |\\n  |    `int`    |       4        | -2147483648 ~ 2147483647 | 0 ~ 4294967295 |\\n  |  `BIGINT`   |       8        |  $-2^{63}$ ~ $2^{63}-1$  | 0 ~ $2^{64}-1$ |\\n\\n- `DECIMAL(x, y)` : x = 數值長度(包含小數點)，y = 小數點後的位數(不足補零)\\n\\n- 時間類型\\n\\n  - `YEAR` : YYYY\\n  - `TIME` : HH:MM:SS\\n  - `DATE` : YYYY-MM-DD\\n  - `DATETIM`E : YYYY-MM-DD HH:MM:SS\\n\\n- 鍵名\\n\\n  - `primary key` 主索引鍵(主鍵)\\n  - `foreign key` 外部索引鍵(外來鍵)\\n  - `UNIQUE` 唯一 不能有重複的資料\\n  - `_INCREMENT` 流水號\\n  - `DEFAULT =` 預設值\\n  - `CHECK ()` 資料寫入前的檢查(預設標準)\\n\\n- functions | method | 方法 | 函式 | 副程式 | 函數\\n\\n  - `count()` : 計算數量\\n  - `MAX()` : 找最大的那一個\\n  - `AVG()` : 平均值\\n  - `ABS()` : 取絕對值\\n  - `ROUND()` : 小數點四捨五入\\n\\n  ***\\n\\n  - 取得現在時間\\n    - `CURRENT_DATE()`\\n    - `SYSDATE()`\\n    - `NOW()`\\n\\n  ***\\n\\n  - `Year()` : 年\\n\\n  - `Month()` : 月\\n\\n  - `DAY()` : 日\\n\\n  - `LENGTH()` : 資料的大小 bytes\\n\\n  - `CHAR_LENGTH(`) : 字串的長度\\n\\n  ***\\n\\n  - `POWER(數值, N次方)` : 計算次方\\n\\n  - `SUBSTRING(欄位, 起始位置, 擷取長度)` : 擷取字串\\n\\n  - `INSTR(欄位, '指定的文字')` : 找出指定位置的位置，回傳數值\\n\\n  - `LEFT(欄位, 擷取長度)` : 從左邊開始擷取到指定長度\\n\\n  - `REPLACE(目標欄位, '目標字串', '要取代上字串')` :取代指定字元\\n\\n  - `RPAD(內容, 內容的長度, '取代的字')` : 內容不足或是超過的部分會被取代\\n\\n  - `REPEAT('要重複的字', 重複次數)` :重複輸入\\n\\n  ***\\n\\n  - 將字串轉換型態\\n    - `CONVERT('字串', 型態)`\\n    - `CAST('字串' AS 型態)`\\n\\n  ***\\n\\n  - `DATE_FORMAT(日期, \\\"%Y\\\")` :日期格式，取得日期中的項目\\n\\n  ***\\n\\n  - `IF(判斷條件, \\\"條件為T\\\", \\\"條件為F\\\")` :條件判斷為 true 返回 1，否則返回 2\\n\\n  - `ELT(數值、清單, '值1', '值2'......'值n')` :透過數值清單傳回指定之索引的項目\\n\\n  - `IFNULL(x, y)` : 如果 x 有值回傳 x，如果 x 為 NULL 回傳 y\\n\\n  - `ISNULL(x)` : 如果 x 為 NULL，ISNULL(x)會回傳 1，否則回傳 0\\n\\n  - `NULLIF(x, y)` : 如果 x = y 回傳 NULL，否則回傳 x\\n\\n  ***\\n\\n  - 類似 if else\\n\\n    ```sql\\n    CASE\\n      when condition(條件為true) then \\\"返回結果\\\"\\n      --如果條件為false就繼續下一行判斷\\n      when condition(條件為true) then \\\"返回結果\\\"\\n      else \\\"返回結果\\\" -- 如果上述條件都不符，就返回此結果\\n    end\\n    ```\\n\\n  - 不等於：\\n\\n    - `<>`\\n    - `!=`\\n    - `NOT`\\n\\n  - 比較：\\n    - `>=`\\n    - `<=`\\n\\n## 資料庫設計原則\\n\\n> 參考資料：\\n>\\n> [詳記一次 MySQL 千萬級大表最佳化過程！](https://www.ipshop.xyz/14954.html)\\n\\n### 資料庫設計和表建立時就要考慮效能\\n\\n表設計時要注意的東西\\n\\n1. 資料表欄位避免出現 null，null 值不容易查詢最佳化，且佔用額外的索引空間。推薦使用數字 0 代替 null。\\n2. 盡量使用 INT 而非 BIGINT，如果非負，則加上 UNSIGNED (這樣做數值會擴大一倍)，若使用 TINYINT、SMALLINT、MEDIUM_INT 更好。\\n3. 使用列舉或整數代替字串型別。\\n4. 資料表不要有太多欄位，在 20 個以內。\\n5. 用整型來存 ip\\n\\n索引\\n\\n1. 索引並不是越多越好。要根據查詢有針對性的建立，考慮在 WHERE 和 ORDER BY 命令上涉及的列建立索引，可根據 EXPLAIN 來檢視是否用了索引還是全表掃描。\\n2. 避免在 WHERE 子句中對欄位進行 NULL 值的判斷。否則將導致引擎放棄使用 index 而使用全表掃描。\\n3. 值分布很稀少的欄位不適合建立索引。例如「性別」這種只有兩三個值的欄位。\\n4. 字元欄位只建字首索引。\\n5. 字元欄位最好不要作為主鍵。\\n6. 不用外來見，用程式保證約束。\\n7. 盡量不使用 UNIQUE，由程式保證約束。\\n8. 使用多列索引時，主意順序和查詢條件保持一致，同時刪除不必要的單列索引。\\n\\n#### 選擇適合的資料型別\\n\\n1. 使用可存下面資料的最小資料型別：整型 < date, time < char, varchar < blob。\\n2. 使用簡單的資料型別，整型比字元處理開銷更小，因為字串的比較複雜。如：INT 型別儲存時間型別，BIGINT 型別轉 ip 函示。\\n3. 使用合理的欄位屬性長度，固定程度的表會更快。使用 enum、char 而不是 varchar。\\n4. 盡可能使用 NOT NULL 定義欄位。\\n5. 盡量使用 text，非用不可時，最好分表。\\n\\n#### 選擇適合的索引列\\n\\n1. 查詢頻繁的列，在 where, group by, order by, on 從句中出現的列。\\n2. where 條件中，>=, between, in 以及 like 字串加萬用字元 (%) 出現的列。\\n3. 長度小的列，索引欄位越小越好，因為資料庫的儲存單位是頁，一頁中能存下的資料越多越好。\\n4. 離散度越大(不同的值多)的列，放在聯合索引前面。檢視離散度，透過統計不同的列直來實現，count 越大，離散度越高。\\n\\n### SQL 的編寫需要注意最佳化\\n\\n1. 使用 limit 對查詢結果的紀錄進行限定。\\n2. 避免 select \\\\*，將要查詢的欄位列出來。\\n3. 是用連線(join) 來代替子查詢。\\n4. 拆分大的 delete 或 insert 陳述句。\\n5. 可透過開啟慢查詢日誌來找出較慢的 SQL。\\n6. 不進行列運算：SELECT id WHERE age + 1 = 10，任何對列的操作都將導致表掃描。他包括資料庫教程函式、計算運算式等等，查詢時要盡可能將操作移至等號右邊。\\n7. SQL 陳述句盡可能簡單：一條 SQL 只能在一個 CPU 運算。大陳述句拆成小陳述句，減少鎖時間。一條大 SQL 可以堵死整個庫。\\n8. OR 改成 IN：OR 的效率是 n 級別，IN 的效率是 log(n)級別，in 個數建議是控制在 200 以內。\\n9. 不用函式和觸發器，在應用程式實現。\\n10. 避免 %xxx 式的查詢。\\n11. 少用 join\\n12. 使用同型別進行比較，比如用 '123' 和 '123' 比，123 和 123 進行比較。\\n13. 盡量避免在 WHERE 子句中使用 != 或 <> 運算子，引擎會放棄使用索引而進行全表掃描。\\n14. 對於連續數值，使用 BETWEEN 不用 in：SELECT id FROM t WHERE num BETWEEN 1 AND 5\\n15. 串列資了不要拿全表，要使用 LIMIT 來分頁，每頁數量也不要太大。\\n\\n#### 引擎選擇\\n\\n- MyISAM(MySQL 5.1 及之前版本的預設引擎)\\n  - 不支援行鎖，讀取時對需要讀到的所有表加鎖，寫入時則對表加排他鎖。\\n  - 不支援事務\\n  - 不支援外來鍵\\n  - 不支援崩潰後的安全恢復\\n  - 在表有讀取查詢時，支援往表裡插入新紀錄。\\n  - 支援 BLOB 和 TEXT 的前 500 個字元索引，支援全文索引。\\n  - 支援延遲更新索引，極大提升寫入效能。\\n  - 對於不會進行修的表，支援壓縮表，極大減少磁碟空間佔用。\\n- InnoDB(MySQL 5.5 後成為預設索引)\\n  - 支援行鎖，採用 MVCC 來支援高併發\\n  - 支援事務\\n  - 支援外來鍵\\n  - 支援崩潰後的安全恢復\\n  - 不支援全文索引\\n\\n> MyISAM 適合 SELECT 密集型的表，而 InnoDB 適合 INSERT 和 UPDATE 密集型的表。\\n>\\n> MyISAM 速度很快，佔用儲存空間也小，但若程式要求事務則 InnoDB 是必須的。\\n\\n#### 分割槽\\n\\n分割槽的過程是將一個表或索引分解為多個更小、更可管理的部分。對於開發者而言，分割槽後資料表的使用方式和未分割的資料表是一樣的，只不過在物理儲存上，原本該表只有一個數據檔案，現在變成了多個，每個分割槽都是獨立的物件，可以獨自處理，有可以作為一個更大物件的一部分進行處理。\\n\\n## DB 命名原則\\n\\n- 命名只能使用英文字母、數字、下劃線，以英文字母開頭\\n- 避免用 MySQL 的保留字如：backup、call、group 等\\n- 所有資料庫物件使用小寫字母\\n\\n### 資料庫命名\\n\\n- 不超過 30 個字元\\n\\n### 資料表命名\\n\\n- 一律使用複數名詞\\n- 不超過 30 個字元\\n- 多對多關係中的中間表命名，為兩個表名稱，中間以`_`區隔，以單數命名 例如：`admins`和`members`，中間表命名為`admin_member`\\n\\n### 欄位命名\\n\\n- 各表之間相同意義的欄位必須同名\\n- 多單詞以`_`\\n- 外鍵約束欄位，以關聯的父層資料表名加上父層資料表欄位名來命名，中間以`_`區隔  \\n  例:父層資料表名`admins`，父層資料表欄位名`id`，關聯欄位名`admin_id`\\n\\n### 索引命名\\n\\n#### 外鍵索引\\n\\n- 資料表名稱\\\\_關聯欄位名稱\\\\_foreign\\n\\n## Function\\n\\n### CONVERT_TZ(dt,from_tz,to_tz) 轉換時區\\n\\n- dt 日期/時間\\n- from_tz 原始時區\\n- to_tz 目標時區\\n\\n```sql\\nSELECT CONVERT_TZ('2020-12-01 01:00:00','+00:00','+08:00') AS Result;\\n```\\n\\n```output\\n+---------------------+\\n| Result              |\\n+---------------------+\\n| 2020-12-01 09:00:00 |\\n+---------------------+\\n```\\n\\n### Event 事件\\n\\n用於定期執行某些資料庫任務\\n\\n- 用途：\\n  - 自動化維護\\n  - 刪除過期數據\\n  - 複製存檔、生成報告\\n\\n#### 範例\\n\\n- devices 資料表需要定時刪除已被標記 delete_at 的裝置\\n\\n```sql\\nCREATE EVENT delete_old_devices\\nON SCHEDULE\\n-- 每半年檢查一次，並刪除超過半年以上的資料\\nEVERY 6 MONTH\\nDO\\n  DELETE FROM devices WHERE deleted_at < DATE_SUB(NOW(), INTERVAL 6 MONTH);\\n```\\n\\n#### 基本使用\\n\\n- 查詢、刪除\\n\\n```sql\\nSHOW EVENTS; -- 查詢\\n\\nDROP EVENT IF EXISTS <event_name>; --刪除，IF EXISTS可以避免報錯\\n```\\n\\n- 啟用事件排程\\n\\n```sql\\nSET GLOBAL event_scheduler = ON;\\n```\\n\\n- 查看目前正在執行的程序\\n\\n```sql\\nSHOW PROCESSLIST;\\n```\\n\\n## 使用情境\\n\\n### 外鍵 onDelete 約束情況\\n\\n- 沒有加入`onDelete`  \\n  如果在關聯中的限制屬性，沒有加入`onDelete`，此時刪除外鍵約束的父層資料表中的欄位，會出現#1451 error\\n\\n  ```cmd\\n  #1451 - Cannot delete or update a parent row: a foreign key constraint fails (`test0505`.`posts`, CONSTRAINT `posts_user_id_foreign` FOREIGN KEY (`user_id`)     REFERENCES `users` (`id`))\\n  ```\\n\\n- onDelete('set null')\\n  刪除父層資料表的欄位時，同時會將關聯的子資料表中的欄位設為`null`。\\n- onDelete('cascade')\\n  刪除父層資料表的欄位時，同時會將關聯的子資料表中的欄位刪除。\\n\\n### ERROR: #1215 - Cannot add foreign key constraint\\n\\n- 可能原因:\\n  1. 添加外鍵約束時，目標欄位須和引用欄位具有相同的數據類型，int signed with int signed 或 int unsigned with int unsigned\\n  2. 在 not null 的欄位加上 on delete/update set null 的外鍵約束，須將該欄位設為 DEFAULT NULL\\n\\n### 刪除重複的資料\\n\\n#### 使用 `DISTINCT` 去除重複值\\n\\n需求：查找 `02:81:85:34:ED:DC` 表中的數據，將表中 `i`, `p`, `ep`, `eq`, `pf`, `created_at` 這六個欄位均重複的資料刪除，並重新整理 id\\n\\n先建立一個表，接者使用 `SELECT DISTINCT` 去除重複的值，並把去除重複值的資料，存入新資料表中\\n\\n```sql\\nCREATE TABLE `02:81:85:34:ED:DC_copy` (\\n  `id` int(10) UNSIGNED NOT NULL,\\n  `i` json DEFAULT NULL,\\n  `p` json DEFAULT NULL,\\n  `ep` json DEFAULT NULL,\\n  `eq` json DEFAULT NULL,\\n  `pf` json DEFAULT NULL,\\n  `created_at` datetime DEFAULT NULL\\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\\n\\nINSERT INTO `02:81:85:34:ED:DC_copy` (`i`, `p`, `ep`, `eq`, `pf`, `created_at`)\\nSELECT DISTINCT `i`, `p`, `ep`, `eq`, `pf`, `created_at` FROM `02:81:85:34:ED:DC`;\\n```\\n\\n最後刪掉原表，並將複製的表改名\\n\\n```sql\\ndrop tables `02:81:85:34:ED:DC`;\\nalter table `02:81:85:34:ED:DC_copy` rename to `02:81:85:34:ED:DC`;\\n```\\n\\n### 匯入 txt 檔\\n\\n建立資料表\\n\\n```sql\\ncreate table `city_raw_data` (\\n    `geonameid` int(10) NOT NULL,\\n    `name` varchar(200) DEFAULT NULL,\\n    `latitude` decimal(11, 8) DEFAULT NULL,\\n    `longitude` decimal(11, 8) DEFAULT NULL,\\n    `country code` varchar(10) DEFAULT NULL,\\n    `timezone` varchar(40) DEFAULT NULL,\\n    `modification date` date DEFAULT NULL\\n) ENGINE = InnoDB DEFAULT CHARSET = utf8;\\n```\\n\\n本地 txt 檔匯入\\n在 txt 檔中，每一個欄位用 tab 鍵進行分隔\\n\\n```sql\\nLOAD DATA INFILE \\\"C:/Users/RD/Desktop/ES.txt\\\" INTO TABLE `city_raw_data` (\\n`geonameid`,`name`,`asciiname`,`alternatenames`,`latitude`,`longitude`,`feature class`,`feature code`,`country code`,`cc2`,`admin1 code`,`admin2 code``admin3 code`,`admin4 code`,`population`,`elevation`,`dem`,`timezone`,`modification date`\\n)\\n```\\n\\n或用指定的符號進行分隔，如：`|`\\n\\n```sql\\nLOAD DATA INFILE \\\"C:/Users/RD/Desktop/ES.txt\\\" INTO TABLE `city_raw_data` FIELDS TERMINATED BY '|' (\\n    `geonameid`,\\n    `name`,\\n    `latitude`,\\n    `longitude`,\\n    `country code`,\\n    `timezone`,\\n    `modification date`\\n);\\n```\\n\\n### 複合主鍵與聯合主鍵，索引與聯合(複合)索引\\n\\n#### 複合主鍵與聯合主鍵\\n\\n- **複合主鍵**：表的主鍵含有一個以上的欄位組成，不使用無業務含意的自增 id 作為主鍵\\n\\n```sql\\ncreate table test\\n(\\n  'name' varchar(19) NOT NULL\\n  'id' number\\n  'value' varchar(10)\\n  primary key ('name', 'id')\\n)\\n```\\n\\n`name` 和 `id` 欄位組合起來就是 test 表的複合主鍵，他的出現是因為 `name` 欄位可能會出現重複，所以要加上 `id` 欄位，如此可以保證紀錄的唯一性。\\n\\n一般而言，主見的欄位資料長度和字串字數越少越好。\\n\\n當表中只有一個主鍵時，他是唯一的索引；當表中有多個主鍵時，稱為複合主鍵，複合主鍵聯合保證唯一索引。\\n\\n某者個主鍵欄位值出現重複是沒問題的，只要不是有多筆資料的所有主鍵值完全一樣，就不算重複。\\n\\n- **聯合主鍵**：多個主鍵聯合形成一個主鍵組合。\\n\\n聯合主鍵的意義：用兩個字串(或多字串)來確定一條紀錄。這兩個字串都不唯一，可以分別重複。\\n\\n如：主鍵 A 和主鍵 B 組成聯合主鍵\\n\\n主鍵 A 跟主鍵 B 的資料可以完全相同，聯合就在於主鍵 A 和主鍵 B 形成的聯合主鍵是唯一的。\\n下面的例子：主鍵 A 的數據是 1，主鍵 B 的數據也是 1，聯合主鍵其實是 11，11 是唯一值，不允許再出現 11 這個值。(即為多對多關係)\\n\\n| 主鍵 A | 主鍵 B |\\n| :----: | :----: |\\n|   1    |   1    |\\n|   2    |   2    |\\n|   3    |   3    |\\n\\n主鍵 A 與主鍵 B 的聯合主鍵值最多為：11, 12, 13, 21, 22, 23, 31, 32, 33\\n\\n#### 索引、聯合(複合)索引\\n\\n- **索引**：加快查詢速度的有效手段。\\n\\n  系統讀寫資料時，會自動選擇合適的索引作為存取路徑。\\n\\n  建立索引\\n\\n  ```sql\\n  -- 建立索引\\n  create [unique][cluster]index<索引名>\\n\\n  -- 刪除索引\\n  drop index <索引名>\\n  ```\\n\\n  建立資料表時同時建立索引\\n\\n  ```sql\\n  CREATE TABLE your_table_name (\\n    column1 datatype,\\n    column2 datatype,\\n    -- 其他列定義\\n    INDEX index_name (column_name)  -- 在這裡添加索引\\n  );\\n  ```\\n\\n  當建立 `your_table_name` 時，同時定義了一個名為 `index_name` 的索引，並指定了要建立索引的列 `column_name`。\\n  可以依照需求在資料表定義中添加多個索引。\\n\\n  - `INDEX` 關鍵字用於定義一個普通索引。如果要創建唯一鍵索引，您可以使用 UNIQUE INDEX。\\n  - `index_name` 是您為索引指定的名稱，用於在以後引用索引。\\n  - `column_name` 是您要為其建立索引的列名。\\n\\n  添加索引\\n\\n  ```sql\\n  ALTER TABLE your_table_name\\n  ADD INDEX index_name (column_name);\\n  ```\\n\\n  - `your_table_name` 是您要向其添加索引的資料表名稱。\\n  - `index_name` 是您為新索引指定的名稱。\\n  - `column_name` 是您要為其建立索引的列名。\\n\\n  ```sql\\n  ALTER TABLE users\\n  ADD INDEX idx_users_email (email);\\n  ```\\n\\n  索引是各種關係資料庫中，最常見的一種邏輯單元，是關係資料庫系統很重要的組成部分，對於提高檢索資料速度有很顯著的效果。\\n  索引的原理是利用根據索引值得到行指針，然後快速定位到資料庫紀錄。\\n\\n  索引的使用：\\n\\n  1. 主鍵(預設自帶索引)和外鍵(以及一些可以跟其他表觀聯的字段)\\n  2. where 子句中基常出現的字段。\\n  3. 索引應該建立在小字段上，大數據字段(bit, image, test, blob)等，不適用\\n\\n- **聯合(複合)索引**\\n\\n```sql\\n-- 建立聯合索引\\ncreate index <索引名> on 表名(欄位1, 欄位2, ...);\\n\\n-- 例如：有聯合索引 (a, b, c, d)\\nselect * from test where a=1 and b=2; -- a 和 b 索引都起作用\\n```\\n\\n索引生效原則：按照聯合索引的順序，由前往後依次使用生效，如果中間某個索引沒有使用，那麼斷點前面的索引部份起作用，斷點後面的索引沒有起作用。\\n\\n例如\\n\\n```sql\\nwhere a=1 and b=2 and d=4;\\n```\\n\\n則只有 a 和 b 索引起作用，中間 c 斷了，則 d 索引不起作用。\\n\\nmysql 會一值向右尋找直到遇到範圍查詢(>, <, between, like)時停止。\\n\\n如：\\n\\n```sql\\nwhere a = 1 and b = 2 and c > 3 and d = 4 ;\\n```\\n\\n若建立 (a, b, c, d)順序的索引，則索引範圍不會到 b ，因為 c 出現 \\\">\\\"。\\n如果建立(a, b, d, c)的順序，則\\n\\n```sql\\nwhere a = 1 and b = 2 and c > 3 and d = 4\\n```\\n\\n其中 abcd 都可以用到索引，並且 abd 的順序可以任意調整。\\n\\n```sql\\nselect * from test where b=2 and d=4 and a=1and c>3;\\n```\\n\\n以上 sql 語句中，a, b, c, d 都用到了索引\\n\\n**注意**\\n\\n1. 只要列中包含有 null 值，都將不會被包含在索引中，複合索引中只要有一列含有 null 值，那此列的複合索引就是無效的，因此在資料庫設計時盡量不要讓欄位的預設值為 null\\n2. 使用 like 關鍵字須注意：`like \\\"%aaa%\\\"` 不會命中索引，`like \\\"aaa%\\\"` 才會命中索引。\\n3. NOT IN 和操作都會變成全表掃描，not in 可以用 not exist 代替。\\n\",\"tocContent\":\"- [MySQL 學習筆記](#mysql-學習筆記)\\n  - [環境設定](#環境設定)\\n    - [設定時區](#設定時區)\\n    - [MariaDB 設定命名時區](#mariadb-設定命名時區)\\n      - [從 zoneinfo 匯入時區](#從-zoneinfo-匯入時區)\\n      - [從 mysql 提供的指令碼匯入](#從-mysql-提供的指令碼匯入)\\n  - [資料表語法](#資料表語法)\\n  - [資料型態](#資料型態)\\n  - [資料庫設計原則](#資料庫設計原則)\\n    - [資料庫設計和表建立時就要考慮效能](#資料庫設計和表建立時就要考慮效能)\\n      - [選擇適合的資料型別](#選擇適合的資料型別)\\n      - [選擇適合的索引列](#選擇適合的索引列)\\n    - [SQL 的編寫需要注意最佳化](#sql-的編寫需要注意最佳化)\\n      - [引擎選擇](#引擎選擇)\\n      - [分割槽](#分割槽)\\n  - [DB 命名原則](#db-命名原則)\\n    - [資料庫命名](#資料庫命名)\\n    - [資料表命名](#資料表命名)\\n    - [欄位命名](#欄位命名)\\n    - [索引命名](#索引命名)\\n      - [外鍵索引](#外鍵索引)\\n  - [Function](#function)\\n    - [CONVERT\\\\_TZ(dt,from\\\\_tz,to\\\\_tz) 轉換時區](#convert_tzdtfrom_tzto_tz-轉換時區)\\n    - [Event 事件](#event-事件)\\n      - [範例](#範例)\\n      - [基本使用](#基本使用)\\n  - [使用情境](#使用情境)\\n    - [外鍵 onDelete 約束情況](#外鍵-ondelete-約束情況)\\n    - [ERROR: #1215 - Cannot add foreign key constraint](#error-1215---cannot-add-foreign-key-constraint)\\n    - [刪除重複的資料](#刪除重複的資料)\\n      - [使用 `DISTINCT` 去除重複值](#使用-distinct-去除重複值)\\n    - [匯入 txt 檔](#匯入-txt-檔)\\n    - [複合主鍵與聯合主鍵，索引與聯合(複合)索引](#複合主鍵與聯合主鍵索引與聯合複合索引)\\n      - [複合主鍵與聯合主鍵](#複合主鍵與聯合主鍵)\\n      - [索引、聯合(複合)索引](#索引聯合複合索引)\"}")},4882:function(n){"use strict";n.exports=JSON.parse('{"name":"PHP namespace.md","content":"# PHP 命名空間\\n\\n> 參考資料：\\n>\\n> [namespace 命名空間詳解](https://learnku.com/articles/15064/namespace-namespace-detailed-explanation)\\n\\n## 什麼是命名空間\\n\\n在 php 中，語法規則不允許`變數`、`類別名稱`、`const 常數`在一個請求中出現多個相同的命名，若有應用程序不得不出現多個同名的`變數`、`類別名稱`、`const 常數`，此時可以將其放到不同的空間進行請求。\\n\\n這個不同的空間就稱作`命名空間 namespace`。空間可以作為一個`容器`、`儲存類別`、`函數`、`const 常數`的容器。\\n\\n- 同名元素在同一空間：\\n\\n  ```php\\n  function getInfo(){\\n    echo \\"hello\\";\\n  }\\n\\n  function getInfo(){\\n    echo \\"hello\\";\\n  }\\n  getInfo();\\n  ```\\n\\n  同名稱的兩個 function 在同一個空間存取會報錯，錯誤碼：\\n\\n  ```txt\\n  Fatal error: Cannot redeclare getInfo() (previously declared in...)\\n  ```\\n\\n- 同名元素在不同空間\\n\\n  ```php\\n  namespace Test1;\\n\\n  function getInfo() {\\n    echo \\"hello from test 1\\";\\n  }\\n  getInfo();\\n  echo \\"<br>\\";\\n\\n  namespace Test2;\\n\\n  function getInfo() {\\n    echo \\"hello from test 2\\";\\n  }\\n  getInfo();\\n  ```\\n\\n  相同命名的兩個 function 放到不同空間進行存取，最後輸出：\\n\\n  ```txt\\n  hello from test 1\\n  hello from test 2\\n  ```\\n\\n## 使用命名空間\\n\\n### 命名規則\\n\\n- 透過 namespace 關鍵字宣告命名空間\\n\\n  ```php\\n  namespace 空間名稱  // 空間名稱依照 php 正確的命名方式定義即可\\n  ```\\n\\n  namespace 針對 function、類別名稱、const 常數三個部份起作用，並統稱為元素。\\n\\n### 常數的宣告\\n\\n- define ($name, $value);\\n\\n  在類別外部宣告常數，和命名空間沒有關係。同名稱的常數只能 define 一次\\n\\n  ```php\\n  namespace Test1;\\n  define (\'IVAN\', \'hello world\');\\n\\n  namespace Test2;\\n  define (\'IVAN\', \'hello world\');\\n\\n  // Notice: Constants IVAN already defined in...\\n  ```\\n\\n- const NAME = $value;\\n  和空間命名有關係。const 可以在類別的內部宣告常數值(類別常數)，也可以在類別外部宣告(正常常數)。\\n\\n  使用空間命名的時候，const 可以放到類別外面宣告。相同名稱的多個常數，可以分別定義報不同的命名空間裡面。\\n\\n  ```php\\n  namespace Test1;\\n  const USER = \\"ivan_1\\";\\n  echo USER;\\n  echo \\"<br>\\";\\n\\n  namespace Test2;\\n  const USER = \\"ivan_2\\";\\n  echo USER;\\n  ```\\n\\n  ```txt\\n  ivan_1\\n  ivan_2\\n  ```\\n\\n### 命名空間中 const 和 define 的區別\\n\\n`const` 針對命名空間產生影響，`define` 不發生影響。\\n\\n`const` 可以宣告多個相同名稱的常數。\\n\\n`define` 宣告的名稱具有唯一性。\\n\\n## 間單的元素存取\\n\\n```php\\n// 空間的名稱與具體父層目錄沒有直接關係\\n// 按照 php 正確的命名方式定義即可\\nnamespace Test1;\\n\\nfunction getInfo() {\\n  echo \\"test_1\\";\\n}\\n\\nconst USER = \\"ivan_1\\";\\n\\nnamespace Test2;\\n\\nfunction getInfo(){\\n  echo \\"test_2\\";\\n}\\nconst USER = \\"ivan_2\\";\\n\\n// 存取元素\\n// 當元素沒有任何限制的時候，會存取\\"目前空間\\"的元素\\n// 目前空間：離此呼叫 function 最近的命名空間\\ngetInfo(); // test_2\\necho USER; // ivan_2\\n\\n// 當元素指定存取的命名空間\\n// 存取其他命名空間的元素：\\\\空間\\\\元素;\\n\\\\Test1\\\\getInfo(); // test_1\\necho \\\\Test1\\\\USER; // ivan_1\\n```\\n\\n## 子級(多級)空間\\n\\n命名空間可以讓我們存放許多元素(函數、類別、常數)，當元素較多時，為了方便管理，可以對元素進行分類儲存，將命名空間設定為多級空間。\\n\\n多級空間的最後一級空間就稱為子級空間。\\n\\n- 空間元素存取的三種型式：\\n\\n  - 非限定名稱方式\\n  - 完全限定名稱方式\\n  - 限定名稱\\n\\n- 多級命名空間使用\\n\\n  ```php\\n  // 多級命名空間使用\\n  namespace AAA\\\\aaa\\\\test;\\n\\n  class Shop\\n  {\\n    public $impression = \'beautiful\';\\n  }\\n\\n  namespace BBB\\\\bbb\\\\test;\\n\\n  class Shop\\n  {\\n    public $impression = \'science and technology\';\\n  }\\n\\n  // 非限定方式存取元素\\n  // 預設存取當前的空間元素\\n  $obj = new Shop();\\n  echo $obj->impression; // science and technology\\n\\n  // 完全限定名稱方式存取元素\\n  // 存取其他空間元素\\n  $obj_1 = new \\\\AAA\\\\aaa\\\\test\\\\Shop();\\n  echo $obj_1->impression; // beautiful\\n  ```\\n\\n- 多級空間使用\\n\\n  ```php\\n  namespace AAA\\\\aaa\\\\test\\\\library;\\n  const USER = \'ivan_1\';\\n\\n  namespace BBB\\\\bbb\\\\test;\\n  const USER = \\"ivan_2\\";\\n\\n  namespace AAA\\\\aaa\\\\test;\\n  const USER = \\"ivan_3\\";\\n\\n  // 限定名稱存取元素\\n  // 此方法存取元素規則：目前空間 + 本身空間\\\\元素\\n\\n  echo library\\\\USER; // 命名空間為 \\\\AAA\\\\aaa\\\\test\\\\library\\\\USER;\\n  // ivan_1\\n  ```\\n\\n- 非限定名稱方式\\n  `echo Shop::$impression;` 就近存取上面與其最近的空間內的 Shop() 元素。類似 php 引入文件 `include(\\"common.php\\");` 使用相對路徑引入當前目錄下的 common.php 文件。\\n- 限定名稱\\n  `echo library\\\\Shop::$impression;` 將當前空間和 library 空間聯合，獲得 Shop() 元素。類似 `include(\\"Common/Conf/config.php\\");` 相對路徑。\\n- 完全限定名稱方式\\n  `echo BBB\\\\Shop::$impression;` 存取 BBB 空間的 Shop 元素。類似 `include(\\"D:/web/1121/Conf/common.php);` 使用絕對路徑引入文件。\\n\\n## 引入機制\\n\\n命名空間可宣告為多級空間，此一多級空間元素在其他的空間內部存取的時候，不可以需要透過`完全限定名稱`，此一方法不方便維護及開發。\\n\\n為了降低程式碼的複雜度，可以在當前的空間將指定的空間引入，進而透過`限定名稱`的形式，使用其他空間的元素。\\n\\n### 空間引入\\n\\n- use 空間\\n\\n  ```php\\n  // 引入機制：空間引入\\n  namespace AAA\\\\aaa\\\\test;\\n\\n  const USER = \'ivan\';\\n  const HOST = \'localhost:80\';\\n\\n  function getInfo() {\\n    echo \'test\';\\n  }\\n\\n  namespace BBB\\\\bbb\\\\library;\\n\\n  const USER = \'cindy\';\\n  const HOST = \'localhost:443\';\\n  function getInfo() {\\n    echo \'test\';\\n  }\\n\\n  /**\\n   * 項目需要頻繁存取其他空間元素\\n   * 為了降低存取其他空間的複雜度，可以將頻繁存取的空間引入當前的空間\\n   * 進而透過\\"限定名稱\\"方式存取元素\\n   * 限定名稱：被引入間的最後一級空間的名稱\\n   */\\n\\n  use AAA\\\\aaa\\\\test;\\n\\n  echo test\\\\USER; // ivan\\n  test\\\\getInfo(); // test\\n  echo test\\\\HOST; // localhost:80\\n  // 返回最近的空間元素\\n  echo USER; // cindy\\n  ```\\n\\n- 類別元素引入：\\n\\n`use 空間\\\\空間\\\\空間\\\\類元素;`\\n\\n空間引入可以解決完全限定名稱訪問元素的繁瑣性，但是還需要透過限定名稱方式訪問空間。\\n\\n若引入空間的元素是 class，就可以直接將這個類別引入到當前空間，使用的時候也就可以透過非限定名稱的方式訪問。\\n\\n程式碼相對較為簡潔。\\n\\n- 類別元素引入\\n\\n  ```php\\n  namespace AAA\\\\aaa\\\\test;\\n\\n  class Shop\\n  {\\n    static $name = \'ivan\';\\n  }\\n\\n  namespace BBB\\\\bbb\\\\test;\\n  const USER = \'cindy\';\\n\\n  // 將 AAA\\\\aaa\\\\test\\\\Shop 類別元素引入\\n  use AAA\\\\aaa\\\\test\\\\Shop;\\n\\n  // 透過非限定名稱在此命名空間中存取引入的類別中的元素\\n  echo Shop::$name; // ivan\\n  ```\\n\\n- 類別元素在引入時的特殊狀況\\n  當引入類別的命名和當前空間的類別名稱相同時：\\n\\n  ```php\\n  namespace AAA\\\\aaa\\\\test;\\n  class Shop\\n  {\\n    static $name = \'ivan\';\\n  }\\n\\n  namespace BBB\\\\bbb\\\\test;\\n  const USER = \'cindy\';\\n  class Shop\\n  {\\n    static $name = \'jack\';\\n  }\\n\\n  // 將 AAA\\\\aaa\\\\test 類別元素直接引入\\n  use AAA\\\\aaa\\\\test\\\\Shop;\\n\\n  // 透過非限定名稱存取引入的類別\\n  echo Shop::$name; // error\\n\\n  // Fatal error: Cannot use AAA\\\\aaa\\\\test\\\\Shop as Shop because the name is already in use in...\\n  ```\\n\\n  解決方法：使用別名\\n\\n  `use 空間\\\\元素 as 別名;`\\n\\n  把其他空間的一個類別元素引入到當前空間，若當前空間也已有一個同名的類別元素，則引入元素與當前空間的元素就會產生衝突，為了避免衝突，可以給引入的空間元素取一個別名。\\n\\n  引入的 Shop 與當前空間的 Shop 有衝突取別名：\\n\\n  ```php\\n    namespace AAA\\\\aaa\\\\test;\\n  class Shop\\n  {\\n    static $name = \'ivan\';\\n  }\\n\\n  namespace BBB\\\\bbb\\\\test;\\n  const USER = \'cindy\';\\n  class Shop\\n  {\\n    static $name = \'jack\';\\n  }\\n\\n  // 將 AAA\\\\aaa\\\\test 類別元素直接引入\\n  use AAA\\\\aaa\\\\test\\\\Shop as IntShop;\\n\\n  // 透過別名存取引入的類別\\n  echo IntShop::$name; // ivan\\n  echo Shop::$name; // jack\\n  ```\\n\\n### 公共空間\\n\\n一個 php 文件裡面沒有 namespace 關鍵字宣告，則該文件的元素都存在於公共空間。\\n\\n存取公共空間的元素統一設為：`\\\\元素`\\n\\n### CommonSpace.php include 引入 CommonSpace1.php\\n\\n- CommonSpace.php\\n\\n  ```php\\n  namespace AAA;\\n\\n  function f1() {\\n    echo \\"in good mood\\";\\n  }\\n\\n  // 在公共空間的檔案會被引入，針對當前空間不發生影想\\n\\n  include(\\"CommonSpace1.php\\"); // 公共空間\\n\\n  // 存取元素\\n  f1(); // in good mood 當前空間就是 AAA 空間\\n  echo \\\\NAME; // 存取公共空間的元素\\n\\n  // 本身有命名空間，引入的檔案是公共空間，本身的空間存取不到時，會到別的空間去尋找此元素\\n  ```\\n\\n- CommonSpace1.php\\n\\n  ```php\\n  const NAME = \'ivan\';\\n\\n  function f1() {\\n    echo \\"okay\\";\\n  }\\n\\n  function f2() {\\n    echo \'all good\';\\n  }\\n  ```\\n\\nCommonSpace.php 有 namespace，CommonSpace1.php 沒有(CommonSpace1.php 處於公共空間)。被引入的檔案空間，此時被引入的文件 CommonSpace1.php 屬於公共空間，針對當前空間不發生影響。\\n\\n- 透過非限定名稱呼叫一個元素(function、常數)\\n  - 首先取得本空間元素\\n  - 其次取得公共空間元素\\n\\n若在 CommonSpace.php 中將 function fi() 註解，此時 f1() 呼叫的 function 為公共空間 function f1()，輸出：\\n\\n```txt\\nokay\\nivan\\n```\\n\\n將 CommonSpace.php 的 function f1() 取消註解，此時 f1() 呼叫的是 AAA 命名空間的 function f1()。\\n\\n```txt\\nin good mood\\nivan\\n```\\n\\n### ReverseCommonSpace.php include 引入 ReverseCommonSpace １.php\\n\\n- ReverseCommonSpace.php\\n\\n  ```php\\n  function f1() {\\n    echo \\"in good mood\\";\\n  }\\n\\n  const NAME = \\"cindy\\";\\n\\n  function f2() {\\n    echo \\"good\\";\\n  }\\n\\n  include(\\"ReverseCommonSpace1.php\\") // 有命名空間\\n\\n  \\\\f2(); // good 存取公共空間需要有\\"反斜線\\"，提高程式碼可讀性\\n  echo NAME;\\n  echo \\\\AAA\\\\NAME;\\n  // f3(); // 無法存取會報錯，正確的存取寫法為： \\\\AAA\\\\f3();\\n  \\\\AAA\\\\f3();\\n\\n  // 本身是公共空間，引入的檔案是有命名空間的，本身的空間無法存取時，不會到別的空間去找尋元素。\\n  ```\\n\\n  若 f3(); 沒有註解掉會報錯：\\n\\n  ```txt\\n  good\\n  cindy\\n  ivan\\n\\n  (!) Fatal error: Uncaught Error: Call to undefined function f3() in...\\n  ```\\n\\n  將其註解後輸出：\\n\\n  ```txt\\n  good\\n  cindy\\n  ivan\\n  buy book\\n  ```\\n\\n- ReverseCommonSpace1.php\\n\\n  ```php\\n  namespace AAA;\\n\\n  const NAME = \'ivan\';\\n\\n  function f2() {\\n    echo \'good\';\\n  }\\n\\n  function f3(){\\n    echo \\"buy book\\";\\n  }\\n  ```\\n\\n## 範例與總結\\n\\n### 錯誤範例\\n\\n```php\\nconst USER = \'ivan\';\\n\\nnamespace AAA;\\n\\nfunction getInfo() {\\n  echo \'OK\';\\n}\\n\\n// Fatal error: Namespace declaration statement has to be the very first statement or after any declare call in the script in...\\n```\\n\\n正確做法：\\n\\n```php\\nnamespace AAA;\\n\\nconst USER = \'ivan\';\\n\\nfunction getInfo() {\\n  echo \'OK\';\\n}\\n\\ngetInfo(); // OK\\n```\\n\\n不能宣告常數在公共空間，而 function 在命名空間。\\n\\n宣告命名空間時，在 namespace 關鍵字前面不能有任何程式碼，包刮 header 也要寫在下面。\\n\\n### 命名空間總結\\n\\n1. 宣告命名空間時，在 namespace 關鍵字前面不能有任何程式碼(可以註解)，包刮 header 也要寫在下面。\\n2. 命名空間是虛擬抽象的空間，非真實的檔案路徑。\\n3. 同一請求多檔案可以使用相同的命名空間，只要這些檔案中不會出現多的同名稱、同類型的元素(function, const)即可。\\n","tocContent":""}')},1471:function(n){"use strict";n.exports=JSON.parse('{"name":"PHP 學習筆記.md","content":"# PHP 學習筆記\\n\\n>\\n\\n## 運算子、判斷\\n\\n- `+`: 算術相加\\n\\n- `.`: 字串相加\\n\\n- `gettype()`: 判斷變數的型態\\n\\n- `(int)($var1 + $var2)`: 只取商\\n\\n- `isset($var)`: 檢查變數是否有設置\\n\\n- `empty($var)`: 檢查變數是否為空值\\n\\n- `is_null($var)`: 檢查變數是否為 null\\n\\n  |                 | gettype() |   isset()   |   empty()   |  is_null()  |\\n  | :-------------: | :-------: | :---------: | :---------: | :---------: |\\n  | $x is undefined |   null    | **_false_** |  [true](#)  |  [true](#)  |\\n  |    $x = null    |   null    | **_false_** |  [true](#)  |  [true](#)  |\\n  |     $x = 0      |    int    |  [true](#)  |  [true](#)  | **_false_** |\\n  |    $x = \\"0\\"     |    str    |  [true](#)  |  [true](#)  | **_false_** |\\n  |     $x = 1      |    int    |  [true](#)  | **_false_** | **_false_** |\\n  |     $x = \\"\\"     |    str    |  [true](#)  |  [true](#)  | **_false_** |\\n  |   $x = \\"PHP\\"    |    str    |  [true](#)  | **_false_** | **_false_** |\\n\\n- `var_dump($var);`: 將變數的訊息印出於螢幕上\\n\\n- `instanceof` 型態運算子\\n\\n- 用於確定一個 php 物件是否屬於某一類別\\n\\n  ```php\\n  class MyClass\\n  {\\n  }\\n  class NotMyClass\\n  {\\n  }\\n\\n  $a = new MyClass;\\n  var_dump($a instanceof MyClass);\\n  var_dump($a instanceof NotMyClass);\\n  ```\\n\\n  ```php\\n  bool(true)\\n  bool(false)\\n  ```\\n\\n- 也可以用來確定一個物件是不是繼承自某一父類別的子類別\\n\\n  ```php\\n  class ParentClass\\n  {\\n  }\\n  class MyClass extends ParentClass\\n  {\\n  }\\n\\n  $a = new MyClass;\\n  var_dump($a instanceof MyClass);\\n  var_dump($a instanceof ParentClass);\\n  ```\\n\\n  ```php\\n  bool(true)\\n  bool(true)\\n  ```\\n\\n- 也可以用於確定一個變數是不是實現了某個接口的物件實例\\n\\n  ```php\\n  interface A\\n  {\\n  }\\n  class B implements A\\n  {\\n  }\\n  $obj = new B;\\n\\n  var_dump($obj instanceof A);\\n  echo \\"<br>\\";\\n  var_dump($obj instanceof B);\\n  ```\\n\\n  ```php\\n  bool(true)\\n  bool(true)\\n  ```\\n\\n  雖然 instanceof 通常是直接與 class 名稱一起使用，但也可以使用字串來代替\\n\\n  ```php\\n  interface A\\n  {\\n  }\\n  class B implements A\\n  {\\n  }\\n  $obj = new B;\\n  $str1 = \'A\';\\n  $str2 = \'B\';\\n\\n  var_dump($obj instanceof A);\\n  echo \\"<br>\\";\\n  var_dump($obj instanceof B);\\n  echo \\"<br>\\";\\n  var_dump($obj instanceof $str1);\\n  echo \\"<br>\\";\\n  var_dump($obj instanceof $str2);\\n  ```\\n\\n  ```php\\n  bool(true)\\n  bool(true)\\n  bool(true)\\n  bool(true)\\n  ```\\n\\n  若被檢測的變數不是物件，instanceof 並不會報錯，而是直接返回 false。另外，不能使用 instanceof 來檢測常數\\n\\n  ```php\\n  $a = 1;\\n  $b = NULL;\\n  $c = imagecreate(5, 5);\\n  var_dump($a instanceof stdClass);\\n  echo \'<br>\';\\n  var_dump($b instanceof stdClass);\\n  echo \'<br>\';\\n  var_dump($c instanceof stdClass);\\n  echo \'<br>\';\\n  var_dump(FALSE instanceof stdClass);\\n  ```\\n\\n  ```php\\n  bool(false)\\n  bool(false)\\n  bool(false)\\n  bool(false)\\n  ```\\n\\n## Autoload 自動載入\\n\\n一般可以透過 `include`, `include_once`, `require`, `require_once`，來將檔案引入到我們目前正在編寫的這個檔案。\\n\\n習慣上我們會將一個 class 存放在單一的 php 檔案中，例如 Member.php 相對於 Member class。\\n\\n但當程式需要引用到這個 class，就可以用上面的方法來引用此 class 以供後續操作。\\n\\n而 php autoload 機制可以讓我們在需要這個物件的時候，才去真正的引入這個 class，這個動作就是常聽到的 lazyload 延遲載入。\\n\\n- `__autoload`\\n  php5 提供了 `__autoload()` 這個魔術方法實現上述 Autoload 機制，雖然這個方法效能及方便性並不是非常理想。\\n\\n## 魔術常數\\n\\n- 不分大小寫，但一般而言都會以大寫呈現\\n\\n### `__LINE__` 檔案中的當前行號\\n\\n```php\\necho __LINE__ . PHP_EOL; // 1\\necho __LINE__ . PHP_EOL; // 2\\necho __LINE__ . PHP_EOL; // 3\\n```\\n\\n### `__FILE__` 檔案的完整路徑和檔名\\n\\n- 若將其使用在 `include` 中，則返回包含檔案的名稱。\\n- `__FILE__`總是包含一個絕對路徑(如果是符號連線，則是解析後的絕對路徑)。\\n\\n  ```php\\n  echo __FILE__ . PHP_EOL; // D:\\\\phpproject\\\\php\\\\newblog\\\\php-magic-constant.php\\n  ```\\n\\n### `__DIR__` 檔案所在的目錄\\n\\n- 如果用在被包括檔案中，則返回被包括的檔案所在目錄。\\n- 其等同於 `dirname(__FILE__)`。\\n- 除非是根目錄，否則目錄中名不包括末尾的斜線。\\n\\n  ```php\\n  echo __DIR__ . PHP_EOL; // D:\\\\phpproject\\\\php\\\\newblog\\n  ```\\n\\n### `__FUNCTION__` 返回該函數被定義時的名字\\n\\n```php\\necho __FUNCTION__ . PHP_EOL; // 函數尚未被定義\\n\\nfunction testFunction()\\n{\\n  echo __FUNCTION__ . PHP_EOL; //  testFunction\\n}\\n\\nclass TestClass\\n{\\n  function testFunctionButInClass()\\n  {\\n    echo __FUNCTION__ . PHP_EOL; // testFunctionButInClass\\n  }\\n}\\n\\ntestFunction();\\n$test = new TestClass();\\n$test->testFunctionButInClass();\\n```\\n\\n### `__CLASS__` 返回類別名稱\\n\\n```php\\necho __CLASS__ . PHP_EOL; // 類別尚未被宣\\n\\nfunction testClass()\\n{\\n    echo __CLASS__ . PHP_EOL; // 類別尚未被宣告\\n}\\n\\ntrait TestClassTrait\\n{\\n    function testClass2()\\n    {\\n        echo __CLASS__ . PHP_EOL; // TestClassClass\\n    }\\n}\\n\\nclass TestClassClass\\n{\\n    use TestClassTrait;\\n    function testClass1()\\n    {\\n        echo __CLASS__ . PHP_EOL; // TestClassClass\\n    }\\n}\\n\\ntestClass();\\n$test = new TestClassClass();\\n$test->testClass1();\\n$test->testClass2();\\n```\\n\\n### `__TRAIT__` Trait 的名字\\n\\n```php\\necho __TRAIT__ . PHP_EOL; // 什麼也沒有\\nfunction testTrait()\\n{\\n    echo __TRAIT__ . PHP_EOL; // 什麼也沒有\\n}\\n\\ntrait TestTrait\\n{\\n    function testTrait2()\\n    {\\n        echo __TRAIT__ . PHP_EOL; // TestTrait\\n    }\\n}\\n\\nclass TestTraitClass\\n{\\n    use TestTrait;\\n\\n    function testTrait1()\\n    {\\n        echo __TRAIT__ . PHP_EOL; // 什麼也沒有\\n    }\\n}\\n\\ntestTrait();\\n$test = new TestTraitClass();\\n$test->testTrait1();\\n$test->testTrait2();\\n```\\n\\n### `__METHOD__` 類別的方法名稱，返回該方法被定義時的名字\\n\\n```php\\necho __METHOD__ . PHP_EOL; // 尚無方法\\n\\nfunction testMethod() {\\n  echo __METHOD__ . PHP_EOL; // testMethod\\n}\\n\\nclass TestMethodClass\\n{\\n  function testMethodButinClass() {\\n    echo __METHOD__ . PHP_EOL; // TestMethodClass::testMethodButinClass\\n  }\\n}\\n\\ntestMethod();\\n$test = new TestClassClass();\\n$test->testMethodButinClass();\\n```\\n\\n### `__NAMESPACE__` 當前命名空間的名稱\\n\\n- 此常數是在編譯時定義的\\n\\n  ```php\\n  echo __NAMESPACE__ . PHP_EOL; // test\\\\magic\\\\constant\\n\\n  class TestNameSpaceClass\\n  {\\n      function testNamespace() {\\n          echo __NAMESPACE__ . PHP_EOL; // test\\\\magic\\\\constant\\n      }\\n  }\\n\\n  $test = new TestNameSpaceClass();\\n  $test->testNamespace();\\n  ```\\n\\n## 魔術方法\\n\\n> 參考資料：\\n>\\n> [PHP 之十六個魔術方法詳解](https://segmentfault.com/a/1190000007250604)\\n\\n### `__construct` 類別的構造函數\\n\\nphp 中構造方法是物件創建完成後，第一個被物件自動呼叫的方法。在每個類別中，都有一個構造方法，如果沒有宣告，那麼類別中會預設存在一個沒有參數且內容為空的構造方法。\\n\\n1. 作用：通常構造方法被用來執行一些初始化任務，如對成員屬性在創建對象時，賦予初始值\\n2. 在類別中的聲明格式：\\n\\n   ```php\\n   function __construct (params) {\\n    // code\\n    // 通常用來對成員屬性進行初始化賦值\\n   }\\n   ```\\n\\n3. 在類別中聲明構造方法需要注意的事項\\n\\n   1. 在同一個類別中只能宣告一個構造方法\\n   2. 必定是以雙底線開始\\n\\n      ```php\\n      class Person\\n      {\\n        public $name;\\n        public $age;\\n        public $sex;\\n        /**\\n         * 顯示宣告一個構造函數且帶參數\\n         */\\n        public function __construct($name = \\"\\", $age = 22, $sex = \\"man\\") {\\n          $this->name = $name;\\n          $this->sex = $sex;\\n          $this->age = $age;\\n        }\\n        /**\\n         * say 方法\\n         */\\n        public function say()\\n        {\\n          echo \\"我叫：\\" . $this->name . \\"，性別：\\" . $this->sex . \\"，年齡：\\" . $this->age;\\n        }\\n      }\\n\\n      /**\\n       * $person1\\n       */\\n      $person1 = new Person()\\n      echo $person1->say(); // 我叫：，性別：男，年齡：27\\n      /**\\n       * $person2\\n       *\\n       * @param $name 小明\\n       */\\n      $person2 = new Person(\'小明\');\\n      echo $person2->say(); // 我叫：小明，性別：男，年齡：27\\n      /**\\n       * $person3\\n       *\\n       * @param $name 李四\\n       * @param $sex 男\\n       * @param $age 25\\n       */\\n      $person3 = new Person(\'李四\', \'男\', \'25\')\\n      echo $person3->say(); // 我叫：李四，性別：男，年齡：25\\n      ```\\n\\n### `__destruct` 類別的解構函數\\n\\n允許在銷毀一個類別之前，執行一些操作或完成一些功能，比如關閉文件，釋放結果集等\\n\\n1. 宣告格式\\n\\n   ```php\\n   function __destruct()\\n   {\\n     // code\\n   }\\n   ```\\n\\n2. 解構函數的作用\\n\\n   ```php\\n   class Person{\\n       public $name;\\n\\n       public $age;\\n\\n       public $sex;\\n\\n       public function __construct($name=\\"\\", $sex=\\"男\\", $age=22)\\n       {\\n           $this->name = $name;\\n           $this->sex  = $sex;\\n           $this->age  = $age;\\n       }\\n\\n       /**\\n        * say 说话方法\\n        */\\n       public function say()\\n       {\\n           echo \\"我叫：\\".$this->name.\\"，性别：\\".$this->sex.\\"，年齡：\\".$this->age;\\n       }\\n\\n       /**\\n        * 声明一个析构方法\\n        */\\n       public function __destruct()\\n       {\\n           echo \\"我覺得我還可以搶救一下，我的名字叫\\".$this->name;\\n       }\\n   }\\n\\n   $Person = new Person(\\"小明\\");\\n   unset($Person); // 銷毀上面建立的物件\\n   ```\\n\\n### `__call` 在物件中呼叫一個不可訪問的方法時，呼叫此方法\\n\\n此方法接受兩參數，`$function_name` 會自動接收不存在的方法名，`$arguments` 則以陣列的方式接收不存在方法的多個參數。\\n\\n1. 宣告此方法的格式\\n\\n   ```php\\n   function __call(string $function_nama, array $arguments){\\n     // code\\n   }\\n   ```\\n\\n2. 此方法的作用：為避免當呼叫的方法不存在而產生錯誤，導致意外的程序中止，可以使用 `__call()` 方法來避免。剛方法在呼叫的方法不存在時，會自動呼叫，程式仍會繼續執行下去。\\n\\n   ```php\\n   class Person\\n   {\\n       function say()\\n       {\\n\\n              echo \\"Hello, world!<br>\\";\\n       }\\n\\n       /**\\n        * 宣告此方法用來處理，當呼叫了此物件中不存在的方法\\n        */\\n       function __call($funName, $arguments)\\n       {\\n             echo \\"你所呼叫的函数：\\" . $funName . \\"(參數：\\" ;  // 輸出呼叫的不存在方法名稱\\n             print_r($arguments); // 输出呼叫不存在方法的參數列表\\n             echo \\")不存在！<br>\\\\n\\"; // 結束換行\\n       }\\n   }\\n\\n   $Person = new Person();\\n   $Person->run(\\"teacher\\"); // 呼叫物件中不存在的方法，此時會自動呼叫物件中的 __call() 方法\\n   $Person->eat(\\"小明\\", \\"蘋果\\");\\n   $Person->say();\\n   ```\\n\\n   輸出\\n\\n   ```php\\n   你所调用的函数：run(参数：Array ( [0] => teacher ) )不存在！\\n\\n   你所调用的函数：eat(参数：Array ( [0] => 小明 [1] => 苹果 ) )不存在！\\n\\n   Hello, world!\\n   ```\\n\\n### `__callStatic` 用靜態方式呼叫一個不可訪問的方法時，呼叫此方法\\n\\n```php\\n<?php\\nclass Person\\n{\\n    function say()\\n    {\\n        echo \\"Hello, world!<br>\\";\\n    }\\n\\n    /**\\n     * 宣告此方法用來處理當靜態呼叫了不存在的方法時\\n     */\\n    public static function __callStatic($funName, $arguments)\\n    {\\n        echo \\"你所呼叫的靜態方法：\\" . $funName . \\"(參數：\\" ;  // 輸出呼叫不存在的方法名稱\\n        print_r($arguments); // 输出呼叫不存在方法時傳入的參數\\n        echo \\")不存在！<br>\\\\n\\"; // 结束换行\\n    }\\n}\\n\\n$Person = new Person();\\n$Person::run(\\"teacher\\"); // 用於呼叫物件中不存在的靜態方法時，會自動呼叫物件中的__callStatic()方法\\n$Person::eat(\\"小明\\", \\"蘋果\\");\\n$Person->say();\\n```\\n\\n### `__get` 獲取一個類別的成員變數時呼叫\\n\\n在 php 物件導向中，若類別成員被設定為 private 時，若我們在外面呼叫他則會出現\\"無法訪問某個私有屬性\\"的錯誤。\\n\\n- 此方法的作用：在程式運行中，透過他可以在物件外面獲取私有屬性成員的值\\n\\n  ```php\\n  class Person\\n  {\\n      private $name;\\n      private $age;\\n\\n      function __construct($name=\\"\\", $age=1)\\n      {\\n          $this->name = $name;\\n          $this->age = $age;\\n      }\\n\\n      /**\\n       * 在類別中添加__get()方法，在直接獲取屬性時，自動呼叫一次，以屬性名作為參數傳入並處理\\n       * @param $propertyName\\n       *\\n       * @return int\\n       */\\n      public function __get($propertyName)\\n      {\\n          if ($propertyName == \\"age\\") {\\n              if ($this->age > 30) {\\n                  return $this->age - 10;\\n              } else {\\n                  return $this->$propertyName;\\n              }\\n          } else {\\n              return $this->$propertyName;\\n          }\\n      }\\n  }\\n\\n  $Person = new Person(\\"小明\\", 60);   // 透過將 Persian 類別實例化的物件，並透過建構函示為屬性添加預設值\\n  echo \\"姓名：\\" . $Person->name . \\"<br>\\";   // 直接呼叫私有屬性 $name，自動呼叫了__get()方法可以間接獲取\\n  echo \\"年龄：\\" . $Person->age . \\"<br>\\";    // 自動呼叫 __get()方法，根據物件本身的情況會返回不同的值\\n  ```\\n\\n  ```php\\n  姓名：小明\\n  年齡：50\\n  ```\\n\\n### `__set` 設置一個類別的成員變數時呼叫\\n\\n- 作用：設置私有屬性，給一個未定義的屬性賦值，此方法會被觸發，傳入的參數是被設置的屬性名和值\\n\\n  ```php\\n  class Person\\n  {\\n      private $name;\\n\\n      private $age;\\n\\n      public function __construct($name=\\"\\",  $age=25)\\n      {\\n          $this->name = $name;\\n          $this->age  = $age;\\n      }\\n\\n      /**\\n       * 宣告此方法需兩個參數，直接為私有屬性賦值時自動呼叫，並可以排除非法賦值\\n       *\\n       * @param $property\\n       * @param $value\\n       */\\n      public function __set($property, $value) {\\n          if ($property==\\"age\\")\\n          {\\n              if ($value > 150 || $value < 0) {\\n                  return;\\n              }\\n          }\\n          $this->$property = $value;\\n      }\\n\\n      /**\\n       * 在類別中宣告 say()，將所有的私有屬性輸出\\n       */\\n      public function say(){\\n          echo \\"我叫\\".$this->name.\\"，今年\\".$this->age.\\"歲了\\";\\n      }\\n  }\\n\\n  $Person= new Person(\\"小明\\", 25); // 注意，初始值將被下面所更改\\n  // 自動呼叫 __set()，將數系名稱name傳遞給第一個參數，將屬性值\\"小明\\"傳遞給第二參數\\n  $Person->name = \\"小红\\";     // 赋值成功。如果没有__set()，則出錯。\\n  // 自動呼叫 __set() 函数，將屬性名稱 age 傳給第一個參數，將屬性值 26 傳給第二個參數\\n  $Person->age = 16; //赋值成功\\n  $Person->age = 160; //160是一个非法值，赋值失效\\n  $Person->say();  //输出：我叫小红，今年 16 歲了\\n  ```\\n\\n### `__isset()` 當私有屬性呼叫 isset() 或 empty() 時呼叫此方法\\n\\n## 方法\\n\\n### `in_array()` 檢查陣列中是否包含特定的數值\\n\\n- `bool in_array(mixed $needle, array $haystack, bool $strict = false)`\\n  - `$needle` 要查找的值\\n  - `$haystack` 要檢查的陣列\\n  - `#strict` 可選，若為 `true`，則不僅檢查直是否相等，還要檢查型別是否相等。預設為 `false`\\n\\n```php\\n$fruits = [\\"apple\\", \\"banana\\", \\"cherry\\", \\"date\\"];\\n\\n// 使用 in_array 检查数组中是否包含 \\"cherry\\"，不考虑数据类型\\nif (in_array(\\"cherry\\", $fruits)) {\\n    echo \\"数组中包含 \'cherry\'。\\";\\n} else {\\n    echo \\"数组中不包含 \'cherry\'。\\";\\n}\\n\\n// 使用 in_array 检查数组中是否包含 2，考虑数据类型\\nif (in_array(2, $fruits, true)) {\\n    echo \\"数组中包含 2（考虑数据类型）。\\";\\n} else {\\n    echo \\"数组中不包含 2（考虑数据类型）。\\";\\n}\\n\\n```\\n\\n### `foreach`\\n\\n- `foreach()` 尋訪陣列\\n\\n  ```php\\n  foreach ($array as $value) {\\n    // 每次尋訪會將陣列的值存到value中，直到陣列結束\\n  }\\n  foreach ($array as $key => $value) {\\n   // 每次尋訪會將陣列的值以及key，存到value中  key => 流水號\\n  }\\n  ```\\n\\n- `continue` 跳出本次循環，繼續執行下向執行\\n\\n- `array_key_first()` 取得陣列中第一個 key 值\\n- `array_key_last()` 取得陣列中最後一個 key 值\\n\\n  ```php\\n  $array  = array(\\"dog\\", \\"rabbit\\", \\"horse\\", \\"rat\\", \\"cat\\");\\n  foreach($array as $index => $animal) {\\n      if ($index === array_key_first($array))\\n          echo $animal; // output: dog\\n      if ($index === array_key_last($array))\\n          echo $animal; // output: cat\\n  }\\n  ```\\n\\n- `break` 跳出迴圈\\n\\n  ```php\\n  <?php\\n  foreach (array(\'1\',\'2\',\'3\') as $first) {\\n      echo \\"$first \\";\\n      foreach (array(\'3\',\'2\',\'1\') as $second) {\\n          echo \\"$second \\";\\n          if ($first == $second) {\\n              break;  // this will break both foreach loops\\n          }\\n      }\\n      echo \\". \\";  // never reached!\\n  }\\n  echo \\"Loop Ended\\";\\n  ?>\\n  ```\\n\\n- 輸出\\n\\n  ```php\\n  1 3 2 1 . 2 3 2 . 3 3 . Loop Ended\\n  ```\\n\\n### `scandir` 掃描指定的目錄，並返回為陣列\\n\\n- `scandir()` 掃描指定的目錄，並返回為陣列\\n\\n### `list` 宣告陣列中的值，使其成為變數\\n\\n- `list(var1, var2...)` 宣告陣列中的值，使其成為變數\\n\\n  ```php\\n  $my_array = array(\'dog\', \'cat\', \'horse\');\\n  list($a, $b, $c) = $my_array;\\n  echo \\"i have several animals, a $a, a $b, a $c. \\";\\n  // i have several animals, a dog, a cat and a horse.\\n  ```\\n\\n### `append` 將傳入的值附加進陣列\\n\\n- `append(var1, var2)`\\n\\n  ```php\\n  // PHP function to illustrate the\\n  // append() method\\n  $arrObj = new ArrayObject(array(\'Geeks\', \'for\', \'Geeks\'));\\n  // Appending an array\\n  $arrObj->append(array(\'welcomes\', \'you\'));\\n  var_dump($arrObj);\\n  ```\\n\\n- 輸出\\n\\n  ```php\\n  object(ArrayObject)#1 (1) {\\n    [\\"storage\\":\\"ArrayObject\\":private]=>\\n    array(4) {\\n      [0]=>\\n      string(5) \\"Geeks\\"\\n      [1]=>\\n      string(3) \\"for\\"\\n      [2]=>\\n      string(5) \\"Geeks\\"\\n      [3]=>\\n      array(2) {\\n        [0]=>\\n        string(8) \\"welcomes\\"\\n        [1]=>\\n        string(3) \\"you\\"\\n      }\\n    }\\n  }\\n  ```\\n\\n### 在陣列中新增元素\\n\\n#### 直接賦值\\n\\n```php\\n$array[] = $array;\\n```\\n\\n```php\\n$flower = array();\\necho(\\"The array is empty, as you can see. \\\\n\\");\\nprint_r($flowers);\\necho(\\"Now, we have added the values. \\\\n\\");\\n$flowers[] = \\"Rose\\";\\n$flowers[] = \\"Jasmine\\";\\n$flowers[] = \\"Lili\\";\\n$flowers[] = \\"Hibiscus\\";\\n$flowers[] = \\"Tulip\\";\\nprint_r($flowers);\\n```\\n\\n```php\\nThe array is empty, as you can see.\\nArray\\n(\\n)\\nNow, we have added the values.\\nArray\\n(\\n    [0] => Rose\\n    [1] => Jasmine\\n    [2] => Lili\\n    [3] => Hibiscus\\n    [4] => Tulip\\n)\\n```\\n\\n#### `array_push` 在陣列最後新增元素\\n\\n- `array_push($array, $value1, $value2, ..., $valueN);`\\n- `$array` 必須，目標新增元素的陣列\\n- `$value1`, `$value2` 必須，欲新增至陣列的元素，可以為字串、整數、浮點數等\\n\\n  ```php\\n  $flowers = array();\\n  echo(\\"The array is empty, as you can see. \\\\n\\");\\n  print_r($flowers);\\n  echo(\\"Now, we have added the values. \\\\n\\");\\n  array_push($flowers, \\"Rose\\", \\"Jasmine\\", \\"Lili\\", \\"Hibiscus\\", \\"Tulip\\");\\n  print_r($flowers);\\n  ```\\n\\n  ```php\\n  The array is empty, as you can see.\\n  Array\\n  (\\n  )\\n  Now, we have added the values.\\n  Array\\n  (\\n      [0] => Rose\\n      [1] => Jasmine\\n      [2] => Lili\\n      [3] => Hibiscus\\n      [4] => Tulip\\n  )\\n  ```\\n\\n#### `array_unshift` 在陣列前端插入\\n\\n- `array_unshift($array, $value1, $value2, ..., $valueN)`\\n- `$array` 必須，目標新增元素的陣列\\n- `$value1`, `$value2` 必須，欲新增至陣列的元素，可以為字串、整數、浮點數等\\n\\n  ```php\\n  $flowers = [\'first\', \'second\'];\\n  print_r($flowers);\\n  echo(\\"Now we have added the values. \\\\n\\");\\n  echo(array_unshift($flowers, \\"Rose\\", \\"Jasmine\\", \\"Lili\\", \\"Hibiscus\\", \\"Tulip\\"));\\n  echo(\\"\\\\n\\");\\n  print_r($flowers);\\n  ```\\n\\n  ```php\\n  Array\\n  (\\n    [0] => first\\n    [1] => second\\n  )\\n  Now we have added the values.\\n  7\\n  Array\\n  (\\n    [0] => Rose\\n    [1] => Jasmine\\n    [2] => Lili\\n    [3] => Hibiscus\\n    [4] => Tulip\\n    [5] => first\\n    [6] => second\\n  )\\n  ```\\n\\n### `array_fill` 以填充數值的方式，建立新陣列\\n\\n- `array_fill(int $start_index, int $count, mixed $value): array` 將傳入的`$value`，加入`$count` 個值到陣列，開始的 key 值由`$start_index` 指定\\n\\n- `$start_index` 回傳陣列的第一個 key 值，如為負數，返回的第一個 key 將會是 start_index 的值，而後面的 key 值由 0 開始。\\n\\n- `$count` 插入值的數量，需大於等於 0 ，否則拋出 E_WARNING。\\n\\n- `$value` 傳入陣列的值。\\n\\n  ```php\\n  $a = array_fill(5, 6, \'banana\');\\n  $b = array_fill(-2, 4, \'pear\');\\n  print_r($a);\\n  print_r($b);\\n  ```\\n\\n  ```php\\n  Array\\n  (\\n    [5]  => banana\\n    [6]  => banana\\n    [7]  => banana\\n    [8]  => banana\\n    [9]  => banana\\n    [10] => banana\\n  )\\n  Array\\n  (\\n    [-2] => pear\\n    [0] => pear\\n    [1] => pear\\n    [2] => pear\\n  )\\n  ```\\n\\n### `array_combine` 將傳入的參數合併為陣列\\n\\n- `array_combine(array $keys, array $values): array` `$key`為 key 值，`$value` 為相對應的值。\\n\\n  ```php\\n  $a = array(\'green\', \'red\', \'yellow\');\\n  $b = array(\'avocado\', \'apple\', \'banana\');\\n  $c = array_combine($a, $b);\\n  print_r($c);\\n  ```\\n\\n  ```PHP\\n  Array\\n  (\\n    [green]  => avocado\\n    [red]    => apple\\n    [yellow] => banana\\n  )\\n  ```\\n\\n### `array_unique` 從陣列中刪除重複的值\\n\\n- `array_unique($array, $flags)`\\n\\n- `$array` 要刪除重複值的陣列\\n- `$flags` 指定陣列的排序模式，有五種型別\\n- `SORT_REGULAR` 正常常比較元素\\n- `SORT_NUMERIC` 以數字方式比較元素\\n- `SORT_STRING` 以字串方式比較元素\\n- `SORT_LOCALE_STRING` 基於當前的語言環境，以字串方式比較元素。\\n\\n### `array_diff` 判斷陣列之間差異\\n\\n- `array_diff( $array1 , $array2 , $array3 , ... ):array` 後面每個陣列都跟第一個陣列做比較，此方法會回傳在第一陣列中有出現，但未出現在其他陣中的值，並會保留鍵名\\n\\n  ```php\\n  $array1 = array(\'A\',\'B\',\'C\',\'D\');\\n  $array2 = array(\'C\',\'D\',\'E\',\'F\');\\n  $array3 = array(\'A\',\'B\',\'E\',\'F\');\\n  $newArray1 = array_diff($array1,$array2);\\n  print_r($newArray1);\\n  $newArray2 = array_diff($array1,$array3);\\n  print_r($newArray2);\\n  ```\\n\\n  ```PHP\\n  Array\\n  (\\n    [0] => A,\\n    [1] => B\\n  )\\n  Array\\n  (\\n    [2] => C,\\n    [3] => D\\n  )\\n  ```\\n\\n- 進階用法\\n\\n藉由其查詢兩個以上陣列之間的差異，並返回不存在陣列中的值之特性。\\n\\n因此可用來刪除陣列中多個值，而不影響其索引值。\\n\\n```php\\n//Declare the array\\n$flowers = [\\n  \\"Rose\\",\\n  \\"Lili\\",\\n  \\"Jasmine\\",\\n  \\"Hibiscus\\",\\n  \\"Tulip\\",\\n  \\"Sun Flower\\",\\n  \\"Daffodil\\",\\n  \\"Daisy\\"\\n];\\n\\n$flowers = array_diff($flowers, array(\\"Rose\\",\\"Lili\\"));\\necho \\"The array is:\\\\n\\";\\nprint_r($flowers);\\n```\\n\\n```php\\nArray\\n(\\n[2] => Jasmine\\n[3] => Hibiscus\\n[4] => Tulip\\n[5] => Sun Flower\\n[6] => Daffodil\\n[7] => Daisy\\n)\\n```\\n\\n### `array_slice` 從陣列中取得一段連續的元素\\n\\n此方法會返回一個新的陣列，包含從原陣列取得的元素，而原始陣列不會被修改。\\n\\n- `array_slice(array $array, int $offset, int $length = null, bool $preserve_keys = false);`\\n  - `$array` 目標的陣列\\n  - `$offset` 從陣列的哪一個位置開始取得元素\\n  - `$length` 可選參數，指定取得的元素個數，若未設置，則從 $offset 開始擷取到陣列最後的所有元素。\\n  - `$preserve_keys` 可選參數，若為 `true`，則保留原始陣列的 key 值，預設為 `false`\\n\\n```php\\n$fruits = [\'apple\', \'banana\', \'cherry\', \'date\',\'fig\'];\\n\\n// 擷取陣列前三個元素\\n$slice1 = array_slice($fruits, 0, 3);\\nprint_r($slice1); // 输出：[\'apple\', \'banana\', \'cherry\']\\n\\n// 擷取陣列的後兩個元素\\n$slice2 = array_slice($fruits, -2);\\nprint_r($slice2); // 输出：[\'date\', \'fig\']\\n```\\n\\n### 日期/時間\\n\\n#### `date` 格式化 Unix timestamps\\n\\n- `date(string $format, ?int $timestamp = null)`\\n\\n- `$format` 指定的格式\\n  - `Y` 年份，四位數\\n  - `y` 年份二位數\\n  - `F` 月份英文全名；如 \'March\'\\n  - `M` 月份英文縮寫；如 \'Mar\'\\n  - `m` 月份數字，不足二位前面補 0\\n  - `n` 月份數字\\n  - `D` 星期英文縮寫；如：\'Fri\'\\n  - `l` 星期英文全稱；如：\'Friday\'\\n  - `w` 星期數字\\n  - `d` 幾日數字，不足二位前面補 0\\n  - `j` 幾日數字\\n  - `H` 24 小時制，不足二位前面補 0\\n  - `h` 12 小時制，不足二位前面補 0\\n  - `G` 24 小時制\\n  - `g` 12 小時制\\n  - `i` 分鐘\\n  - `A` Am 或 Pm\\n  - `a` am 或 pm\\n  - `s` 秒\\n  - `U` 總秒數\\n  - `t` 指定月份的天數；如\\"28\\", \\"31\\"\\n  - `z` 一年中的第幾天\\n- `$timestamp` 時間戳(可選)\\n\\n#### `mktime` 取得指定日期的時間戳\\n\\n- `mktime($hour, $minute = null, $second = null, $month = null, $day = null, $year = null)`\\n- 任何省略的變數，將依據本地時間設置\\n\\n#### `date_diff` 獲取以分鐘為單位的時間差\\n\\n- `date_diff($StartDateTimeObject, $EndDateTimeObject)`\\n  - `$StartDateTimeObject1` 必須，為一個 DataTime 物件，表示開始日期。\\n  - `$EndDateTimeObject1` 必須，為一個 DataTime 物件，表示結束日期。\\n  - 若失敗返回 false\\n\\n```php\\n$date_time_start = date_create(\'2019-06-19\')\\n$date_time_end = date_create(\'2020-06-19\')\\n\\n$difference = date_diff($date_time_start, $date_time_end);\\n```\\n\\n### `sort` 陣列排序\\n\\n#### 依 value 排序\\n\\n- 由小到大排序值\\n- `sort` 刪除 key\\n- `asort` 保留 key\\n- 由大到小排序值\\n- `rsort` 刪除 key\\n- `arsort` 保留 key\\n\\n#### 依 key 排序\\n\\n- `ksort` 由小到大排索引值\\n- `krsort` 由大到小排索引值\\n\\n#### 自訂排序\\n\\n加上一個前綴 `u` 在相對應的方法\\n\\n- 範例一：\\n  今天有一個陣列如下\\n\\n  ```php\\n  $unsorted = [\\n      [\'name\'   => \'good\',\\n       \'sorter\' => \'1\',],\\n\\n      [\'name\'   => \'bad\',\\n       \'sorter\' => \'3\',],\\n\\n      [\'name\'   => \'normal\',\\n       \'sorter\' => \'2\',],\\n  ];\\n  ```\\n\\n  我要透過 sorter 這個 key 的 value 來做排序\\n\\n  ```php\\n  usort($unsorted, function ($a, $b) {\\n      return $a[\'sorter\'] > $b[\'sorter\'];\\n      // 如果 a > b 的話 就會輸出 1，而因為 usort 的 根基是 sort\\n      // 意即是照 value 由小到大排序，所以輸出 1 的就會往後排，進而達到目的\\n  });\\n  ```\\n\\n  ```php\\n  array(3) {\\n   [0]=>\\n   array(2) {\\n     [\\"name\\"]=>\\n     string(4) \\"good\\"\\n     [\\"sorter\\"]=>\\n     string(1) \\"1\\"\\n   }\\n   [1]=>\\n   array(2) {\\n     [\\"name\\"]=>\\n     string(6) \\"normal\\"\\n     [\\"sorter\\"]=>\\n     string(1) \\"2\\"\\n   }\\n   [2]=>\\n   array(2) {\\n     [\\"name\\"]=>\\n     string(3) \\"bad\\"\\n     [\\"sorter\\"]=>\\n     string(1) \\"3\\"\\n   }\\n  }\\n  ```\\n\\n- 範例二：\\n\\n  如果一樣的陣列，但要用來比對的數值是重複的\\n\\n  ```php\\n  $unsorted = [\\n      [\'name\'   => \'good\', \'sorter\' => \'1\',],\\n      [\'name\'   => \'bad\', \'sorter\' => \'3\',],\\n      [\'name\'   => \'normal\', \'sorter\' => \'3\',],\\n  ];\\n  ```\\n\\n  可以增加一個比對條件\\n\\n  ```php\\n  $unsorted = [\\n      [\\n        \'name\'   => \'good\',\\n        \'sorter\' => \'1\',\\n        \'newSorter\'=> \'2\'\\n      ],\\n      [\\n        \'name\'   => \'bad\',\\n        \'sorter\' => \'3\',\\n        \'newSorter\'=> \'3\'\\n      ],\\n      [\\n        \'name\'   => \'normal\',\\n        \'sorter\' => \'3\',\\n        \'newSorter\' => \'1\'\\n      ],\\n      [\\n        \'name\'   => \'hahaha\',\\n        \'sorter\' => \'2\',\\n        \'newSorter\' => \'1\'\\n      ],\\n  ];\\n  ```\\n\\n  依照 sorter 來進行排序，但如果 sorter 數值相同，則使用 newSorter 來進行排序\\n\\n  ```php\\n  usort($unsorted, function ($a, $b)) {\\n      return $a[\'sorter\'] > $b[\'sorter\'] || ($a[\'sorter\'] == $b[\'sorter\'] && $a[\'newSorter\'] > $b[\'newSorter\']);\\n  }\\n\\n  // 或這樣寫\\n  if ($a[\'sorter\'] > $b[\'sorter\'] || ($a[\'sorter\'] == $b[\'sorter\'] && $a[\'newSorter\'] > $b[\'newSorter\'])) {\\n      return 1;\\n  } elseif ($a[\'sorter\'] < $b[\'sorter\']) {\\n      return -1;\\n  } else {\\n      return 0;\\n  }\\n  ```\\n\\n  ```php\\n  array(4) {\\n    [0]=>\\n    array(3) {\\n      [\\"name\\"]=>\\n      string(4) \\"good\\"\\n      [\\"sorter\\"]=>\\n      string(1) \\"1\\"\\n      [\\"newSorter\\"]=>\\n      string(1) \\"2\\"\\n    }\\n    [1]=>\\n    array(3) {\\n      [\\"name\\"]=>\\n      string(6) \\"hahaha\\"\\n      [\\"sorter\\"]=>\\n      string(1) \\"2\\"\\n      [\\"newSorter\\"]=>\\n      string(1) \\"1\\"\\n    }\\n    [2]=>\\n    array(3) {\\n      [\\"name\\"]=>\\n      string(6) \\"normal\\"\\n      [\\"sorter\\"]=>\\n      string(1) \\"3\\"\\n      [\\"newSorter\\"]=>\\n      string(1) \\"1\\"\\n    }\\n    [3]=>\\n    array(3) {\\n      [\\"name\\"]=>\\n      string(3) \\"bad\\"\\n      [\\"sorter\\"]=>\\n      string(1) \\"3\\"\\n      [\\"newSorter\\"]=>\\n      string(1) \\"3\\"\\n    }\\n  }\\n  ```\\n\\n### 分割字串\\n\\n#### `explode`\\n\\n- `explode( string $delimiter , string $string , int $limit )`\\n\\n- `$delimiter` - 字串的切割部位，請自行設定，字串形態，必填\\n- `$string` - 被要處理的字串，字串形態，必填項目。\\n- `$limit` - 設定字串切割後最多可輸出的數量，數字形態，可為正整數或負整數，如果填寫正整數，最後的的部份包含切割完剩下的所有部份，，如果填寫負整數，則倒數的部份若在負整數範圍 內將不會顯示，非必填項目\\n\\n  ```php\\n  <?php\\n    $str = \'Apple Dog Pig\';\\n    $str_sec = explode(\\" \\",$str);\\n    print_r($str_sec);\\n  ```\\n\\n  ```php\\n  Array (\\n  　[0] => Apple\\n  　[1] => Dog\\n  　[2] => Pig\\n  )\\n  ```\\n\\n- 加入`$limit` 參數\\n\\n  ```php\\n  <?php\\n    $str = \'Apple Dog Pig\';\\n    $str_sec_A = explode(\\" \\",$str,2);\\n    $str_sec_B = explode(\\" \\",$str,-1);\\n    print_r($str_sec_A);\\n    print_r($str_sec_B);\\n  ```\\n\\n  ```php\\n  Array (\\n  　[0] => Apple\\n  　[1] => Dog Pig\\n  )\\n  Array (\\n  　[0] => Apple\\n  　[1] => Dog\\n  )\\n  ```\\n\\n#### `str_split`\\n\\n- `str_split($string, $length)`\\n\\n- `string` 必需。規定要分割的字符串。\\n- `length` 可選。規定每個數組元素的長度。默認是 1。\\n\\n  ```php\\n  <?php\\n    $NewString = \\"M\'L2\\";\\n    $Arr2=str_split($NewString,3);//根據每三個字元切割\\n    print_r($Arr2);\\n  ```\\n\\n  ```php\\n  Array(\\n      [0] => \\"M\'L\\"\\n      [1] => 2\\n  )\\n  ```\\n\\n#### preg_split\\n\\n- `preg_split ( string $pattern , string $subject , int $limit , int $flags )`\\n\\n- `pattern` 用於搜索的模式，字串形式\\n- `subject` 輸入字串\\n- `limit` 可選，用來設定分割後的單位總數量，預設值為 -1\\n- `flags` 可選\\n  - `PREG_SPLIT_NO_EMPTY`只返回非空白部分\\n  - `PREG_SPLIT_DELIM_CAPTURE`和字串中的正規表達式一起返回\\n  - `PREG_SPLIT_OFFSET_CAPTURE`將每個返回增加字串的偏移量\\n\\n```php\\n//根據空格切開\\n$NewString1 = preg_split(\\"/[\\\\s,]+/\\", \\"Welcome to Wibibi.Have a good day.\\");\\nprint_r($NewString1);\\n\\necho \'<br>\';\\n\\n//把每個英文字母切開\\n$NewString2 = \'Welcome\';\\n$NewString2 = preg_split(\'//\', $NewString2, -1, PREG_SPLIT_NO_EMPTY);\\nprint_r($NewString2);\\n```\\n\\n### `array_slice` 從陣列中取出想要的元素\\n\\n- `array_slice($array, $start, $length, $preserve)`\\n\\n- `array` 必填，傳入陣列。\\n- `start` 必填，規定取出元素的開始位置，0 = 第一個元素，若傳入正數，則由前往後取值，若為負值由後往前取值。\\n- `length` 選填，規定返回的陣列長度。\\n- `preserve` 選填，`true` 保留 key 值，`false` 重置 key 值。\\n\\n  ```php\\n  <?php\\n  $a=array(\\"red\\",\\"green\\",\\"blue\\",\\"yellow\\",\\"brown\\");\\n  print_r(array_slice($a,2));\\n  ```\\n\\n  ```php\\n  Array\\n  (\\n      [0] => blue\\n      [1] => yellow\\n      [2] => brown\\n  )\\n  ```\\n\\n### `implode` 將陣列轉為字串\\n\\n- `implode($separator, $array)`\\n\\n- `separator` 可選。規定數組元素之間放置的內容。默認是 \\"\\"（空字符串）。\\n- `array` 必需。要結合為字符串的數組。\\n\\n  ```php\\n  $arr = [1,2,3,4,5,6];\\n  print_r(implode(\'=\', $arr));\\n  ```\\n\\n  ```php\\n  \\"1=2=3=4=5=6\\"\\n  ```\\n\\n### `array_filter` 過濾陣列元素(刪除陣列空值)\\n\\n- `array_filter($arrayName, $callbackFunction, $callbackParameter)`\\n\\n  - `$arrayName` 必須，目標陣列\\n  - `$callbackFunction` 可選，指定刪除的參數，預設刪除陣列中等於 false 的值\\n  - `$callbackParameter` 可選，引用傳遞給回傳函數的參數\\n\\n    - `ARRAY_FILTER_USE_KEY` 將 key 作為唯一參數傳遞給回調函數，而不是數組的值\\n    - `ARRAY_FILTER_USE_BOTH` 將值和鍵都作為參數而不是值傳遞給回調\\n\\n      ```php\\n      // PHP function to check for even elements in an array\\n      function Even($array)\\n      {\\n          // returns if the input integer is even\\n          if($array%2==0)\\n             return TRUE;\\n          else\\n             return FALSE;\\n      }\\n      $array = array(12, 0, 0, 18, 27, 0, 46);\\n      print_r(array_filter($array, \\"Even\\"));\\n      ```\\n\\n      ```php\\n        Array (\\n            [0] => 12\\n            [1] => 0\\n            [2] => 0\\n            [3] => 18\\n            [5] => 0\\n            [6] => 46\\n        )\\n      ```\\n\\n### `str_pad` 填充字串為指定長度\\n\\n- `str_pad($string, $length, $pad_string, $pad_type)`\\n\\n- string 必填，要填充的字串。\\n- length 必填，規定新字串的長度，若小於傳入的字串長度，則不進行操作。\\n- pad_string 可選，提供填充的字串，預設為空白。\\n- pad_type 可選，字串填充的方向。\\n\\n  - STR_PAD_BOTH 填充字串的兩側，若不為偶數，則將額外的字串填充至右側。\\n  - STR_PAD_LEFT 填充到字串的左側。\\n  - STR_PAD_RIGHT 填充到字串的右側(預設)。\\n\\n    ```php\\n    $str = \\"Hello world\\";\\n    echo str_pad($str, 20, \\".\\", STR_PAD_LEFT);\\n    ```\\n\\n    ```php\\n    .........Hello World\\n    ```\\n\\n    ```php\\n    $str = \\"Hello world\\";\\n    echo str_pad($str, 20, \\".:\\", STR_PAD_BOTH);\\n    ```\\n\\n    ```php\\n    .:.:Hello World.:.:.\\n    ```\\n\\n### 資料序列化及反序列化\\n\\n#### `string serialize` 序列化\\n\\n- `string serialize( mixed $value )`\\n\\n- $value: 要序列化的對象或陣列\\n\\n  ```php\\n  $sites = array(\'Google\', \'Runoob\', \'Facebook\');\\n  $serialized_data = serialize($sites);\\n  echo  $serialized_data . PHP_EOL;\\n  ```\\n\\n  ```php\\n  a:3:{i:0;s:6:\\"Google\\";i:1;s:6:\\"Runoob\\";i:2;s:8:\\"Facebook\\";}\\n  ```\\n\\n#### `mixed unserialize` 反序列化\\n\\n- `mixed unserialize( string $str )`\\n\\n- $str: 序列化後的字串\\n\\n  ```php\\n  $str = \'a:3:{i:0;s:6:\\"Google\\";i:1;s:6:\\"Runoob\\";i:2;s:8:\\"Facebook\\";}\';\\n  $unserialized_data = unserialize($str);\\n  print_r($unserialized_data);\\n  ```\\n\\n  ```php\\n  Array\\n  (\\n      [0] => Google\\n      [1] => Runoob\\n      [2] => Facebook\\n  )\\n  ```\\n\\n### `file_get_contents` 將本地文件存入一個變數中\\n\\n- `file_get_contents($path, $include_path, $context, $start, $max_length)`\\n\\n- path (必須) 文件的路徑\\n- include_path (可選) 如果也想在 include_path 中搜尋文件，可以將該參數設為\\"1\\"\\n- context (可選) 規定文件控制代碼的環境\\n- start (可選) 指定在文件中開始讀取的位置。\\n- max_length (可選) 規定讀取的位元組。\\n\\n### `str_pad` 補足字串\\n\\n- `str_pad($str, $pad_length , $pad_string, $pad_type)`\\n\\n- `$str` 來源字串\\n- `$pad_length` 補完後字串長度\\n- `$pad_string` 補入的字元\\n- `$pad_type` 補入的規則\\n\\n  - `STR_PAD_BOTH` 左右都補\\n  - `STR_PAD_LEFT` 從左邊開始\\n  - `STR_PAD_RIGHT` 從右邊開始\\n\\n  把 id 由左邊開始補 0，補到五位數\\n\\n  ```php\\n  $id=01;\\n  $id=str_pad($id,5,\\"0\\",STR_PAD_LEFT);\\n  echo $id;\\n  //00001\\n  ```\\n\\n### `str_replace` 替換字串\\n\\n### 將字串轉換為數值\\n\\n> 若字串開頭為 0，轉為數值後開頭的 0 會被省略\\n\\n- `number_format()` 若失敗則返回`E_WARNING`\\n\\n- 使用類型轉換\\n\\n  ```php\\n  $num = \\"1000.314\\";\\n  echo (int)$num\\n  ```\\n\\n- 透過運算子將字串轉為數值，例如在字串中 + 0\\n\\n### `is_a` 檢查物件是該類別，或該類別是此物件的父類別(boolean)\\n\\n- `is_a( object $object , string $class_name )`\\n\\n- 此函數在 php 5 之後已廢棄，改用 `instanceof` 型態運算子\\n\\n### `substr` 取得部分字串，可設定字串長度\\n\\n- `substr( $string , $start , $length )`\\n\\n- $string 原始的字串\\n- $start 要開始擷取的位置(須為數字，可為正數或負數)\\n- $length 要擷取的字串長度(須為數字，可為正數或負數)\\n\\n```php\\necho substr(\\"abcde\\", -1);       // 輸出 e，因為從字尾開始算一個字母。\\necho substr(\\"abcde\\", -2);       // 輸出 de，因為從字尾開始算，共取兩個字母。\\n\\necho substr(\\"abcd\\", -3, 1);     // 輸出 b，因為從字尾開始算，先取三個字母為 bcd，接著長度在從 bcd 取 1 位。\\necho substr(\\"abcdef\\", 0, -1);   // 輸出 abcde，因為程式先從零開始取整段字串，長度再由字串尾扣掉一個。\\necho substr(\\"abcdef\\", 2, -1);   // 輸出 cde，因為程式先從第二個字元開始，取得 cdef 這幾個字，再由取得的字串尾扣掉一個。\\necho substr(\\"abcdef\\", 5, -2);   // 回傳 false，因為程式一開始先取得 f，然後扣掉五個字元，就什麼都沒有囉！\\necho substr(\\"abcdef\\", -4, -2);  // 輸出 cd，因為程式先取得 cdef 這四個字元，再從其中的字尾開始扣掉兩個字元。\\n```\\n\\n### 轉換字母大小寫\\n\\n#### `ucfirst` 將字串的首字母轉為大寫\\n\\n```php\\n$foo = \'hello world!\';\\n$foo = ucfirst($foo);             // Hello world!\\n```\\n\\n#### `strtolower` 將字串換為小寫\\n\\n```php\\n$str = \\"Mary Had A Little Lamb and She LOVED It So\\";\\n$str = strtolower($str);\\n// mary had a little lamb and she loved it so\\n```\\n\\n#### `strtoupper` 將字串換為大寫\\n\\n```php\\n$str = \\"Mary Had A Little Lamb and She LOVED It So\\";\\n$str = strtoupper($str);\\n//  MARY HAD A LITTLE LAMB AND SHE LOVED IT SO\\n```\\n\\n### `define` 定義一個常數\\n\\n- `define(name,value,case_insensitive)`\\n\\n- name 必須，規定常數的名稱。通常為全大寫 + 下划線。\\n- value 必須，規定常數的值。\\n- case_insensitive 必須，規定常數是否大小寫敏感，預設為 false : 大小寫敏感。\\n\\n- 常數類似變數，但常數在設定之後，其值無法改變，常數名不用 `$` 開頭，作用域不影響對常數的存取，其值只能是字串或數值\\n\\n## 在 Linux 執行 php 檔\\n\\n### 方法一\\n\\n- 在程式的第一行加入路徑 -q\\n\\n  ```php\\n  #! /usr/bin/php -q\\n  $foo = 123;\\n  ```\\n\\n- 將 php 檔賦予執行權限\\n\\n  ```bash\\n  chmod +x testing.php\\n  ```\\n\\n- d/n\\n\\n  ```bash\\n  ./testing.php # 可以像其他 shell script 般執行\\n  ```\\n","tocContent":"- [PHP 學習筆記](#php-學習筆記)\\n  - [運算子、判斷](#運算子判斷)\\n  - [Autoload 自動載入](#autoload-自動載入)\\n  - [魔術常數](#魔術常數)\\n    - [`__LINE__` 檔案中的當前行號](#__line__-檔案中的當前行號)\\n    - [`__FILE__` 檔案的完整路徑和檔名](#__file__-檔案的完整路徑和檔名)\\n    - [`__DIR__` 檔案所在的目錄](#__dir__-檔案所在的目錄)\\n    - [`__FUNCTION__` 返回該函數被定義時的名字](#__function__-返回該函數被定義時的名字)\\n    - [`__CLASS__` 返回類別名稱](#__class__-返回類別名稱)\\n    - [`__TRAIT__` Trait 的名字](#__trait__-trait-的名字)\\n    - [`__METHOD__` 類別的方法名稱，返回該方法被定義時的名字](#__method__-類別的方法名稱返回該方法被定義時的名字)\\n    - [`__NAMESPACE__` 當前命名空間的名稱](#__namespace__-當前命名空間的名稱)\\n  - [魔術方法](#魔術方法)\\n    - [`__construct` 類別的構造函數](#__construct-類別的構造函數)\\n    - [`__destruct` 類別的解構函數](#__destruct-類別的解構函數)\\n    - [`__call` 在物件中呼叫一個不可訪問的方法時，呼叫此方法](#__call-在物件中呼叫一個不可訪問的方法時呼叫此方法)\\n    - [`__callStatic` 用靜態方式呼叫一個不可訪問的方法時，呼叫此方法](#__callstatic-用靜態方式呼叫一個不可訪問的方法時呼叫此方法)\\n    - [`__get` 獲取一個類別的成員變數時呼叫](#__get-獲取一個類別的成員變數時呼叫)\\n    - [`__set` 設置一個類別的成員變數時呼叫](#__set-設置一個類別的成員變數時呼叫)\\n    - [`__isset()` 當私有屬性呼叫 isset() 或 empty() 時呼叫此方法](#__isset-當私有屬性呼叫-isset-或-empty-時呼叫此方法)\\n  - [方法](#方法)\\n    - [`in_array()` 檢查陣列中是否包含特定的數值](#in_array-檢查陣列中是否包含特定的數值)\\n    - [`foreach`](#foreach)\\n    - [`scandir` 掃描指定的目錄，並返回為陣列](#scandir-掃描指定的目錄並返回為陣列)\\n    - [`list` 宣告陣列中的值，使其成為變數](#list-宣告陣列中的值使其成為變數)\\n    - [`append` 將傳入的值附加進陣列](#append-將傳入的值附加進陣列)\\n    - [在陣列中新增元素](#在陣列中新增元素)\\n      - [直接賦值](#直接賦值)\\n      - [`array_push` 在陣列最後新增元素](#array_push-在陣列最後新增元素)\\n      - [`array_unshift` 在陣列前端插入](#array_unshift-在陣列前端插入)\\n    - [`array_fill` 以填充數值的方式，建立新陣列](#array_fill-以填充數值的方式建立新陣列)\\n    - [`array_combine` 將傳入的參數合併為陣列](#array_combine-將傳入的參數合併為陣列)\\n    - [`array_unique` 從陣列中刪除重複的值](#array_unique-從陣列中刪除重複的值)\\n    - [`array_diff` 判斷陣列之間差異](#array_diff-判斷陣列之間差異)\\n    - [`array_slice` 從陣列中取得一段連續的元素](#array_slice-從陣列中取得一段連續的元素)\\n    - [日期/時間](#日期時間)\\n      - [`date` 格式化 Unix timestamps](#date-格式化-unix-timestamps)\\n      - [`mktime` 取得指定日期的時間戳](#mktime-取得指定日期的時間戳)\\n      - [`date_diff` 獲取以分鐘為單位的時間差](#date_diff-獲取以分鐘為單位的時間差)\\n    - [`sort` 陣列排序](#sort-陣列排序)\\n      - [依 value 排序](#依-value-排序)\\n      - [依 key 排序](#依-key-排序)\\n      - [自訂排序](#自訂排序)\\n    - [分割字串](#分割字串)\\n      - [`explode`](#explode)\\n      - [`str_split`](#str_split)\\n      - [preg\\\\_split](#preg_split)\\n    - [`array_slice` 從陣列中取出想要的元素](#array_slice-從陣列中取出想要的元素)\\n    - [`implode` 將陣列轉為字串](#implode-將陣列轉為字串)\\n    - [`array_filter` 過濾陣列元素(刪除陣列空值)](#array_filter-過濾陣列元素刪除陣列空值)\\n    - [`str_pad` 填充字串為指定長度](#str_pad-填充字串為指定長度)\\n    - [資料序列化及反序列化](#資料序列化及反序列化)\\n      - [`string serialize` 序列化](#string-serialize-序列化)\\n      - [`mixed unserialize` 反序列化](#mixed-unserialize-反序列化)\\n    - [`file_get_contents` 將本地文件存入一個變數中](#file_get_contents-將本地文件存入一個變數中)\\n    - [`str_pad` 補足字串](#str_pad-補足字串)\\n    - [`str_replace` 替換字串](#str_replace-替換字串)\\n    - [將字串轉換為數值](#將字串轉換為數值)\\n    - [`is_a` 檢查物件是該類別，或該類別是此物件的父類別(boolean)](#is_a-檢查物件是該類別或該類別是此物件的父類別boolean)\\n    - [`substr` 取得部分字串，可設定字串長度](#substr-取得部分字串可設定字串長度)\\n    - [轉換字母大小寫](#轉換字母大小寫)\\n      - [`ucfirst` 將字串的首字母轉為大寫](#ucfirst-將字串的首字母轉為大寫)\\n      - [`strtolower` 將字串換為小寫](#strtolower-將字串換為小寫)\\n      - [`strtoupper` 將字串換為大寫](#strtoupper-將字串換為大寫)\\n    - [`define` 定義一個常數](#define-定義一個常數)\\n  - [在 Linux 執行 php 檔](#在-linux-執行-php-檔)\\n    - [方法一](#方法一)"}')},3965:function(n){"use strict";n.exports=JSON.parse('{"name":"PHP 物件導向.md","content":" # PHP 物件導向\\n\\n>\\n\\n## 物件和類別 `Objects` and `Classes`\\n\\n把類似或有關聯的工作或屬性，組織到類別`class`裡面。\\n這可以讓程式保持遵守 **不重複原則 “don’t repeat yourself” (DRY)**，更容易維護。\\n\\n- `class` 類別：可以比喻作一個建築的藍圖。類別是將房子的樣式設計出來。\\n- `object` 物件：依照藍圖蓋出來的房子。物件是類別的實例。\\n- `data` 資料：就像是鋼筋、水泥，用來蓋房子的材料。\\n\\n`data`(建材)經過`class`(藍圖)，就會被實例化變成`object`(房子)。\\n\\n## 建立類別 `Class`\\n\\n```php\\n<?php\\nclass MyClass\\n{\\n    // 類別的屬性和方法在大括號裡面宣告\\n}\\n\\n$obj = new MyClass;\\n\\nvar_dump($obj);\\n```\\n\\n- `new` 關鍵字在建立類別之後，實例化一個類別，並將它存到一個變數上。\\n\\n- `var_dump()` 來印出變數的相關訊息於螢幕上。\\n\\n最終會輸出\\n\\n```html\\nobject(MyClass)#1 (0) { }\\n```\\n\\n此為最基礎的物件形式。\\n\\n## 定義類別的屬性\\n\\n使用屬性(Property)，也稱 **`Class`的變數(Variable)** 來把 `Data` 存入一個 `Class` 裡面。\\n\\n```php\\n<?php\\n\\nclass MyClass\\n{\\n  public $prop1 = \\"I\'m a class property!\\";\\n}\\n\\n$obj = new MyClass;\\n```\\n\\n- `public` 此為屬性的關鍵字，用來決定屬性的可視性(Visibility)。\\n\\n指定要讀取的物件及屬性，並將其顯示在瀏覽器上\\n\\n```php\\necho $obj->prop1; // Output the property\\n```\\n\\n- `->`（對象運算符）: 在 PHP 物件中，用來存取物件的屬性(Property)和方法(Methods)。\\n- `::`（雙冒號）: 用來訪問靜態屬性。\\n\\n最後將會得到\\n\\n```html\\nI\'m a class property!\\n```\\n\\n## 定義類別的方法 Methods\\n\\n可以藉由執行這些方法，來更改物件的行為或是狀態。\\n\\n建立一個方法來設定與讀取屬性 `$prop1` 的值\\n\\n```php\\n<?php\\nclass MyClass\\n{\\n    public $prop1 = \\"I\'m a class property!\\";\\n\\n    public function setProperty($new_value) {\\n        $this->prop1 = $new_value;\\n    }\\n\\n    public function getProperty() {\\n        return $this->prop1 . \\"<br />\\";\\n    }\\n}\\n\\n$obj = new MyClass;\\necho $obj->getProperty(); // 得到原始的屬性值\\n\\n$obj->setProperty(\\"I\'m a new property value!\\"); // 設定新的屬性值\\necho $obj->getProperty(); // 得到新的屬性值\\n```\\n\\n- `$this` : 物件透過 `$this` 關鍵字來參考自己，物件使用 $this 就如同你直接使用物件名稱來指定物件。\\n- `$this` 寫在 class 內部\\n- 使用這些含有 `$this` 的方法之前，記得先要實例化這些方法的物件。\\n\\n  ```php\\n  $this->prop1;\\n  myClass->prop1; // 兩者的意義相同\\n  ```\\n\\n輸出的結果\\n\\n```html\\nI\'m a class property! I\'m a new property value!\\n```\\n\\n接著再 `new` 一個新的 `class`\\n\\n```php\\n<?php\\nclass MyClass\\n{\\n    public $prop1 = \\"I\'m a class property!\\";\\n\\n    public function setProperty($new_value) {\\n        $this->prop1 = $new_value;\\n    }\\n\\n    public function getProperty() {\\n        return $this->prop1 . \\"<br />\\";\\n    }\\n}\\n\\n// 將兩個物件實例化\\n$obj = new MyClass;\\n$obj2 = new MyClass;\\n\\n// 取得兩個物件的屬性變數 $prop1\\necho $obj->getProperty();\\necho $obj2->getProperty();\\n\\n// 將兩個物件設定新的屬性值\\n$obj->setProperty(\\"I\'m a new property value!\\");\\n$obj2->setProperty(\\"I belong to the second instance!\\");\\n\\n// 輸出兩個物件的新屬性值\\necho $obj->getProperty();\\necho $obj2->getProperty();\\n```\\n\\n輸出結果\\n\\n```html\\nI\'m a class property! I\'m a class property! I\'m a new property value! I belong to the second instance!\\n```\\n\\n- 物件導向將 `object` 視為獨立的個體，依照藍圖蓋出來的房子，每一間都是獨立的。\\n\\n## 定義類別的常數 const\\n\\n- 可以把類別中始終保持不變的值，定義為常數。\\n\\n```php\\n<?php\\nclass MyClass\\n{\\n    public $prop1 = \\"I\'m a class property!\\";\\n\\n    const constant = \\"value\\";\\n\\n    public function setProperty($new_value)\\n    {\\n        $this->prop1 = $new_value;\\n    }\\n\\n    public function getProperty()\\n    {\\n        return $this->prop1 . \\"<br />\\";\\n    }\\n\\n    function showConstant() {\\n        echo  self::constant . \\"<br />\\";\\n    }\\n}\\n\\n// 將物件實例化\\n$obj = new MyClass;\\n\\n// 取得物件的常數\\necho $obj->showConstant();\\necho MyClass::constant;\\n```\\n\\n輸出結果\\n\\n```html\\nvalue value\\n```\\n\\n## 封裝 Encapsulation\\n\\n每個物件都包含進行操作時需要的所有資訊，物件不必依賴其他物件來完成操作，將方法、欄位、屬性和邏輯包裝在類別內，透過類別的實體來實現，外部物件無法了解物件的內部細節，有種隱藏起來的概念，外部對資料的操作也只能透過已經定義的介面，用一段簡白的話來說，對事只了解他的外在，無需理解內部構造，即為封裝。\\n\\n## PHP 魔術函數\\n\\n### `__construct` 建構式\\n\\n- `__construct()` : 當一個物件建立的時候會 **首先** 被呼叫。\\n- `__CLASS__` : 會回傳被呼叫的類別名稱。\\n\\n```php\\n<?php\\nclass MyClass\\n{\\n    public $prop1 = \\"I\'m a class property!\\";\\n\\n    public function __construct()\\n    {\\n        echo \'The class \\"\', __CLASS__, \'\\" was initiated!<br />\';\\n    }\\n\\n    public function setProperty($new_value)\\n    {\\n        $this->prop1 = $new_value;\\n    }\\n\\n    public function getProperty()\\n    {\\n        return $this->prop1 . \\"<br />\\";\\n    }\\n}\\n\\n// 實例化一個物件\\n$obj = new MyClass;\\n\\n// 取得屬性 $prop1 的值\\necho $obj->getProperty();\\n\\n// 在生命週期的最後加上\\necho \\"End of file.<br />\\";\\n```\\n\\n最後輸出\\n\\n```html\\nThe class \\"MyClass\\" was initiated! I\'m a class property! End of file.\\n```\\n\\n### `__destruct` 解構式\\n\\n- `__destruct()` : 可以清除物件，例如：關閉資料庫連線。\\n\\n```php\\n<?php\\nclass MyClass\\n    {\\n    public $prop1 = \\"I\'m a class property!\\";\\n\\n    public function __construct()\\n    {\\n        echo \'The class \\"\', __CLASS__, \'\\" was initiated!<br />\';\\n    }\\n\\n    public function __destruct()\\n    {\\n        echo \'The class \\"\', __CLASS__, \'\\" was destroyed.<br />\';\\n    }\\n\\n    public function setProperty($new_value)\\n    {\\n        $this->prop1 = $new_value;\\n    }\\n\\n    public function getProperty()\\n    {\\n        return $this->prop1 . \\"<br />\\";\\n    }\\n}\\n\\n// 實例化一個新的物件\\n$obj = new MyClass;\\n\\n// 取得屬性 $prop1 的值\\necho $obj->getProperty();\\n\\n// 在生命週期的最後加上\\necho \\"End of file.<br />\\";\\n```\\n\\n最後輸出畫面\\n\\n```html\\nThe class \\"MyClass\\" was initiated! I\'m a class property! End of file. The class \\"MyClass\\" was destroyed.\\n```\\n\\n- 當物件使用完畢，PHP 會自動釋放記憶體。\\n\\n### `unset`\\n\\n- `unset()` : 此方法可以更明確觸發 `__destruct()` 魔術函數。\\n\\n```php\\n<?php\\nclass MyClass\\n{\\n    public $prop1 = \\"I\'m a class property!\\";\\n\\n    public function __construct()\\n    {\\n        echo \'The class \\"\', __CLASS__, \'\\" was initiated!<br />\';\\n    }\\n\\n    public function __destruct()\\n    {\\n        echo \'The class \\"\', __CLASS__, \'\\" was destroyed.<br />\';\\n    }\\n\\n    public function setProperty($new_value)\\n    {\\n        $this->prop1 = $new_value;\\n    }\\n\\n    public function getProperty()\\n    {\\n        return $this->prop1 . \\"<br />\\";\\n    }\\n}\\n\\n// 將一個物件實例化\\n$obj = new MyClass;\\n\\n// 取得變數 $prop1\\necho $obj->getProperty();\\n\\n// 清除物件\\nunset($obj);\\n\\n// 生命週期結束後回傳\\necho \\"End of file.<br />\\";\\n```\\n\\n結果會輸出\\n\\n```html\\nThe class \\"MyClass\\" was initiated! I\'m a class property! The class \\"MyClass\\" was destroyed. End of file.\\n```\\n\\n### `__toString`\\n\\n- `__toString` : 將物件轉換為字串。\\n\\n如果將物件當作字串處理的話，會出現無法傳換型態的錯誤。\\n\\n```php\\n// 實例化一個新的物件\\n$obj = new MyClass;\\n\\n// 將物件輸出為字串\\necho $obj;\\n```\\n\\n輸出結果\\n\\n```html\\nThe class \\"MyClass\\" was initiated! Catchable fatal error: Object of class MyClass could not be converted to string\\n```\\n\\n加入 `__toString` 函數，來做轉換處理。\\n\\n```php\\n<?php\\nclass MyClass\\n{\\n    public $prop1 = \\"I\'m a class property!\\";\\n\\n    public function __construct()\\n    {\\n        echo \'The class \\"\', __CLASS__, \'\\" was initiated!<br />\';\\n    }\\n\\n    public function __destruct()\\n    {\\n        echo \'The class \\"\', __CLASS__, \'\\" was destroyed.<br />\';\\n    }\\n\\n    public function __toString()\\n    {\\n        echo \\"Using the toString method: \\";\\n        return $this->getProperty();\\n    }\\n\\n    public function setProperty($new_value)\\n    {\\n        $this->prop1 = $new_value;\\n    }\\n\\n    public function getProperty()\\n    {\\n        return $this->prop1 . \\"<br />\\";\\n    }\\n}\\n\\n// 實例化一個新的物件\\n$obj = new MyClass;\\n\\n// 回傳物件為字串\\necho $obj;\\n\\n// 清除這個物件\\nunset($obj);\\n\\n// 在生命周期結束後輸出\\necho \\"End of file.<br />\\";\\n```\\n\\n當物件試圖轉換成字串時，會觸發 `__toString` 函數，再由 `__toString` 函數呼叫 `getProperty()` 方法。\\n輸出結果為\\n\\n```html\\nThe class \\"MyClass\\" was initiated! Using the toString method: I\'m a class property! The class \\"MyClass\\" was destroyed. End of file.\\n```\\n\\n### `__get` `__set` 強制封裝\\n\\n- `__get()` 只會回傳屬性變數的值\\n- `__set()` 指派一個新的值給屬性變數\\n\\n```php\\nclass className\\n{\\n    private $attribute\\n\\n    function __get($name)\\n    {\\n        return $this->$name;\\n    }\\n\\n    function __set($name, $value)\\n    {\\n        $this->$name = $value;\\n    }\\n\\n}\\n\\n$a = new className();\\n//使用public時，不會用到__get(), __set()屬性\\n\\n$a->attribute = 5;\\n//私下呼叫__set()，使用$name設為attribute，$value設為5\\n\\n$a->attribute\\n//私下呼叫__get()，並將參數$name設為attribute\\n```\\n\\n- 優點：藉由單一的存取處，可以自由地修改底層的實作\\n\\n## 類別繼承\\n\\n- `extend` : 此關鍵字可以讓類別繼承其他類別的**方法**和**屬性**。\\n- 子類別只能繼承一個父類別。\\n\\n建立一個新的 `class` 並繼承 MyClass\\n\\n```php\\n<?php\\nclass MyClass\\n{\\n    public $prop1 = \\"I\'m a class property!\\";\\n\\n    public function __construct()\\n    {\\n        echo \'The class \\"\', __CLASS__, \'\\" was initiated!<br />\';\\n    }\\n\\n    public function __destruct()\\n    {\\n        echo \'The class \\"\', __CLASS__, \'\\" was destroyed.<br />\';\\n    }\\n\\n    public function __toString()\\n    {\\n        echo \\"Using the toString method: \\";\\n        return $this->getProperty();\\n    }\\n\\n    public function setProperty($new_value)\\n    {\\n        $this->prop1 = $new_value;\\n    }\\n\\n    public function getProperty()\\n    {\\n        return $this->prop1 . \\"<br />\\";\\n    }\\n}\\n\\nclass MyOtherClass extends MyClass\\n{\\n    public function newMethod()\\n    {\\n        echo \\"From a new method in \\" . __CLASS__ . \\".<br />\\";\\n    }\\n}\\n\\n// 實例化一個新的物件\\n$new_object = new MyOtherClass;\\n\\n// 回傳此類別的方法\\necho $new_object->newMethod();\\n\\n// 回傳父層類別的方法\\necho $new_object->getProperty();\\n```\\n\\n結果輸出\\n\\n```html\\nThe class \\"MyClass\\" was initiated! From a new method in MyOtherClass. I\'m a class property! The class \\"MyClass\\" was destroyed.\\n```\\n\\n### 覆寫 Override 繼承的方法和屬性\\n\\n在新的類別中，重新定義繼承自父層的屬性和方法\\n\\n```php\\n<?php\\nclass MyClass\\n{\\n    public $prop1 = \\"I\'m a class property!\\";\\n\\n    public function __construct()\\n    {\\n        echo \'The class \\"\', __CLASS__, \'\\" was initiated!<br />\';\\n    }\\n\\n    public function __destruct()\\n    {\\n        echo \'The class \\"\', __CLASS__, \'\\" was destroyed.<br />\';\\n    }\\n\\n    public function __toString()\\n    {\\n        echo \\"Using the toString method: \\";\\n        return $this->getProperty();\\n    }\\n\\n    public function setProperty($new_value)\\n    {\\n        $this->prop1 = $new_value;\\n    }\\n\\n    public function getProperty()\\n    {\\n        return $this->prop1 . \\"<br />\\";\\n    }\\n}\\n\\nclass MyOtherClass extends MyClass\\n{\\n    public function __construct()\\n    {\\n        echo \\"A new constructor in \\" . __CLASS__ . \\".<br />\\";\\n    }\\n\\n    public function newMethod()\\n    {\\n        echo \\"From a new method in \\" . __CLASS__ . \\".<br />\\";\\n    }\\n}\\n\\n// 實例化一個新的物件\\n$new_object = new MyOtherClass;\\n\\n// 回傳新類別的方法\\necho $new_object->newMethod();\\n\\n// 回傳父層類別的方法\\necho $new_object->getProperty();\\n```\\n\\n在新類別中，覆寫 `__construct` 方法的輸出結果\\n\\n```html\\nA new constructor in MyOtherClass. From a new method in MyOtherClass. I\'m a class property! The class \\"MyClass\\" was destroyed.\\n```\\n\\n### `final` 避免被覆寫\\n\\n- 方法前加入 `final` 避免被覆寫\\n\\n```php\\nclass A\\n{\\n    public $attribute = \'default value\';\\n\\n    final function operation()\\n    {\\n        echo \'Something<br />\';\\n        echo \'The value of $attribute is\'.$this->attribute.\'<br />\';\\n    }\\n}\\n //可防止B覆寫operation()\\n ------------------------------------------------------------\\n //如何完全防止一個類別被繼承？(完全不能被繼承)\\nfinal class A\\n{\\n\\n}\\n```\\n\\n### 範圍解析運算子 scope resolution operator\\n\\n當要將繼承自父層類別的方法其功能做擴充，要保留原始的功能，但不用將原有的程式碼重寫一遍。\\n\\n- 範圍解析運算子依然會受到可視性的限制。\\n\\n新增一個改寫父層類別的函數，並使用 `範圍解析運算子::`，來調用父類別被覆寫的函數\\n\\n```php\\n<?php\\nclass MyClass\\n{\\n    public $prop1 = \\"I\'m a class property!\\";\\n\\n    public function __construct()\\n    {\\n        echo \'The class \\"\', __CLASS__, \'\\" was initiated!<br />\';\\n    }\\n\\n    public function __destruct()\\n    {\\n        echo \'The class \\"\', __CLASS__, \'\\" was destroyed.<br />\';\\n    }\\n\\n    public function __toString()\\n    {\\n        echo \\"Using the toString method: \\";\\n        return $this->getProperty();\\n    }\\n\\n    public function setProperty($new_value)\\n    {\\n        $this->prop1 = $new_value;\\n    }\\n\\n    public function getProperty()\\n    {\\n        return $this->prop1 . \\"<br />\\";\\n    }\\n}\\n\\nclass MyOtherClass extends MyClass\\n{\\n    public function __construct()\\n    {\\n        parent::__construct(); // 調用來自父層的 construct 功能\\n        echo \\"A new constructor in \\" . __CLASS__ . \\".<br />\\";\\n    }\\n\\n    public function newMethod()\\n    {\\n        echo \\"From a new method in \\" . __CLASS__ . \\".<br />\\";\\n    }\\n}\\n\\n// 實例化一個新物件\\n$new_object = new MyOtherClass;\\n\\n// 將物件輸出成字串\\necho $new_object->newMethod();\\n\\n// 使用來自父層的方法\\necho $new_object->getProperty();\\n```\\n\\n結果輸出\\n\\n```html\\nThe class \\"MyClass\\" was initiated! A new constructor in MyOtherClass. From a new method in MyOtherClass. I\'m a class property! The class\\n\\"MyClass\\" was destroyed.\\n```\\n\\n## 將屬性和方法加上可視性 Visibility\\n\\n- `static` : 不用將類別實例化，即可調用。\\n- `public` : 方法及屬性可以在類別之外被存取。\\n- `protected` : 該屬性或方法只能在類別以及子類別的內部存取。\\n- `private` : 該屬性或方法只能在定義它們的類別內存取。\\n\\n### `Protected` 受保護的\\n\\n將 MyClass 的 `getProperty()` 方法的可視性宣告為 `protected`，並且嘗試從外面呼叫這個方法\\n\\n```php\\n<?php\\n\\nclass MyClass\\n{\\n    public $prop1 = \\"I\'m a class property!\\";\\n\\n    public function __construct()\\n    {\\n        echo \'The class \\"\', __CLASS__, \'\\" was initiated!<br />\';\\n    }\\n\\n    public function __destruct()\\n    {\\n        echo \'The class \\"\', __CLASS__, \'\\" was destroyed.<br />\';\\n    }\\n\\n    public function __toString()\\n    {\\n        echo \\"Using the toString method: \\";\\n        return $this->getProperty();\\n    }\\n\\n    public function setProperty($new_value)\\n    {\\n        $this->prop1 = $new_value;\\n    }\\n\\n    protected function getProperty()\\n    {\\n        return $this->prop1 . \\"<br />\\";\\n    }\\n}\\n\\nclass MyOtherClass extends MyClass\\n{\\n    public function __construct()\\n    {\\n        parent::__construct();\\n        echo \\"A new constructor in \\" . __CLASS__ . \\".<br />\\";\\n    }\\n\\n    public function newMethod()\\n    {\\n        echo \\"From a new method in \\" . __CLASS__ . \\".<br />\\";\\n    }\\n}\\n\\n// 實例化一個新物件\\n$new_object = new MyOtherClass;\\n\\n// 嘗試調用父層的 protected 方法\\necho $new_object->getProperty();\\n```\\n\\n結果輸出\\n\\n```html\\nThe class \\"MyClass\\" was initiated! A new constructor in MyOtherClass. Fatal error: Call to protected method MyClass::getProperty() from\\ncontext \'\'\\n```\\n\\n在子類別 MyOtherClass 中新增一個方法來調用父層的 `protected` `getProperty()` 方法\\n\\n```php\\n<?php\\nclass MyClass\\n{\\n    public $prop1 = \\"I\'m a class property!\\";\\n\\n    public function __construct()\\n    {\\n        echo \'The class \\"\', __CLASS__, \'\\" was initiated!<br />\';\\n    }\\n\\n    public function __destruct()\\n    {\\n        echo \'The class \\"\', __CLASS__, \'\\" was destroyed.<br />\';\\n    }\\n\\n    public function __toString()\\n    {\\n        echo \\"Using the toString method: \\";\\n        return $this->getProperty();\\n    }\\n\\n    public function setProperty($new_value)\\n    {\\n        $this->prop1 = $new_value;\\n    }\\n\\n    protected function getProperty()\\n    {\\n        return $this->prop1 . \\"<br />\\";\\n    }\\n}\\n\\nclass MyOtherClass extends MyClass\\n{\\n    public function __construct()\\n    {\\n        parent::__construct();\\n        echo \\"A new constructor in \\" . __CLASS__ . \\".<br />\\";\\n    }\\n\\n    public function newMethod()\\n    {\\n        echo \\"From a new method in \\" . __CLASS__ . \\".<br />\\";\\n    }\\n\\n    public function callProtected()\\n    {\\n        return $this->getProperty();\\n    }\\n}\\n\\n// 實例化一個新的物件\\n$new_object = new MyOtherClass;\\n\\n// 用子類別的 public 方法調用父層的 protected 方法\\necho $new_object->callProtected();\\n```\\n\\n輸出結果\\n\\n```html\\nThe class \\"MyClass\\" was initiated! A new constructor in MyOtherClass. I\'m a class property! The class \\"MyClass\\" was destroyed.\\n```\\n\\n### `Private` 隱私的\\n\\n將父層 MyClass 的 `getProperty()` 方法的宣告為 `private`，並且使用 MyOtherClass 的 `callProtected()` 方法來調用 `getProperty()` 方法。\\n\\n```php\\n<?php\\nclass MyClass\\n{\\n    public $prop1 = \\"I\'m a class property!\\";\\n\\n    public function __construct()\\n    {\\n        echo \'The class \\"\', __CLASS__, \'\\" was initiated!<br />\';\\n    }\\n\\n    public function __destruct()\\n    {\\n        echo \'The class \\"\', __CLASS__, \'\\" was destroyed.<br />\';\\n    }\\n\\n    public function __toString()\\n    {\\n        echo \\"Using the toString method: \\";\\n        return $this->getProperty();\\n    }\\n\\n    public function setProperty($new_value)\\n    {\\n        $this->prop1 = $new_value;\\n    }\\n\\n    private function getProperty()\\n    {\\n        return $this->prop1 . \\"<br />\\";\\n    }\\n}\\n\\nclass MyOtherClass extends MyClass\\n{\\n    public function __construct()\\n    {\\n        parent::__construct();\\n        echo \\"A new constructor in \\" . __CLASS__ . \\".<br />\\";\\n    }\\n\\n    public function newMethod()\\n    {\\n        echo \\"From a new method in \\" . __CLASS__ . \\".<br />\\";\\n    }\\n\\n    public function callProtected()\\n    {\\n        return $this->getProperty();\\n    }\\n}\\n\\n// 實例化一個新的物件\\n$new_object = new MyOtherClass;\\n\\n// 調用父層的方法\\necho $new_object->callProtected();\\n```\\n\\n輸出結果\\n\\n```html\\nThe class \\"MyClass\\" was initiated! A new constructor in MyOtherClass. Fatal error: Call to private method MyClass::getProperty() from\\ncontext \'MyOtherClass\'\\n```\\n\\n### `Static` 靜態的\\n\\n在 MyClass 加入一個 `static` 變數與方法： `$count`、`plusOne()`。\\n在類別的外面使用 `do…while` 迴圈增加 `$count` 的值。\\n\\n```php\\n<?php\\nclass MyClass\\n{\\n    public $prop1 = \\"I\'m a class property!\\";\\n\\n    public static $count = 0;\\n\\n    public function __construct()\\n    {\\n        echo \'The class \\"\', __CLASS__, \'\\" was initiated!<br />\';\\n    }\\n\\n    public function __destruct()\\n    {\\n        echo \'The class \\"\', __CLASS__, \'\\" was destroyed.<br />\';\\n    }\\n\\n    public function __toString()\\n    {\\n        echo \\"Using the toString method: \\";\\n        return $this->getProperty();\\n    }\\n\\n    public function setProperty($new_value)\\n    {\\n        $this->prop1 = $new_value;\\n    }\\n\\n    private function getProperty()\\n    {\\n        return $this->prop1 . \\"<br />\\";\\n    }\\n\\n    public static function plusOne()\\n    {\\n        return \\"The count is \\" . ++self::$count . \\".<br />\\";\\n    }\\n}\\n\\nclass MyOtherClass extends MyClass\\n{\\n    public function __construct()\\n    {\\n        parent::__construct();\\n        echo \\"A new constructor in \\" . __CLASS__ . \\".<br />\\";\\n    }\\n\\n    public function newMethod()\\n    {\\n        echo \\"From a new method in \\" . __CLASS__ . \\".<br />\\";\\n    }\\n\\n    public function callProtected()\\n    {\\n        return $this->getProperty();\\n    }\\n}\\n\\n// 在沒有實例化 MyClass 之下，範圍解析運算子調用 plusOne 方法\\ndo {\\n    echo MyClass::plusOne();\\n} while (\\n    MyClass::$count < 10\\n);\\n```\\n\\n- 當使用範圍解析運算子存取 `static` 屬性時，屬性名稱前面加上錢字號 `$`\\n\\n輸出結果\\n\\n```html\\nThe count is 1. The count is 2. The count is 3. The count is 4. The count is 5. The count is 6. The count is 7. The count is 8. The count is\\n9. The count is 10.\\n```\\n\\n## 介面與抽象類別的應用\\n\\n### interface 介面\\n\\n- `implements`關鍵字 : 執行介面\\n- 定義功能名稱，但交由執行的類別去**實作**功能\\n- 執行介面的類別一定要實作介面的方法。\\n- 介面可以繼承其他的介面。\\n- 類別可以同時執行多個介面。\\n\\nBark.php\\n\\n```php\\n<?php\\n  interface Bark\\n  {\\n    public function bark();\\n  }\\n```\\n\\nSwim.php\\n\\n```php\\n<?php\\n  interface Swim\\n  {\\n    public function swim();\\n  }\\n```\\n\\nHuman.php\\n\\n```php\\n<?php\\n  include \\"Bark.php\\";\\n  include \\"Swim.php\\";\\n\\n  class Human implements Bark, Swim\\n  {\\n    public function bark()\\n    {\\n      echo \\"人類叫聲...是在叫什麼啦！！\\";\\n    }\\n\\n    public function swim()\\n    {\\n      echo \\"人類在游泳...不是在洗澡嗎？\\";\\n    }\\n  }\\n```\\n\\ndemo.php\\n\\n```php\\n<?php\\n  include \\"Human.php\\";\\n  $man = new Human();\\n  echo $man->bark();\\n  echo $man->swim();\\n```\\n\\n介面的使用時機 : 當「多個類別（Class）」之間有共同的方法（function），但方法實做的方式有差異，可以將這些共用「方法」寫成「介面（Interface）」，讓其他的「子類別（Class）」去實做這個介面\\n\\n### Abstract 抽象類別\\n\\n- 父類別若不想實作介面方法，子類別又需要定義介面功能，可以將父類別抽象化，即可不用實作介面方法。\\n- 子類別繼承抽象父類別之後，必須要實作父類別的介面方法。\\n\\ndog.php\\n\\n```php\\n<?php\\ninclude \\"Bark.php\\";\\nabstract class dog implements Bark\\n{\\n   // 設定狗的屬性\\n   public $name;\\n   public $color;\\n   public $style;\\n\\n   //設定建構子\\n   public function __construct($name,$color,$style)\\n   {\\n     $this->name = $name;\\n     $this->color = $color;\\n     $this->style = $style;\\n   }\\n\\n   public function dogRun()\\n   {\\n     echo \\"狗狗跑步中...\\";\\n   }\\n\\n   // 修改狗叫的功能\\n   public function Bark()\\n   {\\n     //這裡保持空白\\n   }\\n\\n   public function __destruct()\\n   {\\n     echo \\"狗狗回家了...\\";\\n   }\\n}\\n```\\n\\nPoodle.php\\n\\n```php\\ninclude \\"dog.php\\";\\n\\nclass Poodle extends dog\\n{\\n  protected $size;\\n\\n  public function __construct($name,$color,$style,$size)\\n  {\\n    parent::__construct($name,$color,$style);\\n    $this->size = $size;\\n  }\\n\\n  // 實作父類別的狗叫 function\\n  public function Bark()\\n  {\\n    echo \\"狗叫...但小聲....\\";\\n    //呼叫父類別的 dogBark()\\n  }\\n}\\n```\\n\\ndemo2.php\\n\\n```php\\n<?php\\n  include \\"Poodle.php\\";\\n\\n  $my_dog = new Poodle(\\"Windy\\",\\"白色\\",\\"貴賓狗\\",30);\\n\\n  echo $my_dog->Bark();\\n```\\n\\n抽象類別的使用時機 : 當「多個類別（Class）」之間有共同的方法（function）或屬性（attribute）時，可以將這些共用的地方寫成「抽象類別（Abstract Class）」，讓其他的「子類別（Class）」去繼承\\n\\n## `trait` 的應用\\n\\n簡化 Class 功能複用\\n\\n```php\\nclass Man\\n{\\n    public function walk() { // ... }\\n    public function run() { // ... }\\n}\\n\\nclass Woman\\n{\\n    public function walk() { // ... }\\n    public function run() { // ... }\\n}\\n```\\n\\n當兩個 `class` 都有類似的內容(property 或 method)，用 `trait` 簡化\\n\\n```php\\ntrait Moveable\\n{\\n    public function walk() { // ... }\\n    public function run() { // ... }\\n}\\n\\nclass Man\\n{\\n    use Moveable;\\n}\\n\\nclass Woman\\n{\\n    use Moveable;\\n}\\n```\\n\\n`trait`的屬性無法被使用其的類別覆寫\\n\\n```php\\ntrait CountAge\\n{\\n    protected $age;\\n\\n    public function getAge(): int { return $this->age; }\\n    public function setAge(int $age): void { $this->age = $age; }\\n}\\n\\nclass Child\\n{\\n    use CountAge;\\n\\n    protected $age = 10;\\n}\\n```\\n\\n因為 CountAge 與 Child 中都存在 `$age` 這個屬性，此時便會產生\\n\\n```html\\nPHP Fatal error: Child and CountAge define the same property ($age) in the composition of Child. However, the definition differs and is\\nconsidered incompatible.\\n```\\n\\n在使用這個 `trait` 的 `class` 都可以使用其所定義的方法。`trait` 中定義的方法為共有的。\\n\\n```php\\ntrait CheckAdult\\n{\\n    private function getAge(): int\\n    {\\n        return $this->age;\\n    }\\n\\n    public function isAdult(): bool\\n    {\\n        return $this->getAge() >= 18;\\n    }\\n}\\n\\nclass Human\\n{\\n    use CheckAdult;\\n\\n    protected $age = 18;\\n\\n    public function canAccessPornHub(): bool\\n    {\\n        return $this->isAdult();\\n    }\\n\\n    public function canAccessGayTube(): bool\\n    {\\n         public $this->getAge() >= 18;\\n    }\\n}\\n```\\n\\n- 只要 `use` CheckAdult，就可以使用 `isAdult()` 與 `getAge()`。\\n\\n`trait` 之間不可以具有相同名稱的方法，否則會丟出 Fatal Error。\\n\\n```php\\ntrait USD\\n{\\n    public function getBalance() {  }\\n}\\n\\ntrait TWD\\n{\\n    public function getBalance() {  }\\n}\\n\\nclass Wallet\\n{\\n    use USD;\\n    use TWD;\\n}\\n```\\n\\n若將函式設為 private 也同樣會出現衝突。\\n\\n```php\\ntrait USD\\n{\\n    private function convert(string $to) { // ... }\\n    public function getUSDBalance(): int { return $this->convert(\'USD\'); }\\n}\\n\\ntrait TWD\\n{\\n    private function convert(string $to) { // ... }\\n    public function getTWDBalance(): int { return $this->convert(\'TWD\'); }\\n}\\n\\nclass Wallet\\n{\\n    use USD;\\n    use TWD;\\n}\\n```\\n\\n## 參考資料\\n\\n[後端 PHP+Laravel--新手實戰日記](https://ithelp.ithome.com.tw/articles/10216317)\\n","tocContent":"- [PHP 物件導向](#php-物件導向)\\n  - [物件和類別 `Objects` and `Classes`](#物件和類別-objects-and-classes)\\n  - [建立類別 `Class`](#建立類別-class)\\n  - [定義類別的屬性](#定義類別的屬性)\\n  - [定義類別的方法 Methods](#定義類別的方法-methods)\\n  - [定義類別的常數 const](#定義類別的常數-const)\\n  - [封裝 Encapsulation](#封裝-encapsulation)\\n  - [PHP 魔術函數](#php-魔術函數)\\n    - [`__construct` 建構式](#__construct-建構式)\\n    - [`__destruct` 解構式](#__destruct-解構式)\\n    - [`unset`](#unset)\\n    - [`__toString`](#__tostring)\\n    - [`__get` `__set` 強制封裝](#__get-__set-強制封裝)\\n  - [類別繼承](#類別繼承)\\n    - [覆寫 Override 繼承的方法和屬性](#覆寫-override-繼承的方法和屬性)\\n    - [`final` 避免被覆寫](#final-避免被覆寫)\\n    - [範圍解析運算子 scope resolution operator](#範圍解析運算子-scope-resolution-operator)\\n  - [將屬性和方法加上可視性 Visibility](#將屬性和方法加上可視性-visibility)\\n    - [`Protected` 受保護的](#protected-受保護的)\\n    - [`Private` 隱私的](#private-隱私的)\\n    - [`Static` 靜態的](#static-靜態的)\\n  - [介面與抽象類別的應用](#介面與抽象類別的應用)\\n    - [interface 介面](#interface-介面)\\n    - [Abstract 抽象類別](#abstract-抽象類別)\\n  - [`trait` 的應用](#trait-的應用)\\n  - [參考資料](#參考資料)"}')},7573:function(n){"use strict";n.exports=JSON.parse('{"name":"Postman 學習筆記.md","content":"# [Postman 學習筆記](https://tw.alphacamp.co/blog/postman-api-tutorial-for-beginners)\\n\\n## 參數區介紹\\n\\n### Params 網址參數頁\\n\\n設定 Query Params 搜尋參數 Path Variables 路徑變數\\n\\n- 預設只有 Query Params 搜尋參數，Path Variable 路徑變數，需要自行在網址上打上冒號＋變數名 (ex. \\" : name \\" )，才會出現\\n- 設定方式都是採 Key - value ，可以根據情況彈性勾選\\n\\n### Authorization 驗證設定頁\\n\\n用來設定 Header 中的 Authorization 參數\\n\\n- No Auth | 不需要驗證\\n- Basic Auth ｜帳號，密碼型驗證\\n- token 驗證 ｜ token 型驗證\\n\\n### Header\\n\\n用來設定 Header 中的其他參數\\n\\npostman 把一些必要的參數隱藏起來，如需特殊設定，可以取消隱藏，進行修改。\\n\\n- User-Agent | 告知 Server，發出 Request 的 Client 瀏覽器、作業系統等資訊\\n- Accept ｜告知 Server，Client 可以解讀的內容類型\\n- Content-type | 告知 Server，Client 提交什麼類型內容\\n\\n### body\\n\\n較常用的是 form-data, x-www-form-urlencoded, raw，前兩者都是送出表單資料，最後一個提供較多彈性的資料格式。\\n\\n- form-data 不會針對內容進行編碼，可選擇 file 類型進行上傳檔案\\n- x-www-form-urlencoded 會以 Key = val1 進行編碼，一般的表單資料使用\\n- raw 放 postman JSON 資料\\n\\n## Laravel CSRF\\n\\n### 原因\\n\\n當使用 postman 發出 post 請求時，laravel 回傳 419 | expired\\n\\nlaravel 會透過應用程式自動產生一個 CSRF token 來管理每一個使用者的 session。\\n\\n這個 token 用於驗證已認證使用者，是否實際向應用程式發出請求。\\n\\n在`vender/laravel/framework/src/Illuminate/Session/Store.php`中可以看到，每次進入 laravel 專案的時候，都會檢查 session 中\\\\_token 是否存在，若不存在就會呼叫 `regenerateToken` 重新生成一個 token。\\n\\n```php\\npublic function start()\\n{\\n    $this->loadSession();\\n    if (! $this->has(\'_token\')) {\\n        $this->regenerateToken();\\n    }\\n\\n    return $this->started = true;\\n}\\n```\\n\\n`regenerateToken` 實作，隨機產生亂數字元。\\n\\n```php\\npublic function regenerateToken()\\n{\\n    $this->put(\'_token\', Str::random(40));\\n}\\n```\\n\\n### postman 添加校驗 token\\n\\n先進入網站首頁取得 token\\n\\n將 token 放入 post request 的 header， X-XSRF-TOKEN 的欄位中。\\n\\n### 撰寫 javascript 自動獲取 token\\n\\n在進入網站首頁的 API 的 test 中，加入以下程式，以自動獲取 token。\\n\\n```php\\npm.environment.set(\\n    \\"XSRF-TOKEN\\",\\n    decodeURIComponent(pm.cookies.get(\\"XSRF-TOKEN\\"))\\n)\\n```\\n\\n接著在 post 的 request 中的 header 加入 `X-XSRF-TOKEN:{{XSRF-TOKEN}}`\\n\\n## Postman 壓力測試(串行處理)\\n\\n在要測試的 request test 中定義測試的程式碼\\n\\n```javascript\\n// 檢查 api 是否返回 200 status code\\npm.test(\\"Status code is 200\\", function () {\\n  console.log(JSON.parse(responseBody));\\n  pm.response.to.have.status(200);\\n});\\n```\\n\\n開啟 Runner 選擇要測試的 api\\n\\n選擇 environment，調整請求次數: iterations，調整延遲時間：Delay\\n\\n## http status\\n\\n- 資訊回應 (informational responses) 100 - 199\\n- 成功回應 (Successful responses) 200 - 299\\n- 重定向 (Redirect) 300 - 399\\n- 用戶端錯誤 (Client errors) 400 - 499\\n- 伺服器端錯誤 (Server error) 500-599\\n\\n## postman 無法開啟 collection\\n\\n1. 將 postman 解除安裝\\n2. 刪除 C:\\\\Users\\\\AppData\\\\Local\\\\Postman\\n3. 刪除 C:\\\\Users\\\\AppData\\\\Roaming\\\\Postman\\n4. 下載最新版本的 postman\\n","tocContent":""}')},9568:function(n){"use strict";n.exports=JSON.parse('{"name":"RESTful API.md","content":"# RESTful API\\n\\n> RESTful API 是一種設計模式\\n>\\n> 定義一組\\"物件\\"(object)，他們是可以被操作的。\\n> 物件運用一組固定\\"動作\\"(action)簡稱(CRUD)\\n>\\n> - 創建(create)\\n> - 刪除(delete)\\n> - 更新(update)\\n> - 讀取(read)\\n>\\n> 主流以 JSON 格式做資料傳遞\\n> 基本上會包含 URL\\\\Object\\\\Action\\n\\n## 常用 HTTP 動詞\\n\\n- GET: 讀取資源(不會變動或是更改到伺服器的資訊，主要用來查資料)\\n- POST: 新增資料\\n- DELETE: 刪除資料\\n- PUT: 替換資源\\n- PATCH: 更新資源\\n\\n如以 Post(文章)這個物件舉例\\n\\n| HTTP 動詞 |      URL       |           功能           |                                       說明                                       |\\n| :-------: | :------------: | :----------------------: | :------------------------------------------------------------------------------: |\\n|   POST    |  api/v1/posts  |       發表一篇文章       |        如果有相同的請求送第二次，會回傳新的一筆資料，內容一樣只有 ID 不同        |\\n|  DELETE   | api/v1/posts/1 |     刪除 id=1 的文章     |                 如果發送兩次請求，第二次回傳找不到資源的錯誤訊息                 |\\n|    PUT    | api/v1/posts/1 |    id=1 資料整筆替換     |                  替換整筆資料，有點像舊資料的刪除，寫入新的資料                  |\\n|   PATCH   | api/v1/posts/1 | 更新文件 id=1 的部分內容 | 只替代掉部分內容，內容會依照發送請求的資料作修改。如果沒有填寫的部分保留原始資料 |\\n\\n- 其他不符合以上類別的動作用 POST\\n\\n## Laravel RESTful API\\n\\n### 建立 controller\\n\\n```bash\\nphp artisan make:controller Api/TestController --api\\n```\\n\\n```php\\nnamespace App\\\\Http\\\\Controllers\\\\Api;\\n\\nuse App\\\\Http\\\\Controllers\\\\Controller;\\nuse Illuminate\\\\Http\\\\Request;\\n\\nclass TestController extends Controller\\n{\\n    public function index()\\n    {\\n        // 列出所有\\n    }\\n\\n    public function store(Request $request)\\n    {\\n        // 建立資料\\n    }\\n\\n    public function show($id)\\n    {\\n        // 顯示指定 id 的資料\\n    }\\n\\n    public function update(Request $request, $id)\\n    {\\n        // 更新指定 id 的資料\\n    }\\n\\n    public function destroy($id)\\n    {\\n        // 刪除指定 id 的資料\\n    }\\n}\\n```\\n\\n### 加入 api\\n\\nroutes/api.php\\n\\n```php\\nRoute::middleware(\'auth:api\')->group(function () {\\n    Route::apiResource(\'test\', \'TestController\');\\n});\\n```\\n\\n### URL\\n\\n| action |                 url                  | Controller function |\\n| :----: | :----------------------------------: | :-----------------: |\\n|  get   |     `{{ server-url }}/api/test`      |        index        |\\n|  post  |     `{{ server-url }}/api/test`      |        store        |\\n|  get   | `{{ server-url }}/api/test/{{ id }}` |        show         |\\n| patch  | `{{ server-url }}/api/test/{{ id }}` |       update        |\\n| delete | `{{ server-url }}/api/test/{{ id }}` |       destroy       |\\n","tocContent":""}')},4142:function(n){"use strict";n.exports=JSON.parse('{"name":"Redis 學習筆記.md","content":"# Redis 學習筆記\\n\\n>\\n\\n## redis-cil\\n\\n```bash\\n# redis-cli -h <host> -p <port>\\nredis-cli -h 127.0.0.1 -p 6379\\n```\\n\\n## 資料類型\\n\\n- redis 支援五種資料類型：\\n  - string 字串\\n  - hash 雜湊\\n  - list 列表\\n  - set 集合\\n  - zset 有序集合\\n\\n### string\\n\\n一個 key 對應一個 value。\\n\\n字串類型為二進制，因此 string 可包含任何資料，如 jpg 圖片，或是一個序列化的物件。\\n\\nstring 最大可以儲存 512MB\\n\\n```redis\\n# SET key value [EX seconds|PX milliseconds|KEEPTTL] [NX|XX]\\n> SET phone Note10 EX 10          # 10 秒過期\\n> SET price 23900\\n\\n# SETNX key value\\n# SET if Not Exist，如果該 key 不存在才儲存\\n> SETNX frameworks \\"react vue angular\\" # 回傳 1 表示成功，0 表示失敗（該 key 已經存在）\\n\\n# SETEX key seconds value  # 設定過期時間\\n\\n# 增加或減少數值\\n> INCR price               # 23901，一次增加 1\\n> DECR price               # 23900，一次減少 1\\n> INCRBY price 1000        # 24900，一次增加 1000\\n> DECRBY price 1000        # 23900，一次減少 1000\\n```\\n\\n### List\\n\\n由於 Lists 本質上是 linked-list 的緣故，它在新增和刪除元素的速度是快的，但搜尋速度是相對慢的。可以使用 RPUSH 和 LPUSH 來新增元素，如果該 key 尚不存在的話，會回傳新的 List，如果該 key 已經存在，或它不是 List 的話，則會回傳錯誤。\\n\\n- 有順序性\\n- 新增刪除速度相對快：適合用在只要取出頭尾元素的情況(ex: Quene)\\n- 搜尋速度相對慢\\n- 適用時機\\n  - Message Quene: 只需取出頭尾的元素，不需要搜尋\\n\\n```redis\\n# 在 List 中新增元素\\n# RPUSH <key> <element> [element ...] / LPUSH <key> <element> [element ...]\\n> RPUSH frameworks react vue angular  # 3\\n> LPUSH frameworks svelte             # 4\\n\\n# 檢視 List 中的元素\\n# LRANGE <key> <start> <stop>\\n> LRANGE frameworks 0 -1  # 列出所有元素，-1 表示 list 中的最後一個元素\\n\\n# 檢視 List 數目\\n# LLEN <key>\\n> LLEN frameworks\\n\\n# 移除 list 中的元素\\n# RPOP <key> / LPOP <key>\\n> RPOP frameworks         # 移除 list 最後一個元素\\n> LPOP frameworks\\n```\\n\\n### Set\\n\\n由多個 redis 中的 string 以無序的方式所組成，其保證內部不會有重複的元素，此外 Redis 提供了多個 Set 之間交集、差集與聯集的操作。\\n\\n- 使用時機：\\n\\n  - 記錄每一個造訪的 ip\\n  - 商品標籤\\n\\n- Set 的基礎操作\\n  - CRUD: SADD SREM SMEMBERS SCARD SPOP\\n  - 集合操作: SDIFF SINTER SUNION\\n\\n```redis\\n# SADD <key> <member> [member ...]   # 新增元素到 Set 中\\n> SADD languages english             # 1，新增的元素數目\\n> SADD languages frensh chinese      # 2，新增的元素數目\\n> SADD languages english             # 0，如果元素已經在該 Sets 中，會回傳 0\\n\\n# SREM <key> <member> [member...]     # 從 Set 中移除元素\\n> SREM languages english              # 1，移除的元素數目\\n\\n# SMEMBERS <key>                      # 檢視 Set 中所有元素\\n> SMEMBERS languages                  # 回傳的元素沒有順序性\\n\\n# SISMEMBER <key> <member>            # 檢視元素是否存在該 Set 中\\n> SISMEMBER languages chinese         # 1，存在的話回傳 1，不存在則回傳 0\\n\\n# SUNION <key> [key...]               # 合併多個 Sets\\n> SUNION languages programming-languages\\n127.0.0.1:6379> SMEMBERS bike\\n1) \\"green\\"\\n2) \\"white\\"\\n3) \\"black\\"\\n4) \\"red\\"\\n127.0.0.1:6379> SUNION car\\n1) \\"green\\"\\n2) \\"yellow\\"\\n3) \\"red\\"\\n127.0.0.1:6379> SUNION car bike\\n1) \\"yellow\\"\\n2) \\"red\\"\\n3) \\"white\\"\\n4) \\"black\\"\\n5) \\"green\\"\\n```\\n\\n### Hash\\n\\n為 key-value 的資料類型，也是 Redis 的主結構，非常適合用於儲存物件型資料，例如 User 物件有姓名、年齡、信箱等。當物件非常小時，Hash 會將資料壓縮後儲存，因此單台 redis 可以儲存數百萬個小物件。\\n\\n- Hash 的基礎操作\\n  - CRUD: HSET HGET HDEL\\n  - 多欄位讀: HGETALL HKEYS HMGET\\n\\n```redis\\n# HSET <key> <field> <value> [field value...]   # 新增 field-value pairs 到 Hash 中\\n> HSET phone name \\"iphone\\"       # 1，新增的數目\\n> HSET phone price 22500     # 1，新增的數目\\n> HSET phone name \\"iphone mini\\"  # 0，表示該 field 已經存在 hash 中，將會「更新」其 value\\n\\n# HGET <key> <field>             # 取得 field 的 value\\n> HGET phone name                # \\"iphone mini\\"\\n\\n# HGETALL <key>                  # 取得所該 hash 對所有值\\n> HGETALL phone\\n\\n# HMSET <key> <field> <value> [field value...]  # 和 HSET 相同\\n# HMGET <key> <field> [field...]    # 一次取出多個 field 的值\\n> HMGET phone name priceHSET\\n```\\n\\n### Sorted Set\\n\\n為有序的 Set，其順序會依照傳入的權重值排序，在查找資料時，可使用 binary search，因此查找效率高。由於 Sorted Set 的高效能查詢，Sorted Set 可當做一組 Hash 資料的 index，將物件 id 以及 index field 儲存在 Sort Set，單筆物件的完整資料儲存在 Hash。\\n\\n- 有順序性，透過 `score` 產生連結來達到排序的作用，`score` 本身會是 `float`\\n- 元素值仍然是唯一，但 `score` 可以不是唯一\\n- 不論是 Add, Remove 或是 update 速度都很快，可以同時快速搜學中間的項目\\n- 可以視為 `set` 和 `hash` 的混合\\n- 使用上指令和 `set` 相似，只要將最開頭的 `S` 改成 `Z`\\n- 使用時機\\n\\n  - 遊戲的計分板\\n\\n- Sorted Set 的基礎操作\\n\\n  - CRUD: ZADD ZRANGE ZREM\\n  - Rank 操作: ZRANK 找元素位置，ZSCORE 設定元素權重值\\n\\n- option\\n  - XX: 只更新存在的成員，不添加新成員\\n  - NX: 不更新存在的成員，只添加新成員\\n  - CN: 修改返回值為發生變化的成員總數，原始是返回新添加成員的總數(CH 為 change 的縮寫)。更改的元素是新增加的成員，已經存在的成員更新分數。所以在命令中指定的成員有相同的分數將不被計算在內。一般而言，ZADD 只會返回新增成員的數量\\n  - INCR: 當 ZADD 指定這個選項時，成員的做就等同 ZINCRBY 命令，對成員的分數進行遞增操作。\\n\\n```redis\\n# ZADD <key> [NX|XX] [CH] [INCR] <score> <member> [score member ...]，新增 sorted Set\\n> ZADD students 1 aaron                  # 1\\n> ZADD students 2 allison         # 1\\n> ZADD students 3 bruce 4 derek          # 2\\n\\n# XX：只更新已存在的 member 的 score，絕不新增 member\\n# NX：不更新已存在的 member 的 score，總是新增 member\\n> ZADD students XX 10 aaron    # 如果 aaron 存在，則將 score 更新為 10\\n> ZADD students NX 777 jen     # 如果 jen 不存在，則新增且將 score 設為 777\\n\\n# ZRANGE <key> <start> <stop> [WITHSCORES]，檢視 sorted set\\n> ZRANGE students 0 -1                   # 檢視 sorted set 中所有元素\\n\\n# ZCARD <key>，檢視該 set 中的元素數目\\n> ZCARD students\\n\\n# ZCOUNT <key> <min> <max>     # 檢視分數介於 min ~ max 間的元素拭目\\n> ZCOUNT students 0 10\\n\\n# ZSCORE <key> <member>        # 檢視某 member 的 score\\n> ZSCORE students aaron\\n\\n# ZINCRBY <key> <increment> <member>    # 幫 member 的 score 分數增加\\n> ZINCRBY students 10 aaron             # 幫 aaron 的 score 加 10\\n```\\n\\n## redis Key\\n\\n| 指令                                      | 描述                                      |\\n| ----------------------------------------- | ----------------------------------------- |\\n| DEL key                                   | 當 key 存在時，將其刪除                   |\\n| DUMP key                                  | 序列化傳入的 key，並回傳被序列化的值      |\\n| EXISTS key                                | 檢查傳入的 key 是否存在                   |\\n| EXPIRE key seconds                        | 為傳入的 key 設定過期時間，以秒計         |\\n| EXPIREAT key timestamp                    | 設定過期時間，接受 UNIX 時間戳 為時間參數 |\\n| PEXPIRE key milliseconds                  | 設置過期時間以毫秒計                      |\\n| PEXPIREAT key milliseconds-timestamp      | 設置過期時間的時間戳以毫秒計              |\\n| KEYS pattern                              | 查找所有符合傳入模式 (pattem) 的 key      |\\n| MOVE key db                               | 將目前資料庫中 key 移動到指定的資料庫中   |\\n| PERSIST key                               | 移除 key 的過期時間，key 將永久保存       |\\n| PTTL key                                  | 以毫秒為單位，回傳 key 剩餘的過期時間     |\\n| TTL key                                   | 以秒為單位，回傳 key 剩餘的過期時間       |\\n| RANDOMKEY                                 | 從資料庫中，隨機回傳一個 key              |\\n| RENAME key newkey                         | 修改 key 的名稱                           |\\n| RENAMENX key newkey                       | 當 newkey 不存在時，將 key 改名為 newkey  |\\n| SCAN cursor [MATCH pattern] [COUNT count] | 迭代資料庫中的資料庫鍵                    |\\n| TYPE key                                  | 返回 key 所儲存的值的類型                 |\\n\\n## 指令間聽\\n\\n在 redis-cli 中下 `monitor` 可監聽所有對 redis 的操作\\n\\n## Redis GUI\\n\\n> [Another Redis Desktop Manager](https://github.com/qishibo/AnotherRedisDesktopManager/)\\n>\\n> [[Tool] Redis 管理工具 - Another Redis Desktop Manager](https://marcus116.blogspot.com/2020/04/tool-redis-another-redis-desktop-manager.html)\\n\\n## windows 安裝 phpredis\\n\\n> 下載 phpredis 需要對應 php 的版本\\n>\\n> PHP Version `7.4.29`\\n>\\n> Architecture: `x64`\\n>\\n> PHP Extension Build: API20190902,`TS`,`VC15`\\n\\n[windows phpredis](https://windows.php.net/downloads/pecl/releases/redis/)\\n\\n5.3.7 -> php_redis-`5.3.7-7.4`-`ts-vc15`-`x64`.zip\\n\\n將下載的檔案解壓縮後，將資料夾內 `php_redis.dll` 和 `php_redis.pdb` 複製到 php 的擴充套件 `ext` 目錄之下\\n\\n最後在 php.ini 檔案中，加入兩行程式碼(注意順序)\\n\\n```txt\\nextension=php_igbinary.dll\\nextension=php_redis.dll\\n```\\n\\n最後在 phpinfo 中檢查 php-redis 是否安裝成功\\n","tocContent":"- [Redis 學習筆記](#redis-學習筆記)\\n  - [redis-cil](#redis-cil)\\n  - [資料類型](#資料類型)\\n    - [string](#string)\\n    - [List](#list)\\n    - [Set](#set)\\n    - [Hash](#hash)\\n    - [Sorted Set](#sorted-set)\\n  - [redis Key](#redis-key)\\n  - [指令間聽](#指令間聽)\\n  - [Redis GUI](#redis-gui)\\n  - [windows 安裝 phpredis](#windows-安裝-phpredis)"}')},9442:function(n){"use strict";n.exports=JSON.parse('{"name":"SOLID 物件導向原則.md","content":"# SOLID 物件導向原則\\n\\n> 參考資料\\n>\\n> [物件導向設計原則 SOLID](https://clouding.city/php/solid/)\\n\\n## SPR 單一職責原則\\n\\n> Single Responsibility Principle\\n\\n### 定義\\n\\n應該且僅有一個原因引起類別的變更，讓類別只有一個職責。\\n\\n### 秘訣\\n\\n- 關注點分離\\n- 不應該因為貪圖方便塞在一起\\n- 若切分太細，會有類別太多的問題\\n\\n### 提醒\\n\\n- 設計階段就可以避開類別職責太大的問題\\n- 在維護階段需小心別又讓類別職責變多\\n\\nBad\\n\\n```php\\nclass UserSettings\\n{\\n    private $user;\\n\\n    public function __construct(User $user)\\n    {\\n        $this->user = $user;\\n    }\\n\\n    public function changSettings(array $settings): void\\n    {\\n        if ($this->verifyCredentials()) {\\n            //\\n        }\\n    }\\n\\n    private function verifyCredentials(): bool\\n    {\\n        //\\n    }\\n}\\n```\\n\\nGood\\n\\n```php\\nclass UserAuth\\n{\\n    private $user;\\n\\n    public function __construct(User $user)\\n    {\\n        $this->user = $user;\\n    }\\n\\n    public function verifyCredentials(): bool\\n    {\\n        //\\n    }\\n}\\n\\nclass UserSetters\\n{\\n    private $user;\\n\\n    private $auth;\\n\\n    public function __construct(User $user)\\n    {\\n        $this->user = $user;\\n        $this->auth = new UserAuth($user);\\n    }\\n\\n    public function ChangSettings(array $settings): void\\n    {\\n        if ($this->auth->verifyCredentials()) {\\n            //\\n        }\\n    }\\n}\\n```\\n\\n## Open Closed Principle 開放封閉原則\\n\\n### 定義\\n\\n軟體中的對象(類別、函數)，對於擴展是開放的，對於修改是封閉的。\\n\\n### 秘訣\\n\\n- 只考慮抽象層級的介面互動\\n- 把變化委託給其他類別處理\\n- 只異動 metadata 或 config\\n\\n### 提醒\\n\\n- 不是所有程式都遵守 OCP\\n- 可能一開始無法預想到要擴充，但可以透過重構完成\\n- 不要過度用繼承的方式來進行擴充\\n\\nBad\\n\\n```php\\nabstract class Adapter\\n{\\n    protected $name;\\n\\n    public function getName(): string\\n    {\\n        return $this->name;\\n    }\\n}\\n\\nclass AjaxAdapter extends Adapter\\n{\\n    public function __construct()\\n    {\\n        parent::__construct();\\n\\n        $this->name = \'ajaxAdapter\';\\n    }\\n}\\n\\nclass NodeAdapter extends Adapter\\n{\\n    public function __construct()\\n    {\\n        parent::__construct();\\n\\n        $this->name = \'nodeAdapter\';\\n    }\\n}\\n\\nclass HttpRequester\\n{\\n    private $adapter;\\n\\n    public function __construct(Adapter $adapter)\\n    {\\n        $this->adapter = $adapter;\\n    }\\n\\n    public function fetch(string $url): promise\\n    {\\n        $adapterName = $this->adapter->getName();\\n\\n        if ($adapterName === \'ajaxAdapter\') {\\n            return $this->makeAjaxCall($url);\\n        } elseif ($adapterName === \'httpNodeAdapter\') {\\n            return $this->makeHttpCall($url);\\n        }\\n    }\\n\\n    private function makeAjaxCall(string $url): promise\\n    {\\n        // request and return promise\\n    }\\n\\n    private function makeHttpCall(string $url): promise\\n    {\\n        // request and return promise\\n    }\\n}\\n```\\n\\nGood\\n\\n```php\\ninterface Adapter\\n{\\n    public function request(string $url): promise;\\n}\\n\\nclass AjaxAdapter implements Adapter\\n{\\n    public function request(string $url): promise\\n    {\\n        // request and return promise\\n    }\\n}\\n\\nclass NodeAdapter implements Adapter\\n{\\n    public function request(string $url): promise\\n    {\\n        // request and return promise\\n    }\\n}\\n\\nclass HttpRequester\\n{\\n    private $adapter;\\n\\n    public function __construct(Adapter $adapter)\\n    {\\n        $this->adapter = $adapter;\\n    }\\n\\n    public function fetch(string $url): promise\\n    {\\n        return $this->adapter->request($url);\\n    }\\n}\\n```\\n\\n## Liskov Substitution Principle 里氏替換原則\\n\\n### 定義\\n","tocContent":""}')},4780:function(n){"use strict";n.exports=JSON.parse('{"name":"TCP 連線溝通方式.md","content":"# TCP 連線溝通方式\\n\\nTCP 會在兩個端點間建立一個連線來確保雙方的溝通順暢，就像是一條電話專線一樣，在這個連線之中，會在來源與目的各指定一個 port (連接埠)，作為確認這個連線的編號。\\n由於 TCP 是基於 IP 的上面一層，TCP 的連線都在同一個 IP address 下，可以理解為都與同一台設備進行連線。但兩個設備間的連線可能不只一個，就會需要編號來分開不同連線。用 port 來命名編號，就像是在同一個地區(同一個 IP address)有不同的港口。\\n\\nTCP 通訊過程可以分為三個階段。且必須正確建立連接在一個很多步驟的交握處理(handshake process)然後才進入建立連接(connection establishment)，再進入資料傳輸(data transfer)階段。資料傳輸完成，最後連接終止(connection termination)建立的虛擬通道關閉並釋放所有分配的資源。\\n\\n一個 TCP 連接是由 OS 管理，TCP 連接基本上經歷底下這些變化：\\n\\n1. listen: 如果是服務程式的話，指的是等待連接請求從任何遠端的客戶端。\\n2. syn-sent: 等待遠端點對點發回一個 TCP segment 並帶有 SYN 和 ACK flag。通常做這件事的為 TCP 客戶端。\\n3. syn-received: 等待遠端通道的另一端發回一個確認後，發回確認連接到遠端節點。通做這件事的為 TCP 服務端。\\n4. established: port 準備好接收/發送數據到遠端節點。\\n5. fin-wait-1\\n6. fin-wait-2\\n7. close-watt\\n8. closing\\n9. last-ack\\n10. time-wait: 指等待足後的時間，以確保通過遠端對等機器收到確認其連接終止請求。根據 RFC 793 中的連接，最大等待時間為四分鐘。\\n11. closed\\n","tocContent":""}')},2416:function(n){"use strict";n.exports=JSON.parse('{"name":"Ubuntu 學習筆記.md","content":"# ubuntu 學習筆記\\n\\n>\\n\\n## ubuntu 檔案結構\\n\\n- `/bin` 存放 linux / ubuntu 系統啟動和運行時會使用到的執行檔\\n- `/boot` linux 核心和 RAM disk Image 存放的地方，同時為啟動選單設定檔存放的地方\\n- `/dev` 所有 linux 核心有認識的設備和裝置的資訊都存放在此資料夾\\n- `/etc` 所有影響到系統運作的設定檔\\n- `/home` 系統上所有使用者的家目錄都會放在此資料夾下的資料夾\\n- `/lib` 此資料夾存放 linux / ubuntu 系統會用到的程式庫及核心模組\\n- `/lost+found` 若 ubuntu 的檔案系統掛掉了，系統回復後，會將所有無法正確回復的資料放進此資料夾中\\n- `/media` 作為隨身碟或 CD 之類的可移除裝置的掛載點\\n- `/mnt` 早期 linux 版本所使用的可移除裝置的掛載點，在 ubuntu 上用來專門做掛載暫時性的檔案系統用\\n- `/opt` 無法透過套件安裝的軟體，會將程式安裝在此資料夾\\n- `/proc` 此為一個虛擬的檔案系統，裡面放的是系統正在運行的程序，linux 核心透過此資料夾內的檔案來傳送訊息給執行中的程序\\n- `/root` 此為 root 帳號的家目錄\\n- `/sbin` 此資料夾內的檔案大多是超級使用者或 root 可以使用的管理用指令程式\\n- `/tmp` 系統、軟體和程式用來存放暫時性資料的地方\\n- `/usr/bin` 無論是 ubuntu 預載的或是使用者自己安裝的程式或軟體，都會被安裝到此資料夾\\n- `/usr/lib` 此資料夾文存放 /usr/bin 的程式會用到的程式庫\\n- `/usr/local` 通常透過自己編譯案安裝的程式會被放到此資料夾之下\\n- `/usr/share` 此資料夾用來存放 /usr/bin 的程式的共用資料\\n- `/usr/share/doc` 所有軟體的說明文件會放在這邊\\n- `/var` 用來存放系統上的動態資料，像是網站、log 和郵件類型的資料\\n- `/selinux` 此資料夾用來存放 SELinux 套件，預設並沒有安裝，因此為空\\n- `/srv` 為相容 FHS 標準，因此會需要將架網站或 FTP server 等網路服務改放到此資料夾\\n- `/sys` 此資料夾和 /proc 一樣為虛擬的檔案系統，用途為提供目前系統的各項資訊\\n\\n## 權限\\n\\n> [參考資料](https://shian420.pixnet.net/blog/post/344938711-%5Blinux%5D-chmod-****%E6%AA%94%E6%A1%88%E6%AC%8A%E9%99%90%E5%A4%A7%E7%B5%B1%E6%95%B4!)\\n\\n### 概述\\n\\nLinux 為多用戶系統，可同時間讓與多用戶使用。\\n\\n每個文件和目錄都分配了三種類型的身分\\n\\n- `owner` 創建檔案的人\\n- `group` 一個 group 可以有很多 user，如果這個 group 的權限為讀跟寫，那此 group 中的 user 都可以讀跟寫\\n- `others` 所有人\\n\\n與三種權限\\n\\n- `r` 可以開啟和讀取檔案。若為資料夾，則可以查看目錄下的內容，但無法修改(重新命名、移動、剪下、刪除)\\n- `w` 可以新增、刪除、修改檔案。若檔案有 write 的權限，但資料夾沒有，則只能修改檔案內容，無法更改資料夾結構(修改檔名，移動檔案、刪除檔案)\\n- `x` 執行程式碼的權限。windows 系統中，只要副檔名為 `.exe` 就可以執行，但在 linux 中需要有 execute permission。read 和 write 權限僅能修改程式碼\\n- `-` 無權限\\n\\n```bash\\nroot@rexlitemqtt://home/rexlite_public# ll\\ntotal 80\\ndrwxr-xr-x 6 rexlite_public rexlite_public  4096 Aug 30 05:34 ./\\ndrwxr-xr-x 4 root           root            4096 Dec 16  2020 ../\\n-rw------- 1 rexlite_public rexlite_public 14451 Sep  2 01:38 .bash_history\\n-rw-r--r-- 1 rexlite_public rexlite_public   220 Feb 25  2020 .bash_logout\\n-rw-r--r-- 1 rexlite_public rexlite_public  3771 Feb 25  2020 .bashrc\\ndrwx------ 3 rexlite_public rexlite_public  4096 Apr 12  2021 .cache/\\ndrwxrwxr-x 3 rexlite_public rexlite_public  4096 Apr 12  2021 .config/\\ndrwxrwxr-x 3 rexlite_public rexlite_public  4096 Apr 12  2021 .local/\\n-rw------- 1 rexlite_public rexlite_public   102 Dec 16  2020 .mysql_history\\n-rw-r--r-- 1 rexlite_public rexlite_public   807 Feb 25  2020 .profile\\ndrwx------ 2 rexlite_public rexlite_public  4096 Sep  2 01:10 .ssh/\\n-rw------- 1 rexlite_public rexlite_public  3994 Aug 29 06:15 .viminfo\\n-rw-rw-r-- 1 rexlite_public rexlite_public   584 May 19 10:15 README.md\\n-rw-rw-r-- 1 rexlite_public rexlite_public  6774 Dec 16  2021 max-system.fishbonetw.com.zip\\n-rw-rw-r-- 1 rexlite_public rexlite_public  4275 Jul 26  2021 max-system.japhne.com-bluehost.zip\\n-rw-r--r-- 1 root           root               0 Dec 16  2020 var_log.json\\n```\\n\\n第一個字元， `d` 代表 directory，`-` 代表 file\\n\\n接下來為三個字元一組，分別代表 `user(owner)`、`group`、`other` 及其擁有的權限\\n\\n- 各權限的分數\\n\\n  | 字元 | 分數 |\\n  | :--: | :--: |\\n  |  r   |  4   |\\n  |  w   |  2   |\\n  |  x   |  1   |\\n  |  -   |  0   |\\n\\n  分數是累加的，例如 `-rwxrwx---`\\n\\n  |  字元  | 權限 |  分數   |\\n  | :----: | :--: | :-----: |\\n  | owner  | rwx  | 4+2+1=7 |\\n  | group  | rwx  | 4+2+1=7 |\\n  | others | ---  | 0+0+0=0 |\\n\\n  所以該檔的權限數字為 770\\n\\n第一個帳號為擁有者，第二個群組\\n\\n### 指令\\n\\n#### `chown` 更改檔案所有權給其他使用者\\n\\n- `-R` 針對檔案或是目錄下檔案做遞歸處理(整個目錄下每一個檔案不遺漏處理)\\n\\n- 將 home 底下 video 目錄所有者，改為 user\\n\\n  ```bash\\n  chown user /home/video\\n  ```\\n\\n- 將 home 底下 video 目錄的所有者，改成 user，擁有群組改為 video\\n\\n  ```bash\\n  chown user:video /home/video\\n  ```\\n\\n- 將 home 底下 video 目錄與目錄裡面所有檔案，擁有者改為 user\\n\\n  ```bash\\n  chown -R user /home/video\\n  ```\\n\\n#### `chmod` 更改檔案權限\\n\\n- 用數字類型改變檔案權限\\n\\n  ```bash\\n  chmod -R xyz < filename | directory >\\n  ```\\n\\n  - 若要將.bashrc 這個檔案所有權限都設為啟用\\n\\n    ```bash\\n    chmod 777 .bashrc\\n    ```\\n\\n  - 若要將檔案權限，改為可執行檔，且不開放修改。  \\n    則權限為 `-rwxr-xr-x` ，其分數為 755。\\n\\n  - 若要檔案不希望其他人看到。  \\n    其權限為 `-rwxr-----`，分數為 740。\\n\\n- 符號類型改變檔案權限\\n\\n  - `+` 加入\\n  - `-` 除去\\n  - `=` 設定\\n\\n  ```bash\\n  chmod [ u | g | o | a ] [ + | - | = ] [ r | w | x ] < filename | directory >\\n  ```\\n\\n  - 若要將 `.bashrc` 權限設為 `-rwxr-xr-x`\\n\\n    - `user` 可讀、可寫、可執行\\n    - `group` | `others` 可讀、可執行\\n\\n    ```bash\\n    chmod u=rwx, go=rx .bashrc\\n    ```\\n\\n  - 若權限為 `-rwxr-xr--`\\n\\n    ```bash\\n    chmod u=rwx, g=rx, o=r < filename >\\n    ```\\n\\n  - 若不知道此檔案的權限，但想要將此檔案設定為全部人都可以寫入  \\n    `chmod a+w < filename >`\\n  - 若要將權限去除，而不更動其他已存在的權限  \\n    `chmod a-x < filename >`\\n\\n## 安裝 php\\n\\n```bash\\napt install -y php7.4 php7.4-cli php7.4-fpm php7.4-mbstring php7.4-xml php7.4-bcmath php7.4-curl php7.4-gd php7.4-mysql php7.4-opcache php7.4-zip php7.4-sqlite3\\n```\\n\\n- 查看是否安裝成功\\n\\n  ```bash\\n  php -v\\n  ```\\n\\n- 安裝最新版 php\\n\\n由於通常 ubuntu 的套件資訊不會包含最新版本的 php，若需要最新版本，需添加第三方的套件資訊\\n\\n```bash\\napt install -y software-properties-common\\n```\\n\\n將第三方套件資訊加入 ubuntu 套件資訊庫\\n\\n```bash\\nadd-apt-repository -y ppa:ondrej/php\\n```\\n\\n更新套件資訊\\n\\n```bash\\napt-get update\\n```\\n\\n更新後即可安裝最新的 php\\n\\n## 安裝 MySQL\\n\\n### 更新軟體庫\\n\\n```zsh\\napt update\\n```\\n\\n### 升級軟體庫\\n\\n```zsh\\napt upgrade\\n```\\n\\n### 安裝指令\\n\\n```zsh\\napt install mysql-server -y\\n```\\n\\n### 查看 MySQL 版本\\n\\n```zsh\\nmysql --version\\n# output\\nmysql  Ver 8.0.31-0ubuntu0.22.04.1 for Linux on x86_64 ((Ubuntu))\\n```\\n\\n### 設定 root 密碼\\n\\n```zsh\\nroot@DESKTOP-O8SANAT ~ sudo service mysql start\\n\\nroot@DESKTOP-O8SANAT ~ sudo mysql\\n\\nmysql>  ALTER USER \'root\'@\'localhost\' IDENTIFIED WITH mysql_native_password BY \'SetRootPasswordHere\';\\nQuery OK, 0 rows affected (0.01 sec)\\n\\nmysql> exit\\nBye\\n\\nroot@DESKTOP-O8SANAT ~ sudo mysql_secure_installation\\nEnter password for user root:\\n# 輸入：SetRootPasswordHere\\n```\\n\\n- [設定 root 帳號與初始權限](https://www.albert-yu.com/blog/mysql%E8%A8%AD%E5%AE%9Aroot%E5%B8%B3%E8%99%9F%E5%AF%86%E7%A2%BC%E8%88%87%E5%88%9D%E5%A7%8B%E6%AC%8A%E9%99%90ubuntu-20-04/)\\n\\n### 移除 MySQL\\n\\n- 移除 MySQL\\n\\n```bash\\napt-get purge --auto-remove mysql-common mysql-server mariadb-server\\napt-get autoremove\\napt-get autoclean\\n```\\n\\n- 刪除 mysql 使用者\\n\\n```bash\\nkillall -9 mysql (或 killall -9 mysqld) userdel mysql\\n```\\n\\n- 刪除設定檔\\n\\n```bash\\nrm -rf /etc/mysql rm -rf /var/lib/mysql\\n```\\n\\n## nginx\\n\\n### service nginx restart 執行出現 fail\\n\\n[參考資料](https://weijutu.github.io/2019/03/12/web/ubuntu-nginx-restart-fail/)\\n\\n### 完全移除 nginx\\n\\n- 停止 nginx 服務\\n\\n```bash\\nsudo service nginx stop\\n```\\n\\n- 刪除 nginx 及設定文件\\n\\n```bash\\nsudo apt-get purge nginx\\n```\\n\\n- 自動刪除不使用的軟體包\\n\\n```bash\\nsudo apt-get autoremove\\n```\\n\\n- 列出與 nginx 相關的軟體，並刪除\\n\\n```bash\\ndpkg --get-selections | grep nginx\\n\\nsudo apt-get purge nginx\\nsudo apt-get purge nginx-common\\nsudo apt-get purge nginx-full\\n```\\n\\n- 確認 nginx 是否完全刪除\\n\\n```bash\\nwhich nginx\\n```\\n\\n## 找不到 sudo\\n\\n- 先檢查 `/etc/sudoers.d` 檔案是否在，若無則下安裝命令\\n\\n```bash\\napt-get install sudo\\n```\\n\\n- 若系統中已經存在 `/etc/sudoers.d` 檔案，表示系統已經安裝 sudo 但尚未設定環境。\\n  - 用文件編輯器 (vim) 開啟 `/etc/sudoers.d`，找到 `secure_path` 添加路徑\\n\\n```bash\\nDefaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin\\n```\\n\\n## 安裝 composer\\n\\n> 安裝前須先安裝 PHP Command-Line Interface（PHP-CLI)\\n\\n### 更新系統的套件資訊\\n\\n```bash\\nsudo apt-get update && sudo apt-get upgrade -y\\n```\\n\\n### 下載 composer 並將其設定為全域可執行的指令\\n\\n- 從官網下載 composer 安裝檔至 tmp 資料夾\\n\\n  ```bash\\n  php -r \\"copy(\'https://getcomposer.org/installer\', \'/tmp/composer-setup.php\')\\"\\n  ```\\n\\n- 驗證下載的安裝檔\\n\\n  使用 composer 官方提供的 SHA-384 簽章來驗證安裝檔 [Composer Public Keys / Checksums](https://composer.github.io/pubkeys.html)\\n\\n  輸入驗證的簽章\\n\\n  ```bash\\n  php -r \\"if (hash_file(\'SHA384\', \'/tmp/composer-setup.php\') === \'55ce33d7678c5a611085589f1f3ddf8b3c52d662cd01d4ba75c0ee0459970c2200a51f492d557530c71c15d8dba01eae\') { echo \'Installer verified\'; } else { echo \'Installer corrupt\'; unlink(\'/tmp/composer-setup.php\'); } echo PHP_EOL;\\"\\n  ```\\n\\n- 安裝 composer\\n  為了要讓 composer 在全域中使用，所以要將 composer 安裝到 `usr/local/bin` 的資料夾中，以及將 `Composer` 重新命名為 `composer`。\\n\\n  ```bash\\n  sudo php /tmp/composer-setup.php --install-dir=/usr/local/bin --filename=composer\\n  ```\\n\\n- 查看 composer 版本\\n\\n  ```bash\\n  composer -V\\n  ```\\n\\n- 刪除 composer 的安裝檔\\n\\n  ```bash\\n  rm /tmp/composer-setup.php\\n  ```\\n\\n## 安裝 Git\\n\\n```bash\\nsudo apt-get install git\\n```\\n\\n## 安裝 Docker\\n\\n```bash\\nsudo apt install docker.io\\n```\\n\\n確認安裝\\n\\n```bash\\ndocker --version\\n```\\n\\n啟動 docker\\n\\n```bash\\nsudo systemctl start docker\\n\\n# 啟動時運行\\nsudo systemctl enable docker\\n```\\n\\n## logrotate 記錄檔管理工具\\n\\n### 安裝\\n\\n一般而言 linux 發行版都會安裝好 logrotate\\n\\n```bash\\n# 安裝 logrotate（Ubuntu/Debian）\\nsudo apt install logrotate\\n\\n# 安裝 logrotate（RHEL/CentOS）\\nsudo yum install logrotate\\n```\\n\\n### 設定檔\\n\\nlogrotate 設定檔位於 `/etc/logrotate.conf`，裡面會包含一些預設的設定值，例如紀錄檔的輪替頻率，保留數量等等\\n\\n```bash\\n# 每週進行一次記錄檔輪替\\nweekly\\n\\n# 記錄檔擁有者與群組為 root 與 syslog\\nsu root syslog\\n\\n# 保留 4 次輪替的記錄檔\\nrotate 4\\n\\n# 輪替之後，自動建立新的記錄檔\\ncreate\\n\\n# 壓縮輪替後的記錄檔\\ncompress\\n\\n# 套用一般套件的記錄檔設定\\ninclude /etc/logrotate.d\\n\\n# ...\\n```\\n\\n個別套件或服務的紀錄檔設定會放在`/etc/logrotate.d` 目錄中，透過這裡的 `include` 來套用個別套件的紀錄檔設定。\\n\\n```bash\\n# nginx 記錄檔輪替設定\\n/var/log/nginx/*.log { # 記錄檔位置\\n    daily                # 每日輪替一次\\n    missingok            # 忽略記錄檔不存在問題\\n    rotate 14            # 保留 14 次輪替的記錄檔\\n    compress             # 壓縮輪替後的記錄檔\\n    delaycompress        # 延遲壓縮記錄檔\\n    notifempty           # 不輪替空的記錄檔\\n    create 0640 www-data adm # 記錄檔擁有者/群組為 www-data/adm，權限為 0640\\n    sharedscripts        # 所有記錄檔輪替，只執行一次 prerotate 與 postrotate 指令稿\\n    prerotate            # 輪替前指令稿\\n        if [ -d /etc/logrotate.d/httpd-prerotate ]; then \\\\\\n            run-parts /etc/logrotate.d/httpd-prerotate; \\\\\\n        fi \\\\\\n    endscript\\n    postrotate           # 輪替後指令稿\\n        invoke-rc.d nginx rotate >/dev/null 2>&1\\n    endscript\\n}\\n```\\n\\n若在個別服務設定中沒有指定的話，就會套用 `/etc/logrotate.conf` 中預設的設定。\\n\\n### 基本設定\\n\\n| 指令           | 說明                                |\\n| -------------- | ----------------------------------- |\\n| su root syslog | 紀錄檔擁有者與群組為 root 與 syslog |\\n| missingok      | 忽略紀錄檔不存在的問題              |\\n| notifempty     | 不輪替空檔案                        |\\n| ifempty        | 輪替空檔案                          |\\n| rotate 7       | 保留七次輪替紀錄                    |\\n\\n### 紀錄檔輪替頻率設定\\n\\n| 指令      | 說明            |\\n| --------- | --------------- |\\n| daily     | 每日輪替        |\\n| weekly    | 每週輪替        |\\n| monthly   | 每月輪替        |\\n| yearly    | 每年輪替        |\\n| size 100k | 當檔案超過 100K |\\n| size 2m   | 當檔案超過 2M   |\\n| size 1G   | 當檔案超過 1G   |\\n\\n進階設定\\n\\n| 指令         | 說明                                                            |\\n| ------------ | --------------------------------------------------------------- |\\n| minage 3     | 三天以內建立的檔案不輪替                                        |\\n| maxage 30    | 不保留三十天以前的紀錄檔                                        |\\n| maxsize 100k | 搭配 daily 等間隔條件使用，檔案超過 100k 或達到間隔條件時輪替   |\\n| minsize 100k | 搭配 daily 等間隔條件使用，檔案超過 100k 同時達到間隔條件時輪替 |\\n\\n### 紀錄檔壓縮\\n\\n| 指令            | 說明                 |\\n| --------------- | -------------------- |\\n| compress        | 壓縮輪替後的舊紀錄檔 |\\n| nocompress      | 不壓縮輪替後的檔案   |\\n| delaycompress   | 延遲壓縮紀錄檔       |\\n| nodelaycompress | 不延遲壓縮紀錄檔     |\\n\\n### 測試 logrotate 設定\\n\\n修改完設定後，可以用以下指令測試設定檔是否正確\\n\\n```bash\\n# 測試 logrotate 設定\\nsudo logrotate -d /etc/logrotate.conf\\n```\\n\\n如果沒出現錯誤訊息，就完成了\\n\\nlogrotate 是透過 cron 來觸發的，通常是寫在 /etc/cron.daily/logrotate 中，所以更改 logrotate 設定檔之後，只要確認設定無誤，就會自動生效，不需要重新載入設定檔的動作。\\n\\n## 安全性設定\\n\\n> 參考資料\\n>\\n> [Ubuntu VPS 第一步：安全性設定](https://blog.jsy.tw/2124/ubuntu-vps-security-settings/)\\n>\\n> 目前只能透過 GCP 的瀏覽器 ssh 指定 2022 port 連線到虛擬機\\n\\n### 登入伺服器建立自訂帳號\\n\\n為了避免駭客直接用 root 連線進來，應該要限制 root 使用 ssh。\\n\\n首先使用 root 建立一個新的帳號\\n\\n1. 用 ssh 登入 root 帳號\\n\\n   ```bash\\n    ssh root@<server-ip>\\n   ```\\n\\n2. 修改 root 密碼\\n\\n   ```bash\\n    passwd\\n   ```\\n\\n3. 新增帳號\\n\\n   ```bash\\n    adduser <new-account>\\n   ```\\n\\n4. 允許此帳號使用 sudo 權限\\n\\n   ```bash\\n    usermod -aG sudo <new-account>\\n   ```\\n\\n### 開啟安全性更新\\n\\n一般若開啟自動更新，容易增加網站運作上的不穩定，所以有些人會選擇關閉。但這邊會開啟最基本的安全更新。\\n\\n1. 更新 ubuntu\\n\\n   ```bash\\n    apt update\\n    apt dist-upgrade\\n   ```\\n\\n2. 更新完成後，重新啟動 ubuntu\\n\\n   ```bash\\n    reboot\\n   ```\\n\\n3. 開啟 ubuntu 的 unattended-upgrades 設定檔\\n\\n   ```bash\\n    sudo vim /etc/apt/apt.conf.d/50unattended-upgrades\\n   ```\\n\\n4. 將安全性更新以外的全部註解\\n\\n   ```txt\\n   Unattended-Upgrade::Allowed-Origins {\\n   //      \\"${distro_id}:${distro_codename}\\";  // 發行版的預設軟體源\\n        \\"${distro_id}:${distro_codename}-security\\";  // 安全性更新\\n        \\"${distro_id}ESM:${distro_codename}\\";  // 針對過期的 LTS 版提供的付費延展安全性更新\\n   //      \\"${distro_id}:${distro_codename}-updates\\"; // 官方建議的軟體更新（功能更新、Bug 修復等）\\n   //      \\"${distro_id}:${distro_codename}-proposed\\";  // 尚未官方建議的軟體更新\\n   //      \\"${distro_id}:${distro_codename}-backports\\";  // 針對舊版 Ubuntu 提供的新軟體更新\\n   };\\n   ```\\n\\n5. 開啟 ubuntu 的 auto-upgrades\\n\\n   ```bash\\n    vim /etc/apt/apt.conf.d/20auto-upgrades\\n   ```\\n\\n6. 修改指令\\n\\n   ```bash\\n   // 指定自動更新套件庫清單 (apt update) 的週期，單位是天。\\n   APT::Periodic::Update-Package-Lists \\"1\\";\\n   // 指定自動把可更新的套件下載下來 (apt upgrade -d) 的週期，單位是天。\\n   APT::Periodic::Download-Upgradeable-Packages \\"1\\";\\n   // 指定自動把目前已經不可下載，但是先前已經被下載下來的套件清除 (apt autoclean) 的週期，單位是天。\\n   APT::Periodic::AutocleanInterval \\"7\\";\\n   // 與套件「unattended-upgrades」互相搭配使用。可以指定要自動下載並安裝套件 (類似 apt upgrade) 的週期，單位是天。\\n   APT::Periodic::Unattended-Upgrade \\"1\\";\\n   ```\\n\\n### 修改 ssh port\\n\\n修改 SSH 預設的 22 port。\\n\\n1. 列出哪一些 port 是可以使用的\\n\\n   ```bash\\n    ss -tulpn | grep LISTEN\\n   ```\\n\\n2. 開啟 ssh 設定檔\\n\\n   ```bash\\n    vim /etc/ssh/sshd_config\\n   ```\\n\\n3. 找到以 Port 開頭的那一行，並更改成你想要的 port\\n\\n   ```text\\n   Port <ur-new-port>\\n   ```\\n\\n4. 在檔案任一處加入下方指令，以限制 SSH 永遠使用 Protocol 2。這會使 SSH 連線更加安全\\n\\n   ```text\\n   protocol 2\\n   ```\\n\\n5. 重新啟動 ssh\\n\\n   ```bash\\n    sudo systemctl restart ssh\\n   ```\\n\\n### 關閉 root 的 SSH 權限，允許 SSH 登入帳號\\n\\n1. 測試要允許登入的帳號是否具有 sudo 的權限\\n\\n   ```bash\\n    sudo -v\\n   ```\\n\\n2. 開啟 ssh 設定檔\\n\\n   ```bash\\n    sudo vim /etc/ssh/sshd_config\\n   ```\\n\\n3. 關閉 root 登入並新增登入的帳號\\n\\n   ```text\\n   PermitRootLogin no\\n   AllowUsers <your_user_account>\\n   ```\\n\\n4. 重新啟動 ssh\\n\\n### 設定 SSH 免密碼登入\\n\\n使用 ssh key 機制來達成免密碼登入，利用演算法建構出複雜的公私鑰(題目與密碼)，將公鑰放在伺服器上，每次登入時系統自動將本地端的私鑰去對應伺服器上面的公鑰，來確認是否為本人以達成免本人輸入密碼的登入。\\n\\n除了方便以外，極為複雜且加密過的鑰匙，也可以讓被暴力破解的機會降低。\\n\\n### 關閉 SSH 密碼登入功能\\n\\n為了降低 ssh 的連線風險，接著要進一步將 SSH 密碼登入功能關閉。\\n\\n1. 開啟 SSH 設定檔\\n\\n   ```bash\\n    sudo vim /etc/ssh/sshd_config\\n   ```\\n\\n2. 將 `PasswordAuthentication` 的數值改為 `no`\\n3. 重新啟動 ssh\\n\\n## 常用指令\\n\\n### `&` 背景執行程式\\n\\n- 在執行程式後面加上 `&` 使程式可以在背景執行\\n\\n```bash\\nphp subscribe_with_auth.php &\\n```\\n\\n### `jobs` 檢視任務\\n\\n```bash\\njobs -l\\n[1]+ 1040421 Running php subscribe_with_auth.php &\\n```\\n\\n### `fg` 將任務切換至前景執行，`bg` 將任務切換至背景執行\\n\\n```bash\\njobs -l\\n[1]+ 1040421 Running php subscribe_with_auth.php &\\n```\\n\\n### `disown` 卸除目前預設的背景行程\\n\\n- `disown -a` 卸除所有工作，無論其狀態是否在執行中或是暫停\\n- `disown -ar` 僅卸除所有執行中的工作\\n- `disown -h` 不要卸除工作，只是單純讓程式可以在登出後繼續執行。\\n\\n```bash\\njobs -l\\n[1]+ 1040421 Running php subscribe_with_auth.php &\\n```\\n\\n### `ps aux | less` 顯示所有正在執行中的進程\\n\\n### `kill 10000` 刪除執行中的進程，`kill` 加上 PID 的數字即可\\n\\n```bash\\nUSER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\\nroot           1  0.0  0.3 173272 12812 ?        Ss    2022  85:07 /lib/systemd/systemd --system --deserialize 23\\nroot           2  0.0  0.0      0     0 ?        S     2022   0:06 [kthreadd]\\nroot           3  0.0  0.0      0     0 ?        I<    2022   0:00 [rcu_gp]\\nroot           4  0.0  0.0      0     0 ?        I<    2022   0:00 [rcu_par_gp]\\nroot           5  0.0  0.0      0     0 ?        I<    2022   0:00 [netns]\\nroot           7  0.0  0.0      0     0 ?        I<    2022   0:00 [kworker/0:0H-events_highpri]\\nroot           9  0.0  0.0      0     0 ?        I<    2022   2:45 [kworker/0:1H-events_highpri]\\n```\\n\\n### `nohup` 讓程式可以在離線或是登出系統後繼續執行\\n\\n當 Linux 使用者登出系統後正在執行的程式會接收到 SIGHUP(hangup) 信號，收到信號的程式會立刻停止執行。\\n\\n```bash\\nnohup /path/my_program &\\n```\\n","tocContent":"- [ubuntu 學習筆記](#ubuntu-學習筆記)\\n  - [ubuntu 檔案結構](#ubuntu-檔案結構)\\n  - [權限](#權限)\\n    - [概述](#概述)\\n    - [指令](#指令)\\n      - [`chown` 更改檔案所有權給其他使用者](#chown-更改檔案所有權給其他使用者)\\n      - [`chmod` 更改檔案權限](#chmod-更改檔案權限)\\n  - [安裝 php](#安裝-php)\\n  - [安裝 MySQL](#安裝-mysql)\\n    - [更新軟體庫](#更新軟體庫)\\n    - [升級軟體庫](#升級軟體庫)\\n    - [安裝指令](#安裝指令)\\n    - [查看 MySQL 版本](#查看-mysql-版本)\\n    - [設定 root 密碼](#設定-root-密碼)\\n    - [移除 MySQL](#移除-mysql)\\n  - [nginx](#nginx)\\n    - [service nginx restart 執行出現 fail](#service-nginx-restart-執行出現-fail)\\n    - [完全移除 nginx](#完全移除-nginx)\\n  - [找不到 sudo](#找不到-sudo)\\n  - [安裝 composer](#安裝-composer)\\n    - [更新系統的套件資訊](#更新系統的套件資訊)\\n    - [下載 composer 並將其設定為全域可執行的指令](#下載-composer-並將其設定為全域可執行的指令)\\n  - [安裝 Git](#安裝-git)\\n  - [安裝 Docker](#安裝-docker)\\n  - [logrotate 記錄檔管理工具](#logrotate-記錄檔管理工具)\\n    - [安裝](#安裝)\\n    - [設定檔](#設定檔)\\n    - [基本設定](#基本設定)\\n    - [紀錄檔輪替頻率設定](#紀錄檔輪替頻率設定)\\n    - [紀錄檔壓縮](#紀錄檔壓縮)\\n    - [測試 logrotate 設定](#測試-logrotate-設定)\\n  - [安全性設定](#安全性設定)\\n    - [登入伺服器建立自訂帳號](#登入伺服器建立自訂帳號)\\n    - [開啟安全性更新](#開啟安全性更新)\\n    - [修改 ssh port](#修改-ssh-port)\\n    - [關閉 root 的 SSH 權限，允許 SSH 登入帳號](#關閉-root-的-ssh-權限允許-ssh-登入帳號)\\n    - [設定 SSH 免密碼登入](#設定-ssh-免密碼登入)\\n    - [關閉 SSH 密碼登入功能](#關閉-ssh-密碼登入功能)\\n  - [常用指令](#常用指令)\\n    - [`&` 背景執行程式](#-背景執行程式)\\n    - [`jobs` 檢視任務](#jobs-檢視任務)\\n    - [`fg` 將任務切換至前景執行，`bg` 將任務切換至背景執行](#fg-將任務切換至前景執行bg-將任務切換至背景執行)\\n    - [`disown` 卸除目前預設的背景行程](#disown-卸除目前預設的背景行程)\\n    - [`ps aux | less` 顯示所有正在執行中的進程](#ps-aux--less-顯示所有正在執行中的進程)\\n    - [`kill 10000` 刪除執行中的進程，`kill` 加上 PID 的數字即可](#kill-10000-刪除執行中的進程kill-加上-pid-的數字即可)\\n    - [`nohup` 讓程式可以在離線或是登出系統後繼續執行](#nohup-讓程式可以在離線或是登出系統後繼續執行)"}')},3138:function(n){"use strict";n.exports=JSON.parse('{"name":"Visual Studio Code環境設置.md","content":"# Visual Studio Code 環境設置\\n\\n>\\n\\n## 擴充套件\\n\\n### 中文化\\n\\n- Chinese (Traditional) Language Pack for Visual Studio Code\\n\\n### 美化 code\\n\\n- Bracket Pair Colorizer\\n- Auto Rename Tag\\n- Prettier - Code formatter\\n\\n### html, css\\n\\n- Live server：它會幫使用者自動開啟一個服務器，保存的時候便自動刷新瀏覽器頁面\\n  設定預設開啟的瀏覽器：齒輪符號 > 進行延伸模組設定 > Live Server Settings: Custom Browser\\n- open in browser\\n- IntelliSense for CSS class names in HTML\\n\\n### VUE\\n\\n- [參考資料](https://ithelp.ithome.com.tw/articles/10237074)\\n\\n### PHP Laravel\\n\\n- PHP IntelliSense (felixfbecker.php-intellisense)\\n- PHP Server (brapifra.phpserver)\\n- php cs fixer\\n- PHP DocBlocker\\n- PHP Getters & Setters\\n- PHP import checker\\n- PHP Namespace Reaolver\\n- phpcs fixer\\n- PHP Extension Pack\\n- Laravel Blade Snippets (onecentlin.laravel-blade)\\n- Laravel Blade formatter\\n- Laravel Blade Wrapper\\n- Laravel Create View\\n- laravel Extension Pack\\n- Laravel Extra Intellisese\\n- Laravel Goto Controller\\n- Laravel goto view\\n- laravel-goto-components\\n\\n### Markdown\\n\\n- markdownlint\\n- Markdown All in One\\n- Markdown Preview Github Styling\\n- Markdown TOC\\n  markdown 自動生成目錄，作者：CharlesWan\\n\\n### Git\\n\\n- GitLens — Git supercharged\\n- Git Graph\\n- GitHub Theme\\n- gitignore\\n- Git Extension Pack\\n- GitHub Repositories\\n- Open in GitHub, Bitbucket, Gitlab, VisualStudio\\n- Remote Repositories\\n\\n### 小工具\\n\\n- Draw.io Integration(繪製表格、流程圖)\\n- GitHub Copilot github 訓練的 AI 程式碼撰寫工具\\n\\n## 調整設定\\n\\n- 檔案 → 喜好設定 → 設定 → 文字編輯器 → 字型 → Font Size\\n- 檔案 → 喜好設定 → 設定 → 工作台 → 外觀 → Tree:Indent\\n- 檔案 → 喜好設定 → 設定 → 延伸模組\\n\\n## 快速鍵\\n\\n- 開啟終端機 Command + `\\n- 註解行 `Command + /`\\n- 選取一段字詞 `Command + D`\\n- 開啟搜尋 `Command + F`\\n- 儲存 `Command + S`\\n- 回上一步 `Command + Z`\\n- 移動當前行向上向下 `option + ↑ / ↓`\\n- 複製當前行向上向下 `shift + option + ↑ / ↓`\\n- 觸發建議 `control + space`\\n- 參數建議 `shift + option + space`\\n- 格式化 `shift + option + space`\\n","tocContent":"- [Visual Studio Code 環境設置](#visual-studio-code-環境設置)\\n  - [擴充套件](#擴充套件)\\n    - [中文化](#中文化)\\n    - [美化 code](#美化-code)\\n    - [html, css](#html-css)\\n    - [VUE](#vue)\\n    - [PHP Laravel](#php-laravel)\\n    - [Markdown](#markdown)\\n    - [Git](#git)\\n    - [小工具](#小工具)\\n  - [調整設定](#調整設定)\\n  - [快速鍵](#快速鍵)"}')},2590:function(n){"use strict";n.exports=JSON.parse('{"name":"Vue Router 學習筆記.md","content":"# Vue Router\\n\\n> 過去大多以靜態網頁為主，所有資料都是從伺服器輸出，隨著時間與技術推進，前端在網頁的領域越來越吃重，漸漸的原本由後端伺服器控制路由改為前端接手\\n>\\n> 參考資料：\\n>\\n> [重新認識 Vue.js 4-1 Vue Router 與前後端路由](https://book.vue.tw/CH4/4-1-vue-router-intro.html)\\n\\n## 由前端接手的路由\\n\\n以 laravel 為例，首先要將所有的入口都指向同一個頁面，在由此頁面渲染 Vue.js\\n\\n```php\\n// routes/web.php\\nRoute::get(\'/{any}\', \'SinglePageController@index\')->where(\'any\', \'.*\');\\n```\\n\\n接著在 SinglePageController 將 index 指向 app:\\n\\n```php\\n// app/Http/controllers/SinglePageController.php\\nclass SinglePageController extend Controller\\n{\\n  public function index() {\\n    return view(\'app\');\\n  }\\n}\\n```\\n\\n最後在 /resource/views/app.blade.php 新增 <div id=\'app\'>...</div> 以及 <script src=\'{{ mix(\'js/app.js\') }}\'><\/script> 將 Vue.js 以及前端程式的進入點，引入到網頁上。\\n\\n```html\\n\x3c!-- \\\\\\\\ resources\\\\views\\\\app.blade.php --\x3e\\n<!DOCTYPE html>\\n<html lang=\\"en\\">\\n  <head>\\n    <meta charset=\\"UTF-8\\" />\\n    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\" />\\n    <meta http-equiv=\\"X-UA-Compatible\\" content=\\"ie=edge\\" />\\n    <title>Vue SPA Demo</title>\\n  </head>\\n  <body>\\n    <div id=\\"app\\">\\n      <app></app>\\n    </div>\\n    <script src=\\"{{ mix(\'js/app.js\') }}\\"><\/script>\\n  </body>\\n</html>\\n```\\n\\n## 基本應用\\n\\n在網頁中加入 <router-view></router-view> 當作 Route 的進入點，並使用 <router-link> 來產生對應的連結：\\n\\n```html\\n<div id=\\"app\\">\\n  <h1>Hello Vue Router App!</h1>\\n\\n  <p>\\n    \x3c!-- router-link 在經過編譯後會變成 <a> 標籤 --\x3e\\n    \x3c!-- 使用 to 屬性來處理目標 URL --\x3e\\n    <router-link to=\\"/\\">Go to Home</router-link>\\n    <router-link to=\\"/about\\">Go to About</router-link>\\n  </p>\\n\\n  \x3c!-- 渲染 route 的位置 --\x3e\\n  <router-view></router-view>\\n</div>\\n```\\n\\n在 app.js 中定義 route\\n\\n```js\\n// 定義兩個 route 元件，分別是 Home 與 About\\nconst Home = { template: \\"<div>Home</div>\\" };\\nconst About = { template: \\"<div>About</div>\\" };\\n\\n// 指定 URL 與對應的元件\\nconst routes = [\\n  { path: \\"/\\", component: Home },\\n  { path: \\"/about\\", component: About },\\n];\\n\\n// 建立 VueRouter 實體物件\\nconst router = VueRouter.createRouter({\\n  history: VueRouter.createWebHistory(),\\n  routes: routes,\\n});\\n\\n// 建立 Vue 實體元件\\nconst app = Vue.createApp({});\\n\\n// 透過 app.use(router) 使 app 的所有子元件\\n// 都能存取 this.$router 與 this.$route\\napp.use(router);\\n\\n// 掛載 Vue.js 實體至 DOM\\napp.mount(\\"#app\\");\\n```\\n\\n若使用 Vue CLI，可以新增 route.js 檔案\\n\\n```js\\n// route.js\\nimport { createRouter, createWebHistory } from \\"vue-router\\";\\nimport Home from \\"./views/Home.vue\\";\\nimport About from \\"./views/About.vue\\";\\n\\nexport const router = createRouter({\\n  history: createWebHistory(),\\n  routes: [\\n    { path: \\"/\\", component: Home },\\n    { path: \\"/about\\", component: About },\\n  ],\\n});\\n```\\n\\n接著在 main.js 透過 .use(router) 加入至 app 中：\\n\\n```js\\n// main.js\\nimport { createApp } from \\"vue\\";\\nimport App from \\"./App.vue\\";\\nimport { route } from \\"./route\\";\\n\\nconst app = createApp(App).use(route);\\napp.mount(\\"#app\\");\\n```\\n\\n## history 路由設定\\n\\nv3 以前為 mode，v4 開始改為 history。Vue Router 處理前端路由的不同方式，分別是 Hash Mode 以及 HTML5 (History API) Mode 兩種。\\n\\n### Hash 模式\\n\\n在 HTML5 的 History API 還沒出現之前，想要控制 URL 又不能換頁，只能透過 URL hash，也就是 #。此一符號在網頁中代表「錨點」的含義。# 後面接的是個網頁的某個位置。\\n\\n`https://book.vue.tw/#app`\\n\\n以上面這個網址為例，如果網頁中有某個節點的 `id=\'app\'` 像是 <div id=\'app\'></div>，那麼當這個連結被開啟時，瀏覽器就會自動把位置捲到此錨點位置。\\n\\n而在同一個頁面中，若只是改變了 # 後面的文字，不會讓整個頁面刷新，而當 URL Hash 被更新時，同時也會增加一筆記錄到瀏覽器的瀏覽歷史裡，也就是說，透過瀏覽器 `上一頁`、`下一頁`來切換不同 # 的位置，不會引發頁面重新刷新。\\n\\n於是可以透過 Ajax 搭配 hashchange 事件，去監聽 URL Hash 的狀態來決定目前顯示的內容，此為早期前端路由的解決方案。\\n\\n在 vue Router 中，只要將 hitory 設定為 createWebHashHistory() 即可開啟 Hash Mode\\n\\n```js\\nimport { createRouter, createWebHashHistory } from \'vue-router\'\\n\\nconst router = createRouter({\\n  history: createWebHashHistory(),\\n  routes: [\\n    //...\\n  ],\\n})\\n```\\n\\n而 createWebHashHistory() 預設路徑為 location.pathname 或 / 根目錄，若想額外處理則可以裡面加上路徑的字串，像是 createWebHashHistory(\'/folder/\')，對應的就是 https://example.com/folder/#\\n\\nHash Mode 的優點是無須調整後端設定，甚至 file:// 開頭的檔案協定，直接開啟網頁也可以順利運作。不過這種作法也有缺點，搜尋引擎在收錄頁面的時候，會自動忽略 URL 裡面帶有 # 符號的部分，因此不利於網站的 SEO。\\n\\n### HTML5 (history API) 模式\\n\\n","tocContent":""}')},1263:function(n){"use strict";n.exports=JSON.parse('{"name":"Vue 學習筆記.md","content":"# Vue 學習筆記\\n\\n>\\n\\n## Vue 實體的生命週期\\n\\n- `beforeCreate`: 當 Vue 實例初始化時便立即調用，此時尚未創建實例，因此所有 Vue 實體中的設定(如：data)都還未配置。\\n- `created`: 完成創建實例，此時 Vue 實體中的配置除了 \\\\$el 外，其餘已全部配置，而 \\\\$el 要在掛載模板後才會配置。\\n- `beforeMount`: 在 Vue 實體中被掛載到目標元素之前調用，此時的 \\\\$el 依然未被 Vue 實體中的定義渲染的初始設定模板。\\n- `mounted`: Vue 實體上的設置已經安裝上模板，此時 \\\\$el 是已經藉由實體中的定義渲染成真正的頁面。\\n- `beforeUpdate`: Vue 實體中的 data 產生變化後，或是執行 vm.$forceUpdate() 時調用，此時頁面尚未被重新渲染成變過的畫面。\\n- `update`: 在重新渲染頁面後調用，此時的頁面已經被重新渲染成改變後的畫面。\\n- `beforeDestroy`: 在此實體被銷毀前調用，此時實體依然擁有完整的功能。\\n- `destroyed`: 於此實體被銷毀後調用，此時實體中的任何定義(data, methods...)都已被解除綁定，在此做任何操作都會失效。\\n\\n## Vue 屬性\\n\\n### watch 監聽器\\n\\n當資料變化時調用函數，函數會有兩個傳入參數：改變前的值、改變後的後的值，可以使用這個函數做跟此資料變化有的處理。\\n\\n監聽器在 vue.js 中有兩種使用方式：\\n\\n- `$watch` 實體上的函數，使用此函數註冊監聽器。\\n- `watch` 實體上的屬性，此屬性設置的物件在實體建立時會調用 `$watch` 註冊監聽器。\\n\\n`$watch` 是註冊監聽器的函數，而 watch 是為了開發者方便在實體上設置監聽器而提供的，其實 watch 本身也是使用 $watch 註冊監聽器。\\n\\n#### $watch\\n\\n```javascript\\nunwatched = vm.$watch(expOrFn, callback, [options]);\\n```\\n\\n`$watch` 的回傳值是註銷監聽器的函數，執行此函數可使監聽器失效。\\n\\n- `exOrFn` 設定要監聽的目標，可以使用 javascript 表達式或是一個回傳監聽目標值的函數\\n- `callback` 當數值改變時，要叫用的函數，此函數會有兩個傳入參數：callback(newVal, oldVal)\\n  - `newVal` 改變後的資料值\\n  - `oldVal` 改變前的資料值\\n- `[options]` 非必要參數，監聽器的設定\\n  - `deep` 監聽物件時，物件下層屬性變化也會觸發監聽器\\n  - `immediate` 在實體初始畫設置監聽器的時候馬上叫用 callback 函數\\n\\n```html\\n<div id=\\"app\\">\\n  <button @click=\\"a++\\">+</button>\\n  <button @click=\\"a--\\">--</button>\\n  <div>a: {{a}}</div>\\n  <div>changed: {{newA}}</div>\\n  <div>before change: {{oldA}}</div>\\n</div>\\n```\\n\\n```javascript\\nvar vm = new Vue({\\n  ...\\n  data: {\\n    a: 1,\\n    newA: 0,\\n    oldA: 0\\n  }\\n});\\n\\nvm.$watch(\'a\', function(newA, oldA) {\\n  this.newA = newA;\\n  this.oldA = oldA;\\n});\\n```\\n\\n#### watch\\n\\n```javascript\\nwatch: (\\n  key: value,\\n  ...\\n)\\n```\\n\\n- 以 watch 為 key 值，下面定義的屬性都是欲監聽的資料來源。\\n- key 監聽目標名稱，可以使用 javascript 表達式\\n- value callback 函數的設定，共有 string, function, object 及 array 可以設定。\\n  - string callback 函數名稱\\n  - function callback 函數\\n  - object 設定監聽物件，設定方法如下\\n    - handler callback 函數\\n    - deep 布林值，是否監聽物件下層屬性\\n    - immediate 布林值 使否在實體初始化時立即調用 callback\\n  - array 當有多個監聽器時，使用陣列帶入多個 callback 函數\\n\\n### computed 計算\\n\\n和 watch 一樣，都是用來監聽數據的方式，但使用場景不同。\\n\\ncomputed 是一個計算屬性，他根據依賴的資料，動態計算出一個新的值，並且會自動存入快取。當依賴的資料發生變化時，computed 會自動重新計算。這樣可以有效避免重複計算和提高性能。\\n\\ncomputed 通常用計算衍生的資料，例如從一個列表中過濾出符合條件的資料，或根據資料的狀態產生顯示內容等等。在模板中，可以像普通的資料屬性一樣使用 computed\\n\\n```javascript\\nexport default {\\n  data() {\\n    return {\\n      count: 0,\\n    };\\n  },\\n  computed: {\\n    doubleCount() {\\n      return this.count * 2;\\n    },\\n  },\\n};\\n```\\n\\n`doubleCount` 為一個計算屬性，他依賴於 count 屬性。當 count 屬性發生變化時，doubleCount 會自動重新計算。在模板中，可以像下面這樣使用：\\n\\n```html\\n<p>count: {{ count }}</p>\\n<p>double count: {{ doubleCount }}</p>\\n```\\n\\n#### computed 和 watch 的差別\\n\\ncomputed 最大特點是必須回傳一個值，並且將其存入快取，當方法中的依賴改變時，才會重新執行和求值。\\n\\n但 watch 和 methods 不會強制要求回傳一個值，他們只需要執行動作，不一定要回傳值。\\n\\nwatch 會偵測單一個值，當她有變化時就執行。methods 只要呼叫，就會執行。\\n\\n- computed 的特點\\n\\n  - 當元件被建立時(created 生命週期)，computed 方法會被建立和執行一次。之後如果依賴沒有更新，就不會重新執行和求值，僅回傳快取的值。\\n  - computed 只能被該 computed 修改，不能被其他方法修改。例如：this.some_computed_function = 123 就會報錯。\\n  - computed 的方法必須回傳一個值。\\n  - computed 方法無法傳入參數\\n  - computed 依賴更新才會重新執行\\n\\n    > vue 官方文件\\n    >\\n    > 计算属性是基于它们的响应式依赖进行缓存的。只在相关响应式依赖发生改变时它们才会重新求值。\\n\\n    響應式依賴：在一個 computed 方法中，他所用到在 data 建立的資料，當資料產生變化，此方法就會重新執行和求值。\\n\\n    ```javascript\\n    computed:{\\n        total(){\\n            return this.price * this.quantity * this.discount\\n        }\\n    }\\n    ```\\n\\n    total 的依賴就是 this.price, this.quantity, this.discount。只要其中一樣產生變化，就會重新執行 total()，並回傳新的值。\\n\\n    當 computed 內所有的依賴都沒有發生變化，此 computed 函示就會一直回傳之前儲存起來的值。\\n\\n    ```javascript\\n    <div id=\\"app\\">\\n      <button @click=\\"num = 1\\">按我改num</button>\\n      <p> 用add方法把以下的值由0變1：</p>\\n      <p> {{ add }} </p>\\n    </div>\\n    ```\\n\\n    ```javascript\\n    // 當num變成1之後，changeOne()就不會再觸發，而「我有被觸發了！」這句也不會印出來\\n\\n    import { createApp } from \\"https://cdnjs.cloudflare.com/ajax/libs/vue/3.0.9/vue.esm-browser.js\\";\\n    createApp({\\n      data() {\\n        return { num: 0 };\\n      },\\n      computed: {\\n        add() {\\n          console.log(\\"我有被觸發了！\\");\\n          return this.num;\\n        },\\n      },\\n    }).mount(\\"#app\\");\\n    ```\\n\\n    當元件剛建立時(created)時，會打印一次，然後第一次按下按鈕時，會在打印一次，並且 num 會變成 1。\\n    但第二次之後按下按鈕，就不會再觸發 add() 方法，因為每次按下按鈕，都會將 num 賦值為 1，和之前快取儲存的值相同。\\n\\n## eventHub 事件中心(vue 2)\\n\\n在無關聯的組件之間，互相傳遞 data\\n\\n在需要取得 data 的組件上設置一個監聽器，每次要傳遞 data 時，那個組件就會廣播這個事件並調用這些監聽器。\\n\\neventHub 最主要的功能就是**監聽**和**廣播**\\n\\n若 vue 搭配其他框架時，在 library 新增一個 eventHub.js\\n\\n```javascript\\nimport Vue from \\"vue\\";\\nconst eventHub = new Vue();\\nexport default eventHub;\\n```\\n\\n若只有單純 vue 框架，則在頂層組件的 `data` 裡初始化 eventHub，並使用 `provide` 對外傳遞這個 eventHub\\n\\n```javascript\\nimport Vue from \\"vue\\";\\n\\nexport default {\\n  name: \\"App\\",\\n  components: {\\n    GrandParent,\\n  },\\n  data() {\\n    return {\\n      eventHub: new Vue(),\\n    };\\n  },\\n  provide() {\\n    return {\\n      eventHub: this.eventHub,\\n    };\\n  },\\n  methods: {\\n    setRandomValue() {\\n      this.eventHub.$emit(\\"update:msg\\", Math.random() * 100);\\n    },\\n  },\\n};\\n```\\n\\n在要傳遞 data 的組件裡加入廣播\\n\\n```javascript\\nimport eventHub from \\"../library/eventHub\\";\\nexport default {\\n  data() {\\n    return {\\n      name: \\"\\",\\n    };\\n  },\\n  methods: {\\n    getCategories: function () {\\n      let id = \\"\\";\\n      axios\\n        .get(base_url + \\"/api/category/\\")\\n        .then((response) => {\\n          this.name = response.data.name;\\n          eventHub.$emit(\\"categoryupdate\\", this.name);\\n        })\\n        .catch(function (error) {\\n          console.log(error);\\n        });\\n    },\\n  },\\n  created() {\\n    this.getCategories();\\n  },\\n};\\n```\\n\\n接著在需要監聽的組件裡注入這個依賴，並在添加事件監聽。\\n\\n```javascript\\nimport eventHub from \\"../library/eventHub\\";\\nexport default {\\n  data() {\\n    return {\\n      categories: [],\\n    };\\n  },\\n  mounted() {\\n    eventHub.$on(\\"categoryupdate\\", this.categoryupdate);\\n  },\\n  methods: {\\n    categoryupdate(input) {\\n      this.categories.push(input);\\n    },\\n  },\\n};\\n```\\n\\n## directive 指令\\n\\n### 屬性綁定\\n\\n透過 `v-bind`，進行數據綁定 HTML class\\n\\n傳遞對象給 v-bind:class，用以動態切換 class\\n\\n```html\\n<div v-bind:class=\\"{ active: isActive }\\"></div>\\n```\\n\\n此時 `active` 這個 class 是否存在，將取決於 property `isActive` 的 truthiness(註 1)。\\n\\n可以在對象中傳入更多屬性，來動態切換多個 class。此外 v-bind:class 也可以與普通的 class attribute 共存\\n\\n```html\\n<div\\n  class=\\"static\\"\\n  v-bind:class=\\"{ active: isActive, \'text-danger\': hasError }\\"\\n></div>\\n```\\n\\ndata:\\n\\n```javascript\\ndata: {\\n  isActive: true,\\n  hasError: false\\n}\\n```\\n\\n渲染結果\\n\\n```html\\n<div class=\\"static active\\"></div>\\n```\\n\\n當 isActive 或 hasError 變化時，class 的屬性會同步更新。\\n\\n例如：若 hasError 值為 true，class 屬性將變為 \\"static active text-danger\\"。\\n\\n綁定的數據對象，不一定要定義在模板裡\\n\\n```html\\n<div v-bind:class=\\"classObject\\"></div>\\n```\\n\\n```javascript\\ndata: {\\n  classObject: {\\n    active: true,\\n    \'text-danger\': false\\n  }\\n}\\n```\\n\\n此渲染的結果和上面一樣。\\n\\n也可以在此綁定 computed 屬性。\\n\\n```html\\n<div v-bind:class=\\"classObject\\"></div>\\n```\\n\\n```javascript\\ndata: {\\n  isActive: true,\\n  error: null\\n},\\ncomputed: {\\n  classObject: function () {\\n    return {\\n      active: this.isActive && !this.error,\\n      \'text-danger\': this.error && this.error.type === \'fatal\'\\n    }\\n  }\\n}\\n```\\n\\n### 表單綁定 `v-model`\\n\\n> 當使用 v-model 指令時，表單元素會自動忽略原有的 value, checked 和 selected 屬性，實際的值將以 data 內的狀態為主\\n\\n#### input\\n\\n在 input 文字框加入 v-model=\\"message\\" 屬性之後，此文字框便會自動被綁定 input 事件\\n\\n```html\\n<div id=\\"app\\">\\n  <input type=\\"text\\" v-model=\\"message\\" />\\n  <p>Message is {{ message }}</p>\\n</div>\\n\\n<script>\\n  const vm = Vue.createApp({\\n    data() {\\n      return {\\n        message: \\"Hello\\",\\n      };\\n    },\\n  });\\n<\/script>\\n```\\n\\n#### textarea 文字方塊\\n\\n使用方式與 input 完全一樣\\n\\n```html\\n<p><span>Multiline message is:</span>{{ message }}</p>\\n\\n<textarea v-model=\\"message\\"></textarea>\\n```\\n\\n#### radio\\n\\n```html\\n<div id=\\"app\\">\\n  <div>\\n    <input type=\\"radio\\" id=\\"one\\" value=\\"1\\" v-model=\\"picked\\" />\\n    <label for=\\"one\\">One</label>\\n  </div>\\n  <div>\\n    <input type=\\"radio\\" id=\\"two\\" value=\\"2\\" v-model=\\"picked\\" />\\n    <label for=\\"two\\">Two</label>\\n  </div>\\n\\n  <span>Picked: {{ picked }}</span>\\n</div>\\n\\n<script>\\n  const vm = Vue.createApp({\\n    data() {\\n      return {\\n        picked: 1,\\n      };\\n    },\\n  }).mount(\\"#app\\");\\n<\/script>\\n```\\n\\n因為 data 裡的 picked 預設為 1，所以執行時畫面上 `<input type=\\"radio\\" id=\\"one\\" value=\\"1\\">` 會預設為已選擇\\n\\n#### checkbox\\n\\n可以當作多選的選項，而當他只有一個的時候，又可以將它做 boolean 的選項\\n\\n複選時，用法跟前面 radio 完全一樣，因為是複選的關係，其差別在 data 內的狀態必須為陣列\\n\\n```html\\n<div id=\\"app\\">\\n  <input type=\\"checkbox\\" id=\\"jack\\" value=\\"jack\\" v-model=\\"checkedNames\\" />\\n  <label for=\\"jack\\">jack</label>\\n  <input type=\\"checkbox\\" id=\\"john\\" value=\\"john\\" v-model=\\"checkedNames\\" />\\n  <label for=\\"john\\">john</label>\\n  <input type=\\"checkbox\\" id=\\"mike\\" value=\\"mike\\" v-model=\\"checkedNames\\" />\\n  <label for=\\"mike\\">mike</label>\\n  <input type=\\"checkbox\\" id=\\"mary\\" value=\\"mary\\" v-model=\\"checkedNames\\" />\\n  <label for=\\"mary\\">mary</label>\\n  <br />\\n  <p>Checked names: {{ checkedNames }}</p>\\n</div>\\n\\n<script>\\n  const vm = Vue.createApp({\\n    data() {\\n      return {\\n        checkedNames: [],\\n      };\\n    },\\n  }).mount(\\"#app\\");\\n<\/script>\\n```\\n\\n- 如果要控制表單的全選或全部取消，只要控制 data 內的 checkedNames 陣列內容即可\\n\\n當 checkbox 為單選時\\n\\n```html\\n<div id=\\"app\\">\\n  <input type=\\"checkbox\\" id=\\"checkbox\\" v-model=\\"isChecked\\" />\\n  <label for=\\"jack\\">Status: {{ isChecked }}</label>\\n</div>\\n\\n<script>\\n  const vm = Vue.createApp({\\n    data() {\\n      return {\\n        isChecked: true,\\n      };\\n    },\\n  }).mount(\\"#app\\");\\n<\/script>\\n```\\n\\n此時， data 內的選項，會變成 true 或 false，當值為 true 時，對應的 checkbox 會被勾起。\\n\\n#### select 下拉式選單\\n\\n```html\\n<div id=\\"app\\">\\n  <select v-model=\\"selected\\">\\n    <option disabled value=\\"\\">請選擇</option>\\n    <option>台北市</option>\\n    <option>新北市</option>\\n    <option>基隆市</option>\\n  </select>\\n\\n  <p>Selected: {{ selected || \'未選擇\' }}</p>\\n</div>\\n\\n<script>\\n  const vm = Vue.createApp({\\n    data() {\\n      return {\\n        selected: \\"\\",\\n      };\\n    },\\n  }).mount(\\"#app\\");\\n<\/script>\\n```\\n\\nv-model 標籤須使用在 `<select>` 標籤，不能用在 `<option>` 標籤中\\n\\n### v-model 修飾子\\n\\n#### .lazy\\n\\n```html\\n<input v-model.lazy=\\"message\\" />\\n```\\n\\n在 v-model 屬性後面加上.lazy，此輸入框就會從原本的 input 事件，變成監聽 change 事件\\n\\n也就是，原本 input 事件會在輸入值時做實時的更新，而監聽 change 事件，則是當使用者離開輸入框焦點時才會更新。\\n\\n### 模板綁定\\n\\n#### v-text\\n\\n```html\\n<div id=\\"app\\">\\n  <div v-text=\\"text\\"></div>\\n</div>\\n\\n<script>\\n  const vm = Vue.createApp({\\n    data() {\\n      return {\\n        text: \\"hello\\",\\n      };\\n    },\\n  }).mount(\\"#app\\");\\n<\/script>\\n```\\n\\n當透過 v-text 指令來進行綁定，此時畫面渲染出來的結果會與下面相同\\n\\n```html\\n<div>{{ text }}</div>\\n```\\n\\n但若在 v-text 綁定的標籤內加入文字，以 v-text 指令渲染出來的結果會無視標籤內的內容\\n\\n```html\\n\x3c!-- 只會出現 Hello --\x3e\\n<div v-text=\\"text\\">World!</div>\\n\\n\x3c!-- 出現 Hello world! --\x3e\\n<div>{{ text }} world!</div>\\n```\\n\\n#### v-html\\n\\n和 v-text 類似，但當 data 的內容為 HTML 的語法時，v-html 會將其渲染為 html 語法\\n\\n```html\\n<button v-for=\\"(item, index) in data.links\\">{{ item.label }}</button>\\n\x3c!--  輸出結果 --\x3e\\n&laquo; Previous\\n```\\n\\n```html\\n<button v-for=\\"(item, index) in data.links\\" v-html=\\"item.label\\"></button>\\n\x3c!--  輸出結果 --\x3e\\n<< Previous\\n```\\n\\n#### v-once\\n\\n只渲染指定的節點一次，往後就不再更新\\n\\n#### v-pre\\n\\n加入 v-pre 後，就不會解析模板內容。\\n\\n### 樣式綁定\\n\\n## 條件渲染\\n\\n### v-if\\n\\n其屬性為 truthy，當其返回 true 時會被渲染。\\n\\n```html\\n<h1 v-if=\\"awesome\\">Vue is awesome!</h1>\\n```\\n\\n可以添加 `v-else`\\n\\n```html\\n<h1 v-if=\\"awesome\\">Vue is awesome!</h1>\\n<h1 v-else>It\'s not true.</h1>\\n```\\n\\n還可以添加 `v-else-if`\\n\\n此三元素需緊跟彼此，否則將不會被識別\\n\\n### v-show\\n\\n和 `v-if` 用法類似，不同的是 `v-show` 的元素始終會被渲染並保留在 DOM 中，`v-show` 只是單純的切換元素的 CSS property display。\\n\\n`v-if` 是真正的條件渲染，他會確保在切換過程中條件內的事件監聽器和子組件適當的被銷毀和重建。\\n\\n同時 `v-if` 也是惰性的，若在初始渲染時條件為 false，則不執行，直至條件第一次轉為 true 時，才會開始渲染。\\n\\n相較之下，`v-show` 就比較單純，無論初始條件，元素總是會被渲染，`v-show` 做的只是基於 CSS 進行切換。\\n\\n## 迴圈渲染\\n\\nv-for 可以用陣列進行渲染成一個列表。其語法為 item in items，items 為源陣列，而 item 則為被迭代的陣列元素別名。\\n\\n```html\\n<ul id=\\"example-1\\">\\n  <li v-for=\\"item in items\\" :key=\\"item.message\\">{{ item.message }}</li>\\n</ul>\\n```\\n\\n```javascript\\nvar example1 = new Vue({\\n  el: \\"#example-1\\",\\n  data: {\\n    items: [{ message: \\"Foo\\" }, { message: \\"Bar\\" }],\\n  },\\n});\\n```\\n\\n輸出\\n\\n```txt\\nFoo\\nBar\\n```\\n\\n在 v-for 中可以訪問所有父作用域的 property。v-for 還可加入可選的第二參數作為當前的 key 值。\\n\\n```html\\n<ul id=\\"example-2\\">\\n  <li v-for=\\"(item, index) in items\\">\\n    {{ parentMessage }} - {{ index }} - {{ item.message }}\\n  </li>\\n</ul>\\n```\\n\\n```javascript\\nvar example2 = new Vue({\\n  el: \\"#example-2\\",\\n  data: {\\n    parentMessage: \\"Parent\\",\\n    items: [{ message: \\"Foo\\" }, { message: \\"Bar\\" }],\\n  },\\n});\\n```\\n\\n```txt\\nparent-0-Foo\\nparent-1-Bar\\n```\\n\\n用 v-for 來迭代一個對象的 property\\n\\n```html\\n<ul id=\\"v-for-object\\" class=\\"demo\\">\\n  <li v-for=\\"value in object\\">{{ value }}</li>\\n</ul>\\n```\\n\\n```javascript\\nnew Vue({\\n  el: \\"#v-for-object\\",\\n  data: {\\n    object: {\\n      title: \\"How to do lists in Vue\\",\\n      author: \\"Jane Doe\\",\\n      publishedAt: \\"2016-04-10\\",\\n    },\\n  },\\n});\\n```\\n\\n```txt\\nHow to do lists in Vue\\nJane Doe\\n2016-04-10\\n```\\n\\n可以傳入第二個參數作為 property 的名稱(key 值)\\n\\n```html\\n<div v-for=\\"(value, name) in object\\">{{ name }}: {{ value }}</div>\\n```\\n\\n```txt\\ntitle: How to do lists in Vue\\nauthor: Jane Doe\\npublishedAt: 2016-04-10\\n```\\n\\n還可以傳入第三個參數作為索引值\\n\\n```html\\n<div v-for=\\"(value, name, index) in object\\">\\n  {{ index }}. {{ name }}: {{ value }}\\n</div>\\n```\\n\\n```txt\\n0. title: How to do lists in Vue\\n1. author: Jane Doe\\n2. **publishedAt**: 2016-04-10\\n```\\n\\n## 事件監聽器\\n\\n> 靜態事件監聽\\n>\\n> - 元素上使用 v-on 監聽原生事件\\n> - 父組件設定 v-on 設定所需要監聽的事件，子組件用 $emit 觸發事件\\n> - 在 Vue 實體上設定生命週期鉤子，監聽各個鉤子事件。\\n\\n當要在執行時去動態增減事件的監聽，這時就要用到 $on, $once, and $off 這些 js 函式來做設定。\\n\\n### 事件通用型修飾子\\n\\n> 一個事件指令可以加入多個修飾子，而修飾子的順序會影響執行的結果\\n>\\n> 如 `@click.prevent.self` 會先執行 `.prevent`，阻擋所有的點擊行為；而 `@click.self.prevent` 會先執行 `.self`，只會阻擋該元素自己的點擊事件。\\n\\n#### .stop\\n\\n阻止事件冒泡，同 `event.stopPropagation()`。\\n\\n```html\\n<div class=\\"outer\\" @click=\\"alert(\'outer\')\\">\\n  <span>Outer</span>\\n  <div class=\\"inner\\" @click.stop=\\"alert(\'inner\')\\">Inner</div>\\n</div>\\n```\\n\\n在 inner 區塊加上 `.stop`，`click` 事件就不會向外層傳遞。\\n\\n#### .prevent\\n\\n阻擋元素的預設行為，同 `event.preventDefault()`。\\n\\n```html\\n<a href=\\"#\\" class=\\"btn\\" @click.prevent=\\"alert(\'hello\')\\">click me</a>\\n```\\n\\n當然也可以和 `.stop` 一起使用：\\n\\n```html\\n<a href=\\"#\\" class=\\"btn\\" @click.stop.prevent=\\"alert(\'hello\')\\">click me</a>\\n```\\n\\n#### .capture\\n\\n用來指定事件已捕獲的形式來觸發。\\n\\n```html\\n<div class=\\"outer\\" @click.capture=\\"alert(\'outer\')\\">\\n  <span>outer</span>\\n  <div class=\\"inner\\" @click=\\"alert(\'inner\')\\">inner</div>\\n</div>\\n```\\n\\n當 outer 的點擊事件指定捕獲的修飾子後，在沒有加上捕獲修飾子的 inner 上點擊，會先觸發 inner 的點擊事件在觸發 outer 的點擊事件。\\n\\n而當 outer 的點擊事件加上捕獲後，則順序相反，點擊 inner 時會先印出 outer 再印出 inner。\\n\\n#### .self\\n\\n只會觸發元素自己的事件行為，由子層元素傳遞來的事件則不會觸發。\\n\\n燈箱範例：在燈箱開啟之後，點擊燈箱外遮罩可以自動關閉燈箱\\n\\n```vue\\n<template>\\n  <div class=\\"modal-mask\\" :style=\\"modelStyle\\">\\n    <div class=\\"modal-container\\" @click=\\"isShow = false\\">\\n      <div class=\\"modal-body\\">Hello</div>\\n    </div>\\n  </div>\\n\\n  <button @click=\\"isShow = true\\">Click me</button>\\n</template>\\n\\n<script>\\nexport default {\\n  data() {\\n    return {\\n      isShow: false,\\n    };\\n  },\\n  computed: {\\n    modalStyle() {\\n      return {\\n        display: this.isShow ? \\"\\" : \\"none\\",\\n      };\\n    },\\n  },\\n  methods: {\\n    toggleModal() {\\n      this.isShow = !this.isShow;\\n    },\\n  },\\n};\\n<\/script>\\n\\n<style lang=\\"\\">\\n#app {\\n  display: block;\\n  overflow: hidden;\\n  width: 100%;\\n}\\n\\nh4 {\\n  margin: 1rem 0;\\n  font-size: 1rem;\\n}\\n\\n.modal-mask {\\n  position: absolute;\\n  z-index: 10;\\n  top: 0;\\n  left: 0;\\n  width: 100%;\\n  height: 100%;\\n  display: table;\\n  background-color: rgba(0, 0, 0, 0.5);\\n  transition: opacity 0.3s ease;\\n}\\n\\n.modal-container {\\n  cursor: pointer;\\n  display: table-cell;\\n  vertical-align: middle;\\n}\\n\\n.modal-body {\\n  cursor: auto;\\n  display: block;\\n  width: 50%;\\n  margin: 0 auto;\\n  padding: 2rem;\\n  background-color: #fff;\\n}\\n</style>\\n```\\n\\n上面是一個燈箱的範例。由於 modal-body 的內容區塊在 modal-container 之下，因此當 modal-body 被點擊時，燈箱也會被關閉。\\n\\n此時，若在 modal-container 的 click 事件加上 `.self` 修飾子，就可以排除這樣的問題。\\n\\n```html\\n<div class=\\"modal-mask\\" :style=\\"modelStyle\\">\\n  <div class=\\"modal-container\\" @click.self=\\"isShow = false\\">\\n    <div class=\\"modal-body\\">Hello</div>\\n  </div>\\n</div>\\n\\n<button @click=\\"isShow = true\\">Click me</button>\\n```\\n\\n#### .once\\n\\n讓指定的事件只會觸發一次。\\n\\n```html\\n<button @click.once=\\"plus\\">plus once</button>\\n```\\n\\n#### .passive\\n\\n告訴瀏覽器這個事件處理器不會呼叫 `event.preventDefault` 來停止瀏覽器的原生行為。\\n\\n```html\\n<div @scroll.passive=\\"onScroll\\">...</div>\\n```\\n\\n此屬性常用來改善 scroll 事件的效能，因為以前的瀏覽器要多判斷 scroll 事件會不會被 preventDefault，加上 passive 屬性之後會直接忽略這個判斷。當 passive 屬性為 true 時，表示此事件不會被 preventDefault。\\n\\n也就是，passive .prevent 兩修飾子無法同時使用，同時使用時，prevent 會被無視。\\n\\n## props\\n\\n### 命名與使用\\n\\n可以使用 PascalCase 或是 camelCase 的命名方法，但在 html 中必須使用 kebab-case 且應該小寫(html 大小寫不敏感)\\n\\n像是 PostTitle 、 CartItem 、 TodoItem 等，在 HTML 中使用時就會變成 post-title 、 cart-item 、 todo-item。\\n\\n```vue\\n<div id=\\"vm\\">\\n\x3c!--post-title 跟 post-content 都是props --\x3e\\n  <blog-post post-title=\\"Blog1\\" post-content=\\"I\\\\\'m content1\\"></blog-post>\\n</div>\\n\\n<script>\\nVue.component(\\"blog-post\\", {\\n  props: [\\"PostTitle\\", \\"postContent\\"],\\n  template: `<div>\\n    <h3>{{ PostTitle }}</h3>\\n    <div>{{ postContent }}</div>\\n  </div>`,\\n});\\n<\/script>\\n```\\n\\n### 傳遞 props 值的方法\\n\\n#### 傳遞字串\\n\\n```vue\\n<blog-post\\n  post-title=\\"Blog1\\"\\n  post-content=\\"I\\\\\'m content1\\"\\n  post-complete=\\"true\\"\\n  post-total-num=\\"500\\"\\n  post=\\"{title:\'Blog1\'}\\"\\n>\\n</blog-post>\\n```\\n\\n只要是直接傳遞(靜態傳遞)都是字串，所以 prop 接收的值 log1、I\\\\\'m content1、true、500、{...} 等等都是字串。\\n\\n#### 傳遞數字、布林值、陣列、物件\\n\\n利用 vue 的 v-bind 傳遞字串以外的值。\\n\\n```vue\\n<blog-post\\n  post-title=\\"動態傳遞\\"\\n  post-content=\\"I\\\\\'m content1\\"\\n  v-bind:post-complete=\\"true\\"\\n  v-bind:post-total-num=\\"500\\"\\n  v-bind:post=\\"{ title: \'動態傳遞\' }\\"\\n></blog-post>\\n```\\n\\n也可以透過給予變數來獲得數字、布林值、陣列或物件等型別\\n\\n```vue\\n<blog-post\\n  :post-title=\\"postTitle\\"\\n  :post-content=\\"postContent\\"\\n  :post-complete=\\"postComplete\\"\\n  :post-total-num=\\"postTotalNum\\"\\n  :post=\\"post\\"\\n></blog-post>\\n\\n<script>\\nconst vm = new Vue({\\n  el: \\"#vm\\",\\n  data: {\\n    postTitle: \\"動態傳遞\\",\\n    postContent: \\"I\'m content\\",\\n    postComplete: true,\\n    postTotalNum: 500,\\n    post: { title: \\"動態傳遞\\" },\\n  },\\n});\\n<\/script>\\n```\\n\\n### 單向數據流\\n\\nprop 是為了接收從富組件傳遞過來的資料，而這些資料是單向綁定的，已就是說父模組資料的更新，會影響子模組裡的 prop，但子模組裡 prop 值改變並不會影響父模組。\\n\\n```vue\\n<prop-change :counter=\\"counter\\"></prop-change>\\n<br />\\n<span>外 {{counter}}</span>\\n<button type=\\"button\\" @click=\\"changeOuterCounter\\">改變外面數字</button>\\n\\n<script>\\nVue.component(\\"prop-change\\", {\\n  props: [\\"counter\\"],\\n  template: `<div>\\n    <span>component內的  {{counter}}</span>\\n    <button type=\\"button\\" @click=\\"changeInnerCounter\\">改變component數字</button>\\n  </div>`,\\n  methods: {\\n    changeInnerCounter() {\\n      this.counter += 2;\\n    },\\n  },\\n});\\n\\nconst vm = new Vue({\\n  el: \\"#vm\\",\\n  data: {\\n    counter: 1,\\n  },\\n  methods: {\\n    changeOuterCounter() {\\n      this.counter += 1;\\n    },\\n  },\\n});\\n<\/script>\\n```\\n\\n以上測試可以得知：\\n\\n- 外面(父層)的資料 counter 改變會影響子模組 prop 的 counter 的值。\\n- 子模組 prop 的 counter 值改變僅影響內部 counter 值\\n- 不論子模組的 prop 的 counter 值是否有變動，只要父模組資料 counter 改變時，子模組 prop 的 counter 值一定會連動。\\n\\n### 改變子模組內的 prop 值\\n\\n- 在 data 內創建一個值\\n  賦予 data 跟 prop 初始值相同的值，且之後也是針對該 data 內的值操作，並且不會再受到該 prop 的影響了\\n\\n  ```javascript\\n  Vue.component(\\"one-way-data\\", {\\n    props: [\\"counter\\"],\\n    template: `<div>\\n      <span>component內的  {{newCounter}}</span>\\n      <button type=\\"button\\" @click=\\"changeNewCounter\\">改變component數字</button>\\n    </div>`,\\n    data() {\\n      return {\\n        newCounter: this.counter,\\n      };\\n    },\\n    methods: {\\n      changeNewCounter() {\\n        this.newCounter += 10;\\n      },\\n    },\\n  });\\n  ```\\n\\n### 物件型別的 prop 傳遞\\n\\n- 父層透過標籤傳遞參數\\n\\n```javascript\\n<ExLogLineComponent :channel-names=\\"channel_names\\" :region-id=\\"region.id\\" :bx-mac=\\"region.bx_mac\\"></ExLogLineComponent>\\n```\\n\\n- 子層 prop 接收參數後，透過 watch 將參數存入 data.return\\n\\n```javascript\\nprops: [\'channelNames\', \'regionId\', \'bxMac\'],\\n    data() {\\n        return {\\n            channel_names: [],\\n            region_id: \'\',\\n            mac: \'\'\\n        }\\n    },\\n    watch: {\\n        channelNames(names) {\\n            this.channel_names = names;\\n        },\\n        regionId(id) {\\n            this.region_id = id;\\n        },\\n        bxMac(mac) {\\n            this.mac = mac;\\n        }\\n    },\\n```\\n\\n### 子組件接收來自父組件的 props\\n\\n#### 在模板中\\n\\n```vue\\n<template>\\n  <div>{{ parentData }}</div>\\n</template>\\n\\n<script>\\nexport default {\\n  props: [\\"parentData\\"],\\n};\\n<\/script>\\n```\\n\\n#### 在 data 中\\n\\n```vue\\n<script>\\nexport default {\\n  props: [\\"parentData\\"],\\n  data() {\\n    return {\\n      parent_data: this.parentData,\\n    };\\n  },\\n};\\n<\/script>\\n```\\n\\n#### 在 methods 中\\n\\n```vue\\n<script>\\nexport default {\\n  props: [\\"parentData\\"],\\n  methods: {\\n    printParentData: function () {\\n      console.log(this.$props.parentData);\\n    },\\n  },\\n};\\n<\/script>\\n```\\n\\n#### 在 mounted 中\\n\\n```vue\\n<script>\\nexport default {\\n  props: [\\"parentData\\"],\\n  mounted() {\\n    console.log(this.message);\\n  },\\n};\\n<\/script>\\n```\\n\\n#### 在 computed 中\\n\\n```vue\\n<template>\\n  <div>\\n    <p>{{ parentDataLength }}</p>\\n  </div>\\n</template>\\n\\n<script>\\nexport default {\\n  props: [\\"parentData\\"],\\n  computed: {\\n    parentDataLength() {\\n      return this.parentData.length;\\n    },\\n  },\\n};\\n<\/script>\\n```\\n\\n## emit 子組件向父組件傳遞參數\\n\\n```vue\\n\x3c!-- 子組件 HelloWorld.vue --\x3e\\n<template>\\n  <div></div>\\n</template>\\n\\n<script>\\nexport default {\\n  methods: {\\n    open() {\\n      console.log(\\"已呼叫\\");\\n      // 呼叫父組件方法\\n      this.$emit(\\"refresh-data\\");\\n    },\\n  },\\n};\\n<\/script>\\n```\\n\\n```vue\\n\x3c!-- 父組件 --\x3e\\n<template>\\n  <div id=\\"app\\">\\n    \x3c!-- 子組件傳遞的方法 refresh-data --\x3e\\n    <HelloWorld ref=\\"hello\\" @refresh-data=\\"getData\\" />\\n    <button @click=\\"getHello\\">取得 HelloWorld 組件中的值</button>\\n  </div>\\n</template>\\n\\n<script>\\nimport HelloWorld from \\"./components/HelloWorld.vue\\";\\n\\nexport default {\\n  components: {\\n    HelloWorld,\\n  },\\n  data() {\\n    return {};\\n  },\\n  methods: {\\n    getHello() {\\n      this.$refs.hello.open();\\n    },\\n    getData() {\\n      console.log(\\"111111111\\");\\n    },\\n  },\\n};\\n<\/script>\\n```\\n\\n最後輸出時，`已呼叫`為子組件輸出，`111111111111`為父組件輸出\\n\\n## ref 取得 Dom 元素\\n\\n> `refs` 是 vue 提供的一個 api，可以讓我們在 vue 中取得 Dom 元素\\n\\n`ref` 被用來給元素或子組件註冊引用訊息，引用訊息將會註冊在父組件的`$refs` 物件上，如果在普通的 dom 元素上使用，那麼指向的就會是普通的 dom 元素；如果用在子組件上，引用就會指向該子組件的實例。\\n\\nref 的特性就是為元素或子組件賦予一個 id 引用，通過 `this.$ref.refName` 來訪問元素或是子組件的實例。\\n\\n- 一共有三種用法：\\n  - ref 加在普通元素上，用 `this.ref.name` 獲取到的是 dom 元素\\n  - ref 加在子組件上，用 `this.ref.name` 方式，獲得的是組件實例，可以使用組件的所有方法。\\n  - 如何利用 v-for 和 ref 獲取一組陣列或是 dom 節點\\n\\n### 基本用法：取得 dom 元素\\n\\n```html\\n<p ref=\\"p\\">Hello</p>\\n<children ref=\\"children\\"></children>\\n```\\n\\n```javascript\\nthis.$ref.p;\\nthis.$ref.children;\\n```\\n\\n### 獲取子組件中的 data 和調用子組件的方法\\n\\n```vue\\n\x3c!-- 子組件 --\x3e\\n<template>\\n  <div>{{ msg }}</div>\\n</template>\\n\\n<script>\\nexport default {\\n  data() {\\n    return {\\n      msg: \\"我是子組件\\";\\n    }\\n  },\\n  methods: {\\n    changeMsg() {\\n      this.mag = \\"變身\\";\\n    }\\n  }\\n}\\n<\/script>\\n```\\n\\n```vue\\n\x3c!-- 父組件 --\x3e\\n<template>\\n  <div @click=\\"parentMethod\\">\\n    <children ref=\\"children\\"></children>\\n  </div>\\n</template>\\n\\n<script>\\nimport children from \\"components/children.vue\\";\\n\\nexport default {\\n  components: {\\n    children,\\n  },\\n  data() {\\n    return {};\\n  },\\n  methods: {\\n    parentMethod() {\\n      this.$ref.children; // 返回一個物件\\n      this.$ref.children.changMsg(); // 呼叫 children 的 changeMsg 方法\\n    },\\n  },\\n};\\n<\/script>\\n```\\n\\n### this.$refs 介紹\\n\\n`this.$refs` 為一個物件，持有當前組件中註冊過`ref`特性的所有`dom`元素和子組件實例。\\n\\n注意：`$refs` 只有在組件完成渲染後才會填充，在初始渲染時無法取得，並且他是非響應式的，因此不能用他模版中做數據綁定。\\n\\n當 ref 和 v-for 一起用時，你得到的 ref 將會是一個包含了對應的數據源的這些子組件的陣列。\\n\\n```vue\\n<template>\\n  <ul>\\n    <li v-for=\\"item in people\\" ref=\\"refContent\\">{{ item }}</li>\\n  </ul>\\n</template>\\n\\n<script>\\nexport default {\\n  data: {\\n    return {\\n      people:[\'one\', \'two\', \'three\', \'four\', \'five\']\\n    }\\n  },\\n  created() {\\n    this.$nextTick(() => {\\n      console.log(this.$refs.refContent);\\n    })\\n  },\\n  mounted() {\\n    console.log(this.$refs.refContent);\\n  }\\n};\\n<\/script>\\n```\\n\\n## this.$el\\n\\n在 vue 中，this.$el 是一個指向 Vue 實例渲染的一個 dom 元素的引用。用來訪問 vue 實例所渲染的 dom 元素。\\n\\n在 javascript 中使用 document 時，會進行全域的 dom 操作，而在 vue 中，this.$el 的 dom 作用範圍僅在執行的組件中。\\n\\n```vue\\n<template>\\n  <div>\\n    <h1>Hello, {{ name }}!</h1>\\n  </div>\\n</template>\\n\\n<script>\\nexport default {\\n  data() {\\n    return {\\n      name: \\"Vue\\",\\n    };\\n  },\\n  mounted() {\\n    console.log(this.$el); // 输出 <div><h1>Hello, Vue!</h1></div>\\n  },\\n};\\n<\/script>\\n```\\n\\n## Mixin 共用方法\\n\\n> 參考資料：\\n>\\n> [彻底搞懂 Vue 中的 Mixin 混入（保姆级教程）](https://juejin.cn/post/7076340796361801759)\\n\\n將組件的共用邏輯或設定抽出，當組件需要使用時，直接將抽出的部分混入到組件內部。\\n\\n```js\\n// src/mixin/index.js\\nexport const index = {\\n  data() {\\n    return {\\n      msg: \\"msg from mixin\\",\\n    };\\n  },\\n  computed: {},\\n  created() {\\n    console.log(\\"created in mixin\\");\\n  },\\n  mounted() {\\n    console.log(\\"mounted in mixin\\");\\n  },\\n  methods: {\\n    clickMe() {\\n      console.log(\\"click in mixin\\");\\n    },\\n  },\\n};\\n```\\n\\n當 mixin 定義好之後，依據不同的業務場景，可以分為兩種：局部混入和全局混入。顧名思義，局部混入和元件的載入有點類似，就是當需要使用到 mixin 的程式碼時，在元件中引入。而全局混入則將 mixin 於 app.js 中引入，此時專案中任何元件都可以使用 mixin。\\n\\n### 局部混入\\n\\n在 component 中引入 mixin：\\n\\n```vue\\n// src/App.vue\\n<template>\\n  <div id=\\"app\\">\\n    <img alt=\\"Vue logo\\" src=\\"./assets/logo.png\\" />\\n    <button @click=\\"clickMe\\">button</button>\\n  </div>\\n</template>\\n\\n<script>\\nimport { mixins } from \\"./mixin/index\\";\\nexport default {\\n  name: \\"App\\",\\n  mixins: [mixins],\\n  created() {\\n    console.log(\\"component call mixin data: \\", this.msg);\\n  },\\n  mounted() {\\n    console.log(\\"mounted in component\\");\\n  },\\n};\\n<\/script>\\n```\\n\\n輸出：\\n\\n```text\\ncreated in mixin\\ncomponent call mixin data: msg from mixin\\nmounted in mixin\\nmounted in component\\nclick in mixin\\n```\\n\\n- mixin 的生命週期函數會和元件的生命週期一起合併執行\\n- 元件可以使用 mixin 中的 data 資料\\n- 元件中可以直接呼叫 mixin 中的方法\\n- 生命週期的執行順序為：先執行 mixin 再執行 component\\n\\n若多個元件都有引入 mixin，當期中一個元件修改了 mixin 的資料，會影響其他元件嗎？\\n\\n```vue\\n// src/component/demo.vue\\n<template>\\n  <button @click=\\"demoShowMsg\\">demo button</button>\\n</template>\\n<script>\\nimport { mixins } from \\"../mixin/index\\";\\nexport default {\\n  mixins: [mixins],\\n  methods: {\\n    demoShowMsg() {\\n      console.log(\\"msg in demo: \\", this.msg);\\n    },\\n  },\\n};\\n<\/script>\\n```\\n\\n在 App.vue 中引入\\n\\n```vue\\n// src/App.vue\\n<template>\\n  <div id=\\"app\\">\\n    <img alt=\\"Vue logo\\" src=\\"./assets/logo.png\\" />\\n    <button @click=\\"clickMe\\">button</button>\\n    <button @click=\\"changeMsg\\">edit mixin data</button>\\n    <demo></demo>\\n  </div>\\n</template>\\n\\n<script>\\nimport { mixins } from \\"./mixin/index\\";\\nimport demo from \\"./components/demo.vue\\";\\nexport default {\\n  name: \\"App\\",\\n  mixins: [mixins],\\n  components: { demo },\\n  created() {\\n    console.log(\\"component call mixin data: \\", this.msg);\\n  },\\n  mounted() {\\n    console.log(\\"mounted in component\\");\\n  },\\n  methods: {\\n    changeMsg() {\\n      this.msg = \\"new message\\";\\n      console.log(\\"new msg:\\", this.msg);\\n    },\\n  },\\n};\\n<\/script>\\n```\\n\\n輸出：\\n\\n```text\\ncreated in mixin\\ncomponent call mixin data: msg from mixin\\ncreated in mixin\\nmounted in mixin\\nmounted in mixin\\nmounted in component\\nnew msg in App: new message\\nmsg in demo: msg from mixin\\n```\\n\\n由上面程式碼可以得知，當 App.vue 中修改 msg 後，demo 元件並沒有受到任何變化。\\n\\n### 全域混入\\n\\n將 mixin 在 main.js 中註冊後，便可以在任何元件中直接使用。\\n\\n```js\\n// main.js\\nimport Vue from \\"vue\\";\\nimport App from \\"./App.vue\\";\\nimport { mixins } from \\"./mixin/index\\";\\nVue.mixin(mixins);\\n\\nVue.config.productionTip = false;\\n\\nnew Vue({\\n  render: (h) => h(App),\\n}).$mount(\\"#app\\");\\n```\\n\\n此時若將前面的 App.vue 中引入 mixin 的部分註解掉，會發現效果和局部混入沒有任何差別。\\n\\n```vue\\n// src/App.vue\\n<template>\\n  <div id=\\"app\\">\\n    <img alt=\\"Vue logo\\" src=\\"./assets/logo.png\\" />\\n    <button @click=\\"clickMe\\">button</button>\\n    <button @click=\\"changeMsg\\">edit mixin data</button>\\n    <demo></demo>\\n  </div>\\n</template>\\n\\n<script>\\n// import { mixins } from \\"./mixin/index\\";\\nimport demo from \\"./components/demo.vue\\";\\nexport default {\\n  name: \\"App\\",\\n  // mixins: [mixins],\\n  components: { demo },\\n  created() {\\n    console.log(\\"component call mixin data: \\", this.msg);\\n  },\\n  mounted() {\\n    console.log(\\"mounted in component\\");\\n  },\\n  methods: {\\n    changeMsg() {\\n      this.msg = \\"new message\\";\\n      console.log(\\"new msg:\\", this.msg);\\n    },\\n  },\\n};\\n<\/script>\\n```\\n\\n雖然這樣做很方便，但是一般而言不推薦。\\n\\nvue 官方：\\n\\n> 請謹慎使用全域混入，因為他會影響每個獨立建立的 Vue 實例（包括第三方元件）。大多數情況下，只應應用於自訂選項，推薦將其作為插件發布，以避免重複應用程式混入。\\n\\n### vuex 和 mixin 的區別\\n\\n- vuex: 用來做狀態管理，裡面定義的變數在不同元件中均可以使用和修改。而在任一元件中修改此變數的值後，其他元件中此變數的值也會隨之修改。\\n- mixin: 可以定義共用的變數，在每個組件之中使用。引入組件後，每個變數都是獨立的，值的修改在組件中不會互相影響。\\n\\n## 備註\\n\\n### Truthy(真值) 與 Falsy(假值)\\n\\n- `Truthy`：真值，只要是假值(false, 0, -0, 0n, \\"\\", null, undefined, NaN)以外的任何值皆為 true\\n- `Falsy`：假值\\n\\n### 判斷當前環境是否為開發環境\\n\\n```javascript\\nif (process.env.NODE_ENV !== \\"production\\") {\\n  this.is_dev = true;\\n} else {\\n  this.is_dev = false;\\n}\\n```\\n\\n### 取得 base_url\\n\\n- 在 html 加入 meta 標籤\\n\\n  ```html\\n  <head>\\n    <meta name=\\"base-url\\" content=\\"{{ url(\'/\') }}\\" />\\n  </head>\\n  ```\\n\\n- 此時就可以透過 meta 標籤取得 base_url\\n\\n  ```javascript\\n  window.base_url = document.head.querySelector(\'meta[name=\\"base-url\\"]\');\\n  ```\\n","tocContent":"- [Vue 學習筆記](#vue-學習筆記)\\n  - [Vue 實體的生命週期](#vue-實體的生命週期)\\n  - [Vue 屬性](#vue-屬性)\\n    - [watch 監聽器](#watch-監聽器)\\n      - [$watch](#watch)\\n      - [watch](#watch-1)\\n    - [computed 計算](#computed-計算)\\n      - [computed 和 watch 的差別](#computed-和-watch-的差別)\\n  - [eventHub 事件中心(vue 2)](#eventhub-事件中心vue-2)\\n  - [directive 指令](#directive-指令)\\n    - [屬性綁定](#屬性綁定)\\n    - [表單綁定 `v-model`](#表單綁定-v-model)\\n      - [input](#input)\\n      - [textarea 文字方塊](#textarea-文字方塊)\\n      - [radio](#radio)\\n      - [checkbox](#checkbox)\\n      - [select 下拉式選單](#select-下拉式選單)\\n    - [v-model 修飾子](#v-model-修飾子)\\n      - [.lazy](#lazy)\\n    - [模板綁定](#模板綁定)\\n      - [v-text](#v-text)\\n      - [v-html](#v-html)\\n      - [v-once](#v-once)\\n      - [v-pre](#v-pre)\\n    - [樣式綁定](#樣式綁定)\\n  - [條件渲染](#條件渲染)\\n    - [v-if](#v-if)\\n    - [v-show](#v-show)\\n  - [迴圈渲染](#迴圈渲染)\\n  - [事件監聽器](#事件監聽器)\\n    - [事件通用型修飾子](#事件通用型修飾子)\\n      - [.stop](#stop)\\n      - [.prevent](#prevent)\\n      - [.capture](#capture)\\n      - [.self](#self)\\n      - [.once](#once)\\n      - [.passive](#passive)\\n  - [props](#props)\\n    - [命名與使用](#命名與使用)\\n    - [傳遞 props 值的方法](#傳遞-props-值的方法)\\n      - [傳遞字串](#傳遞字串)\\n      - [傳遞數字、布林值、陣列、物件](#傳遞數字布林值陣列物件)\\n    - [單向數據流](#單向數據流)\\n    - [改變子模組內的 prop 值](#改變子模組內的-prop-值)\\n    - [物件型別的 prop 傳遞](#物件型別的-prop-傳遞)\\n    - [子組件接收來自父組件的 props](#子組件接收來自父組件的-props)\\n      - [在模板中](#在模板中)\\n      - [在 data 中](#在-data-中)\\n      - [在 methods 中](#在-methods-中)\\n      - [在 mounted 中](#在-mounted-中)\\n      - [在 computed 中](#在-computed-中)\\n  - [emit 子組件向父組件傳遞參數](#emit-子組件向父組件傳遞參數)\\n  - [ref 取得 Dom 元素](#ref-取得-dom-元素)\\n    - [基本用法：取得 dom 元素](#基本用法取得-dom-元素)\\n    - [獲取子組件中的 data 和調用子組件的方法](#獲取子組件中的-data-和調用子組件的方法)\\n    - [this.$refs 介紹](#thisrefs-介紹)\\n  - [this.$el](#thisel)\\n  - [Mixin 共用方法](#mixin-共用方法)\\n    - [局部混入](#局部混入)\\n    - [全域混入](#全域混入)\\n    - [vuex 和 mixin 的區別](#vuex-和-mixin-的區別)\\n  - [備註](#備註)\\n    - [Truthy(真值) 與 Falsy(假值)](#truthy真值-與-falsy假值)\\n    - [判斷當前環境是否為開發環境](#判斷當前環境是否為開發環境)\\n    - [取得 base\\\\_url](#取得-base_url)"}')},8697:function(n){"use strict";n.exports=JSON.parse('{"name":"VueX 學習筆記.md","content":"# VueX 學習筆記\\n\\n>\\n\\n> 參考資料：\\n>\\n> [Vuex 是什麼? 怎麼用?](https://medium.com/itsems-frontend/vue-vuex5-sumup-c170d4bd6c42)\\n>\\n> 實作：\\n>\\n> [github-repo](https://github.com/changgenglu/vuex-note)\\n>\\n> [github-pages](https://changgenglu.github.io/vuex-note/)\\n\\n## 什麼是 Vuex\\n\\n一個專門為 vue 專案開發的資料管理套件，可以為網站做全域的資料管理。\\n\\n在專案結構下面可能會有多個組件，組件中又會有組件，組件的溝通，通常會會透過 emit 和 prop，而為了處理大型專案的兄弟組件間的溝通，Vuex 就這樣誕生了。\\n\\nVuex 有一點像是全域的 components，大家可以拿他資料，呼叫他出來用。\\n\\nstate 就像是 data，action + Mutation 就像是 methods，getters 就像 computed\\n\\n在 Vuex 中，儲存的狀態為 State，Component 使用 Dispatch 呼叫 Actions，讓 Actions 發出 commit 觸發 Mutations 去修改 State 的資料。整個 Vuex 的方法也稱為 store。\\n\\n## 帶入參數及呼叫方法\\n\\n### State\\n\\n- 定義：/store.js\\n\\n  ```javascript\\n  import Vue from \\"vue\\";\\n  import Vuex from \\"vuex\\";\\n  Vue.use(Vuex);\\n\\n  const store = new Vuex.Store({\\n    state: {\\n      isLoading: false,\\n    },\\n  });\\n  export default store;\\n  ```\\n\\n- 使用：/app.vue\\n\\n  ```html\\n  <template>\\n    <div id=\\"app\\">\\n      <p>isLoading: {{ ifLoading }}</p>\\n    </div>\\n  </template>\\n\\n  <script>\\n    export default {\\n      name: \\"app\\",\\n      computed: {\\n        // 注意: 這邊的ifLoading跟store的state的isLoading名字不同，是可以自定義的喔\\n        ifLoading() {\\n          return this.$store.state.isLoading;\\n        },\\n      },\\n    };\\n  <\/script>\\n  ```\\n\\n### mapState\\n\\n- 定義：/store.js\\n\\n  ```javascript\\n  import Vue from \\"vue\\";\\n  import Vuex from \\"vuex\\";\\n  Vue.use(Vuex);\\n\\n  const store = new Vuex.Store({\\n    state: {\\n      myName: \\"Emma\\",\\n      isLoading: false,\\n    },\\n  });\\n\\n  export default store;\\n  ```\\n\\n- 使用：/app.vue\\n\\n  ```html\\n  <template>\\n    <div id=\\"app\\">\\n      <p>My Name is {{ myName }}</p>\\n      <p>isLoading: {{ isLoading }}</p>\\n    </div>\\n  </template>\\n\\n  <script>\\n    import { mapState } from \\"vuex\\";\\n    export default {\\n      name: \\"app\\",\\n      computed: {\\n        // 陣列寫法\\n        ...mapState([\\"isLoading\\", \\"myName\\"])\\n        // 物件寫法\\n        ...mapState({\\n          isLoading: state => state.isLoading,\\n          myName:  state => state.myName,\\n        })\\n      }\\n    };\\n  <\/script>\\n  ```\\n\\n### Getters\\n\\n- 可帶參數：state, getters\\n- 定義：/store.js\\n\\n  ```javascript\\n  import Vue from \\"vue\\";\\n  import Vuex from \\"vuex\\";\\n  Vue.use(Vuex);\\n\\n  const store = new Vuex.Store({\\n    state: {\\n      myName: \\"Emma\\",\\n    },\\n    getters: {\\n      // 只有一個參數的箭頭函式寫法\\n      newName: (state) => {\\n        return state.myName + \\" lin\\";\\n      },\\n    },\\n  });\\n\\n  export default store;\\n  ```\\n\\n- 使用：/app.vue\\n\\n  ```html\\n  <template>\\n    <div id=\\"app\\">\\n      <p>My New Name is {{ newName }}</p>\\n    </div>\\n  </template>\\n\\n  <script>\\n    export default {\\n      name: \\"app\\",\\n      computed: {\\n        newName() {\\n          return this.$store.getters.newName;\\n        },\\n      },\\n    };\\n  <\/script>\\n  ```\\n\\n加上參數 getters 表示可以呼叫別的 getters 來用\\n\\n- 定義：/store.js\\n\\n  ```javascript\\n  import Vue from \\"vue\\";\\n  import Vuex from \\"vuex\\";\\n  Vue.use(Vuex);\\n\\n  const store = new Vuex.Store({\\n    state: {\\n      myName: \\"Emma\\",\\n    },\\n    getters: {\\n      newName: (state) => {\\n        return state.myName + \\" lin\\";\\n      },\\n      // 這邊呼叫下面那個getters\\n      anotherName: (state, getters) => {\\n        return getters.nickName;\\n      },\\n      nickName: (state) => {\\n        return state.myName + \\" Watson\\";\\n      },\\n    },\\n  });\\n\\n  export default store;\\n  ```\\n\\n- 使用：/app.vue\\n\\n  ```html\\n  <template>\\n    <div id=\\"app\\">\\n      <p>My New Name is {{ newName }}</p>\\n      <p>or you can call me {{ anotherName }}</p>\\n    </div>\\n  </template>\\n\\n  <script>\\n    export default {\\n      name: \\"app\\",\\n      computed: {\\n        newName() {\\n          return this.$store.getters.newName;\\n        },\\n        anotherName() {\\n          return this.$store.getters.anotherName;\\n        },\\n      },\\n    };\\n  <\/script>\\n  ```\\n\\n### mapGetters\\n\\n定義和上面的 store.js 相同，差異在 components 呼叫的時候\\n\\n- 使用：\\n\\n  ```javascript\\n  <script>\\n    import { mapGetters } from \\"vuex\\";\\n    export default {\\n      name: \\"app\\",\\n      computed: {\\n        // 陣列寫法\\n        ...mapGetters([\\"newName\\", \\"anotherName\\"])\\n        // 物件寫法\\n        ...mapGetters({\\n          newName: \\"newName\\",\\n          anotherName: \\"anotherName\\"\\n        })\\n      }\\n    };\\n  <\/script>\\n  ```\\n\\n### mutations\\n\\n可帶參數：state, payload\\n\\n- 使用：/app.vue\\n\\n  ```javascript\\n  methods: {\\n    reverse() {\\n      this.$store.commit(\\"Loaded\\");\\n    },\\n  }\\n  ```\\n\\n- with payload:\\n  通常 payload 可以用物件表示，就能更具描述性，但是要記得在 mutations 運算時，帶入的參數 payload 要加上參數物件的 key\\n\\n  - /app.vue\\n\\n    ```javascript\\n    store.commit(\\"addCounts\\", {\\n      amount: 10,\\n    });\\n    ```\\n\\n  - /store.js\\n\\n    ```javascript\\n    mutations: {\\n      addCounts (state, payload) {\\n        state.count += payload.amount\\n      }\\n    }\\n    ```\\n\\n  - 所以帶上 payload 的呼叫可以這樣使用：\\n\\n    ```javascript\\n    this.$store.commit(\\"addTimes\\", 10);\\n    // 或\\n    this.$store.commit({\\n      type: \\"addTimes\\",\\n      count: 2,\\n    });\\n    ```\\n\\n    物件 type 是必要的，其他可以隨意\\n\\n### mapMutations\\n\\n```javascript\\n<script>\\n  import { mapMutations } from \\"vuex\\";\\n  export default {\\n    name: \\"app\\",\\n    computed: {\\n      // 陣列寫法\\n      ...mapMutations([\\"Loaded\\", \\"addTimes\\"])\\n      // 物件寫法\\n      ...mapMutations({\\n        // add是component自定義的事件名稱，addTimes是mutations在store的名稱\\n        add: \'addTimes\'\\n      })\\n    }\\n  };\\n<\/script>\\n```\\n\\n使用 mapMutations，就要把 payload 直接帶入 template：\\n\\n```html\\n<button @click=\\"addTimes(2)\\">addTimes</button>\\n```\\n\\n**注意**：mutations 一定只能同步執行，action 才能執行非同步\\n\\n### actions\\n\\n- 可帶參數：\\n  - context: {commit, dispatch, state, getters, rootState, rootGetters}, payload\\n\\n上面描述 mutations 只能同步執行，action 執行非同步，意旨 axios 要在 Actions 裡面做，不可以在 mutations 裡面做。\\n\\n- 定義：/app.vue\\n\\n  ```javascript\\n  ClickedActions({ commit }, payload) {\\n  commit(\'addTimes\', payload)\\n  }\\n  ```\\n\\n- 使用：/app.vue\\n\\n  ```javascript\\n  methods: {\\n    add() {\\n      this.$store.dispatch(\\"ClickedActions\\",2);\\n    }\\n  }\\n  ```\\n\\n## 專案結構\\n\\n1. App 層級的狀態要在 state 集中管理\\n   > app 層級的意思是指：不會因為跨組件改變的狀態，如：登入資訊、購物車清單...等。\\n   >\\n   > 會因為跨組件改變的狀態，如：下拉式選單的開關狀態、商品列表...等。\\n2. 唯一改變 state 的方式只有 mutations，而且是同步執行\\n3. actions 才可以非同步執行\\n\\n```txt\\n|--index.js\\n|--main.js\\n|--api\\n|  |--...             // 後端 api\\n|--components         // 頁面\\n|  |--App.vue\\n|  |--...\\n|--store\\n   |--index.js        // 註冊 modules 並 export store\\n   |--actions.js      // 跨組件的 action\\n   |--mutations.js    // 跨組件的 mutations\\n   |--modules\\n      |--cart.js      // 購物車 model\\n      |--products.js  // 商品 model\\n```\\n","tocContent":"- [VueX 學習筆記](#vuex-學習筆記)\\n  - [什麼是 Vuex](#什麼是-vuex)\\n  - [帶入參數及呼叫方法](#帶入參數及呼叫方法)\\n    - [State](#state)\\n    - [mapState](#mapstate)\\n    - [Getters](#getters)\\n    - [mapGetters](#mapgetters)\\n    - [mutations](#mutations)\\n    - [mapMutations](#mapmutations)\\n    - [actions](#actions)\\n  - [專案結構](#專案結構)"}')},3721:function(n){"use strict";n.exports=JSON.parse('{"name":"VueX 學習筆記.md","content":"# VueX 學習筆記\\n\\n>\\n\\n> 參考資料：\\n>\\n> [Vuex 是什麼? 怎麼用?](https://medium.com/itsems-frontend/vue-vuex5-sumup-c170d4bd6c42)\\n>\\n> 實作：\\n>\\n> [github-repo](https://github.com/changgenglu/vuex-note)\\n>\\n> [github-pages](https://changgenglu.github.io/vuex-note/)\\n\\n## 什麼是 Vuex\\n\\n一個專門為 vue 專案開發的資料管理套件，可以為網站做全域的資料管理。\\n\\n在專案結構下面可能會有多個組件，組件中又會有組件，組件的溝通，通常會會透過 emit 和 prop，而為了處理大型專案的兄弟組件間的溝通，Vuex 就這樣誕生了。\\n\\nVuex 有一點像是全域的 components，大家可以拿他資料，呼叫他出來用。\\n\\nstate 就像是 data，action + Mutation 就像是 methods，getters 就像 computed\\n\\n在 Vuex 中，儲存的狀態為 State，Component 使用 Dispatch 呼叫 Actions，讓 Actions 發出 commit 觸發 Mutations 去修改 State 的資料。整個 Vuex 的方法也稱為 store。\\n\\n## 帶入參數及呼叫方法\\n\\n### State\\n\\n- 定義：/store.js\\n\\n  ```javascript\\n  import Vue from \\"vue\\";\\n  import Vuex from \\"vuex\\";\\n  Vue.use(Vuex);\\n\\n  const store = new Vuex.Store({\\n    state: {\\n      isLoading: false,\\n    },\\n  });\\n  export default store;\\n  ```\\n\\n- 使用：/app.vue\\n\\n  ```html\\n  <template>\\n    <div id=\\"app\\">\\n      <p>isLoading: {{ ifLoading }}</p>\\n    </div>\\n  </template>\\n\\n  <script>\\n    export default {\\n      name: \\"app\\",\\n      computed: {\\n        // 注意: 這邊的ifLoading跟store的state的isLoading名字不同，是可以自定義的喔\\n        ifLoading() {\\n          return this.$store.state.isLoading;\\n        },\\n      },\\n    };\\n  <\/script>\\n  ```\\n\\n### mapState\\n\\n- 定義：/store.js\\n\\n  ```javascript\\n  import Vue from \\"vue\\";\\n  import Vuex from \\"vuex\\";\\n  Vue.use(Vuex);\\n\\n  const store = new Vuex.Store({\\n    state: {\\n      myName: \\"Emma\\",\\n      isLoading: false,\\n    },\\n  });\\n\\n  export default store;\\n  ```\\n\\n- 使用：/app.vue\\n\\n  ```html\\n  <template>\\n    <div id=\\"app\\">\\n      <p>My Name is {{ myName }}</p>\\n      <p>isLoading: {{ isLoading }}</p>\\n    </div>\\n  </template>\\n\\n  <script>\\n    import { mapState } from \\"vuex\\";\\n    export default {\\n      name: \\"app\\",\\n      computed: {\\n        // 陣列寫法\\n        ...mapState([\\"isLoading\\", \\"myName\\"])\\n        // 物件寫法\\n        ...mapState({\\n          isLoading: state => state.isLoading,\\n          myName:  state => state.myName,\\n        })\\n      }\\n    };\\n  <\/script>\\n  ```\\n\\n### Getters\\n\\n- 可帶參數：state, getters\\n- 定義：/store.js\\n\\n  ```javascript\\n  import Vue from \\"vue\\";\\n  import Vuex from \\"vuex\\";\\n  Vue.use(Vuex);\\n\\n  const store = new Vuex.Store({\\n    state: {\\n      myName: \\"Emma\\",\\n    },\\n    getters: {\\n      // 只有一個參數的箭頭函式寫法\\n      newName: (state) => {\\n        return state.myName + \\" lin\\";\\n      },\\n    },\\n  });\\n\\n  export default store;\\n  ```\\n\\n- 使用：/app.vue\\n\\n  ```html\\n  <template>\\n    <div id=\\"app\\">\\n      <p>My New Name is {{ newName }}</p>\\n    </div>\\n  </template>\\n\\n  <script>\\n    export default {\\n      name: \\"app\\",\\n      computed: {\\n        newName() {\\n          return this.$store.getters.newName;\\n        },\\n      },\\n    };\\n  <\/script>\\n  ```\\n\\n加上參數 getters 表示可以呼叫別的 getters 來用\\n\\n- 定義：/store.js\\n\\n  ```javascript\\n  import Vue from \\"vue\\";\\n  import Vuex from \\"vuex\\";\\n  Vue.use(Vuex);\\n\\n  const store = new Vuex.Store({\\n    state: {\\n      myName: \\"Emma\\",\\n    },\\n    getters: {\\n      newName: (state) => {\\n        return state.myName + \\" lin\\";\\n      },\\n      // 這邊呼叫下面那個getters\\n      anotherName: (state, getters) => {\\n        return getters.nickName;\\n      },\\n      nickName: (state) => {\\n        return state.myName + \\" Watson\\";\\n      },\\n    },\\n  });\\n\\n  export default store;\\n  ```\\n\\n- 使用：/app.vue\\n\\n  ```html\\n  <template>\\n    <div id=\\"app\\">\\n      <p>My New Name is {{ newName }}</p>\\n      <p>or you can call me {{ anotherName }}</p>\\n    </div>\\n  </template>\\n\\n  <script>\\n    export default {\\n      name: \\"app\\",\\n      computed: {\\n        newName() {\\n          return this.$store.getters.newName;\\n        },\\n        anotherName() {\\n          return this.$store.getters.anotherName;\\n        },\\n      },\\n    };\\n  <\/script>\\n  ```\\n\\n### mapGetters\\n\\n定義和上面的 store.js 相同，差異在 components 呼叫的時候\\n\\n- 使用：\\n\\n  ```javascript\\n  <script>\\n    import { mapGetters } from \\"vuex\\";\\n    export default {\\n      name: \\"app\\",\\n      computed: {\\n        // 陣列寫法\\n        ...mapGetters([\\"newName\\", \\"anotherName\\"])\\n        // 物件寫法\\n        ...mapGetters({\\n          newName: \\"newName\\",\\n          anotherName: \\"anotherName\\"\\n        })\\n      }\\n    };\\n  <\/script>\\n  ```\\n\\n### mutations\\n\\n可帶參數：state, payload\\n\\n- 使用：/app.vue\\n\\n  ```javascript\\n  methods: {\\n    reverse() {\\n      this.$store.commit(\\"Loaded\\");\\n    },\\n  }\\n  ```\\n\\n- with payload:\\n  通常 payload 可以用物件表示，就能更具描述性，但是要記得在 mutations 運算時，帶入的參數 payload 要加上參數物件的 key\\n\\n  - /app.vue\\n\\n    ```javascript\\n    store.commit(\\"addCounts\\", {\\n      amount: 10,\\n    });\\n    ```\\n\\n  - /store.js\\n\\n    ```javascript\\n    mutations: {\\n      addCounts (state, payload) {\\n        state.count += payload.amount\\n      }\\n    }\\n    ```\\n\\n  - 所以帶上 payload 的呼叫可以這樣使用：\\n\\n    ```javascript\\n    this.$store.commit(\\"addTimes\\", 10);\\n    // 或\\n    this.$store.commit({\\n      type: \\"addTimes\\",\\n      count: 2,\\n    });\\n    ```\\n\\n    物件 type 是必要的，其他可以隨意\\n\\n### mapMutations\\n\\n```javascript\\n<script>\\n  import { mapMutations } from \\"vuex\\";\\n  export default {\\n    name: \\"app\\",\\n    computed: {\\n      // 陣列寫法\\n      ...mapMutations([\\"Loaded\\", \\"addTimes\\"])\\n      // 物件寫法\\n      ...mapMutations({\\n        // add是component自定義的事件名稱，addTimes是mutations在store的名稱\\n        add: \'addTimes\'\\n      })\\n    }\\n  };\\n<\/script>\\n```\\n\\n使用 mapMutations，就要把 payload 直接帶入 template：\\n\\n```html\\n<button @click=\\"addTimes(2)\\">addTimes</button>\\n```\\n\\n**注意**：mutations 一定只能同步執行，action 才能執行非同步\\n\\n### actions\\n\\n- 可帶參數：\\n  - context: {commit, dispatch, state, getters, rootState, rootGetters}, payload\\n\\n上面描述 mutations 只能同步執行，action 執行非同步，意旨 axios 要在 Actions 裡面做，不可以在 mutations 裡面做。\\n\\n- 定義：/app.vue\\n\\n  ```javascript\\n  ClickedActions({ commit }, payload) {\\n  commit(\'addTimes\', payload)\\n  }\\n  ```\\n\\n- 使用：/app.vue\\n\\n  ```javascript\\n  methods: {\\n    add() {\\n      this.$store.dispatch(\\"ClickedActions\\",2);\\n    }\\n  }\\n  ```\\n\\n## 專案結構\\n\\n1. App 層級的狀態要在 state 集中管理\\n   > app 層級的意思是指：不會因為跨組件改變的狀態，如：登入資訊、購物車清單...等。\\n   >\\n   > 會因為跨組件改變的狀態，如：下拉式選單的開關狀態、商品列表...等。\\n2. 唯一改變 state 的方式只有 mutations，而且是同步執行\\n3. actions 才可以非同步執行\\n\\n```txt\\n|--index.js\\n|--main.js\\n|--api\\n|  |--...             // 後端 api\\n|--components         // 頁面\\n|  |--App.vue\\n|  |--...\\n|--store\\n   |--index.js        // 註冊 modules 並 export store\\n   |--actions.js      // 跨組件的 action\\n   |--mutations.js    // 跨組件的 mutations\\n   |--modules\\n      |--cart.js      // 購物車 model\\n      |--products.js  // 商品 model\\n```\\n","tocContent":"- [VueX 學習筆記](#vuex-學習筆記)\\n  - [什麼是 Vuex](#什麼是-vuex)\\n  - [帶入參數及呼叫方法](#帶入參數及呼叫方法)\\n    - [State](#state)\\n    - [mapState](#mapstate)\\n    - [Getters](#getters)\\n    - [mapGetters](#mapgetters)\\n    - [mutations](#mutations)\\n    - [mapMutations](#mapmutations)\\n    - [actions](#actions)\\n  - [專案結構](#專案結構)"}')},7581:function(n){"use strict";n.exports=JSON.parse("{\"name\":\"phpDoc.md\",\"content\":\"# phpDoc\\n\\n[自動編寫程式](https://github.com/barryvdh/laravel-ide-helper)\\n\\n## 通用註解寫法\\n\\n### 註解範例（普通程式文件，類別文件，函數文件，變量定義文件）\\n\\n```php\\n/**\\n * XXXXX的文件\\n *\\n * 功能1： xxx\\n * 功能2： xxx\\n *\\n * @file        $https://github.com/changgenglu/note/blob/master/phpDoc.md  $\\n * @package     core\\n * @author      Ivan <eatbreakfast2012@gmail.com>\\n * @version     V1.0.0\\n * @link        https://github.com/changgenglu/note/blob/master/phpDoc.md\\n */\\n```\\n\\n- `@file` 檔案位置：\\n\\n- `@version` 版本：\\n\\n- `@package` 是團隊事先定義好的，在 phpdocumentor 里同一 package 的文件可以給出跟蹤的鏈接。項目開發前需要對其定義。\\n\\n- `@link` 行後面接的地址是程式開發文檔的地址\\n\\n> 說明：以上自動更新版本及文件名需要設定 SVN，具體請自行搜尋 _'SVN 自動版本號'_\\n\\n### 類別註解，使用如下幾個 tag\\n\\n```php\\n/**\\n * xxxxx類\\n *\\n * 功能1：完成xxxx\\n * 功能2：完成xxxxx\\n *\\n * @author      Ivan <eatbreakfast2012@gmail.com>\\n * @access      public\\n * @abstract\\n */\\npublic class DemoClass {\\n //code...\\n}\\n```\\n\\n- `@access` (`public`|`private`) 標記類是私有的還是公用的。\\n- `@abstract`標記該類是個抽象類\\n\\n### 類別屬性宣告註解\\n\\n```php\\npublic class DemoClass {\\n\\n   /**\\n    * 當前頁碼\\n    *\\n    * @var integer\\n    */\\n    public $currentPageNumber;\\n\\n   /**\\n    * 私有變量使用下劃線開頭\\n    *\\n    * @var string\\n    */\\n    private $_instance;\\n}\\n```\\n\\n### 普通函數和類別中的函數註解\\n\\n```php\\n/**\\n * 獲得頭貼地址\\n *\\n * @author Ivan <eatbreakfast2012@gmail.com>\\n *\\n * @param string  $imageName  圖片檔案名\\n * @param integer $size     檔案大小\\n *\\n * @return string\\n */\\nfunction getAvatarUrl($imageName, $size = 80)\\n{\\n    return sprintf(SITE_URL . '/service/images/cropped_%s/'.$imageName, $size);\\n}\\n\\n```\\n\\n順序按照 author、param、return 來放，**區塊間空行**。\\n\\n### 程式段落註解\\n\\n段落註解和邏輯註解使用如下方式\\n\\n```php\\n/**\\n * 1 如果$_GET['do']等於buy,則購買條碼\\n */\\nif($_GET['do'] == 'buy')\\n{\\n    // 1.1 驗證用戶提交變量是否合法\\n    if($_POST['strCodeNum'])\\n    {\\n\\n    }\\n    // 1.2 驗證用戶提交的碼是否可以購買\\n    // 1.3 ..................\\n} // end if\\n\\n/**\\n * 2 如果$_GET['do']等於list,顯示用戶選擇的條碼\\n */\\nif($_GET['do'] == 'list')\\n{\\n    // 2.1 驗證用戶提交變量是否合法\\n    if($_POST['strCodeNum'])\\n    {\\n\\n    }\\n    // 2.2 驗證用戶提交的碼是否可以購買\\n\\n    // 2.3 ..................\\n} // end if\\n```\\n\\n## PHPdoc 規範\\n\\n[WIKI 上的 PHPDoc](http://en.wikipedia.org/wiki/Phpdoc)\\n\\n| 標記        | 用途                              | 描述                                                                     |\\n| ----------- | --------------------------------- | ------------------------------------------------------------------------ |\\n| @abstract   |                                   | 抽象類的變量和方法                                                       |\\n| @access     | public, private or protected      | 文檔的訪問、使用權限. @access private 表明這個文檔是被保護的。           |\\n| @author     | Ivan <eatbreakfast2012@gmail.com> | 文檔作者                                                                 |\\n| @copyright  | 名稱 時間                         | 文檔版權信息                                                             |\\n| @deprecated | version                           | 文檔中被廢除的方法                                                       |\\n| @deprec     |                                   | 同 @deprecated                                                           |\\n| @example    | /path/to/example                  | 文檔的外部保存的示例文件的位置。                                         |\\n| @exception  |                                   | 文檔中方法拋出的異常，也可參照 @throws.                                  |\\n| @global     | 類型：$globalvarname              | 文檔中的全局變量及有關的方法和函數                                       |\\n| @ignore     |                                   | 忽略文檔中指定的關鍵字                                                   |\\n| @internal   |                                   | 開發團隊內部信息                                                         |\\n| @link       | URL                               | 類似於 license 但還可以通過 link 找到文檔中的更多個詳細的信息            |\\n| @name       | 變量別名                          | 為某個變量指定別名                                                       |\\n| @magic      |                                   | phpdoc.de compatibility                                                  |\\n| @package    | 封裝包的名稱                      | 一組相關類、函數封裝的包名稱                                             |\\n| @param      | 如 $username 用戶名               | 變量含義註解                                                             |\\n| @return     | 如 返回 bool                      | 函數返回結果描述，一般不用在 void（空返回結果的）的函數中                |\\n| @see        | 如 Class Login()                  | 文件關聯的任何元素（全局變量，包括，頁面，類，函數，定義，方法，變量）。 |\\n| @since      | version                           | 記錄什麽時候對文檔的哪些部分進行了更改                                   |\\n| @static     |                                   | 記錄靜態類、方法                                                         |\\n| @staticvar  |                                   | 在類、函數中使用的靜態變量                                               |\\n| @subpackage |                                   | 子版本                                                                   |\\n| @throws     |                                   | 某一方法拋出的異常                                                       |\\n| @todo       |                                   | 表示文件未完成或者要完善的地方                                           |\\n| @var        | type                              | 文檔中的變量及其類型                                                     |\\n| @version    |                                   | 文檔、類、函數的版本信息                                                 |\\n\\nPHPDoc 註解實例：\\n\\n```php\\n<?php\\n /**\\n  * start page for webaccess\\n  *\\n  * PHP version 5\\n  *\\n  * @category  PHP\\n  * @package   PSI_Web\\n  * @author    Michael Cramer <BigMichi1@users.sourceforge.net>\\n  * @copyright 2009 phpSysInfo\\n  * @license   http://opensource.org/licenses/gpl-2.0.php GNU General Public License\\n  * @version   SVN: $Id: class.Webpage.inc.php 412 2010-12-29 09:45:53Z Jacky672 $\\n  * @link      http://phpsysinfo.sourceforge.net\\n  */\\n  /**\\n  * generate the dynamic webpage\\n  *\\n  * @category  PHP\\n  * @package   PSI_Web\\n  * @author    Michael Cramer <BigMichi1@users.sourceforge.net>\\n  * @copyright 2009 phpSysInfo\\n  * @license   http://opensource.org/licenses/gpl-2.0.php GNU General Public License\\n  * @version   Release: 3.0\\n  * @link      http://phpsysinfo.sourceforge.net\\n  */\\n class Webpage extends Output implements PSI_Interface_Output\\n {\\n     /**\\n      * configured language\\n      *\\n      * @var String\\n      */\\n     private $_language;\\n\\n     /**\\n      * configured template\\n      *\\n      * @var String\\n      */\\n     private $_template;\\n\\n     /**\\n      * all available templates\\n      *\\n      * @var Array\\n      */\\n     private $_templates = array();\\n\\n     /**\\n      * all available languages\\n      *\\n      * @var Array\\n      */\\n     private $_languages = array();\\n\\n     /**\\n      * check for all extensions that are needed, initialize needed vars and read config.php\\n      */\\n     public function __construct()\\n     {\\n         parent::__construct();\\n         $this->_getTemplateList();\\n         $this->_getLanguageList();\\n     }\\n\\n     /**\\n      * checking config.php setting for template, if not supportet set phpsysinfo.css as default\\n      * checking config.php setting for language, if not supported set en as default\\n      *\\n      * @return void\\n      */\\n     private function _checkTemplateLanguage()\\n     {\\n         $this->_template = trim(PSI_DEFAULT_TEMPLATE);\\n         if (!file_exists(APP_ROOT.'/templates/'.$this->_template.\\\".css\\\")) {\\n             $this->_template = 'phpsysinfo';\\n         }\\n\\n         $this->_language = trim(PSI_DEFAULT_LANG);\\n         if (!file_exists(APP_ROOT.'/language/'.$this->_language.\\\".xml\\\")) {\\n             $this->_language = 'en';\\n         }\\n     }\\n\\n     /**\\n      * get all available tamplates and store them in internal array\\n      *\\n      * @return void\\n      */\\n     private function _getTemplateList()\\n     {\\n         $dirlist = CommonFunctions::gdc(APP_ROOT.'/templates/');\\n         sort($dirlist);\\n         foreach ($dirlist as $file) {\\n             $tpl_ext = substr($file, strlen($file) - 4);\\n             $tpl_name = substr($file, 0, strlen($file) - 4);\\n             if ($tpl_ext === \\\".css\\\") {\\n                 array_push($this->_templates, $tpl_name);\\n             }\\n         }\\n     }\\n\\n     /**\\n      * get all available translations and store them in internal array\\n      *\\n      * @return void\\n      */\\n     private function _getLanguageList()\\n     {\\n         $dirlist = CommonFunctions::gdc(APP_ROOT.'/language/');\\n         sort($dirlist);\\n         foreach ($dirlist as $file) {\\n             $lang_ext = substr($file, strlen($file) - 4);\\n             $lang_name = substr($file, 0, strlen($file) - 4);\\n             if ($lang_ext == \\\".xml\\\") {\\n                 array_push($this->_languages, $lang_name);\\n             }\\n         }\\n     }\\n\\n     /**\\n      * render the page\\n      *\\n      * @return void\\n      */\\n     public function run()\\n     {\\n         $this->_checkTemplateLanguage();\\n\\n         $tpl = new Template(\\\"/templates/html/index_dynamic.html\\\");\\n\\n         $tpl->set(\\\"template\\\", $this->_template);\\n         $tpl->set(\\\"templates\\\", $this->_templates);\\n         $tpl->set(\\\"language\\\", $this->_language);\\n         $tpl->set(\\\"languages\\\", $this->_languages);\\n\\n         echo $tpl->fetch();\\n     }\\n }\\n```\\n\",\"tocContent\":\"\"}")},6891:function(n){"use strict";n.exports=JSON.parse('{"name":"併發控制.md","content":"# 併發控制\\n\\n> 悲觀併發控制(悲觀鎖，Pessimistic Concurrency Control / PCC)\\n>\\n> 樂觀併發控制(樂觀鎖，Optimistic Concurrency Control / OCC)\\n\\n## 悲觀鎖\\n\\n對於 \\"資料被外界修改\\" 持保守態度，因此在整個資料處理過程中，將資料處於鎖定狀態，進以阻止一個事務以影響其他用戶的方式來修改資料。\\n\\n在資料庫中，悲觀鎖的流程為：\\n\\n1. 在對任意紀錄進行修改前，先嘗試為該紀錄加上排他鎖(exclusive locking)。\\n2. 如果加鎖失敗，說明該筆資料正在被修改，那麼當前請求可能要等待或者拋出異常，具體影響方式由開發者根據實際需求決定。\\n3. 若成功加鎖，那就可以對記錄進行修改，待請求完成後就會解鎖了。\\n4. 期間若有其他對記錄做修改或加排他鎖的操作，都會等待解鎖後或直接拋出異常。\\n\\n### MySQL InnoDB 使用悲觀鎖\\n\\n使用悲觀鎖，需先將 mysql 自動提交的屬性關閉，因為 mysql 預設使用 autocommit 模式。\\n\\nautocommit 模式：當執行一個更新操作後，mysql 會立刻將結果進行提交，若要關閉 `set autocommit=0`, `set autocommit=false`。\\n\\n```sql\\n-- 開始請求(三選一)\\nbegin; / begin work; / start transaction;\\n\\n-- 查詢出商品訊息\\nselect status from t_goods where id=1 for update;\\n\\n-- 根據商品訊息產生訂單\\ninsert into t_orders (id, goods_id) values (null, 1);\\n\\n-- 修改商品 status 為 2\\nupdate t_goods set status=2;\\n\\n-- 提交請求\\ncommit; / commit work;\\n```\\n\\n使用 `select...for update` 的方式，通過開啟排他鎖的方式實現悲觀鎖，此時在 t_goods 資料表中，id 為 1 的資料會被鎖定，其他的請求必須待本次請求提交後才能執行。\\n注意，使用 `select...for update` 會把數據鎖住，須注意鎖的級別，MySQL InnoDB 預設為行級鎖(註 1)。行級鎖是基於所索引的，若一條 sql 語句未使用索引，則 mysql 會使用表級鎖(註 2)將整張資料表鎖住。\\n\\n**註 1**：行級鎖(row-level locking)， mysql 中鎖定的最小單位，只針對目前操作的資料該行進行加鎖。行鎖可大幅減低資料庫操作的衝突，缺點為：開銷大、加鎖慢、會出現死鎖。\\n**註 2**：表級鎖(table-level locking)， mysql 中最大的鎖定單位，會將目前操作的整張表進行加鎖，開銷小、加鎖快、不會出現死鎖，但發出鎖衝突的機率最高。\\n**註 3**：死鎖(deadlock)，兩個或多個執行緒由於互相等待，而永遠被阻塞的情況。\\n\\n### 優點與不足\\n\\n悲觀併發控制實際採取 \\"先取鎖再訪問\\" 的保守策略。在效率方面，處理加鎖的機制會讓資料庫產生額外的負擔，還有增加產生死鎖的機會。也增加了併行性，一個請求若鎖定了某行資料，其他請求則需等待此請求結束才可以處理該行資料\\n\\n## 樂觀鎖\\n\\n樂觀鎖假設多用戶併發的請求，不會互相影響。請求可以在不產生鎖的情況下，處理各自影響的那部分數據。在提交資料前，每個請求會先檢查在該請求讀取數據後，有沒有其他請求又改了該筆資料。如果其他請求有更新該筆資料，正在提交的請求會進行回滾。\\n\\n相較於悲觀鎖而言，樂觀鎖認為數據一般情況下不會產生衝突，鎖鎖在資料進行提交更新的時候，才會最資料是否衝突進行檢查。當發現衝突時，返回錯誤訊息，讓使用者決定如何處理。\\n大多實現樂觀鎖的方式為記錄資料版本，並不會對資料表進行加鎖。\\n\\n實現紀錄資料版本有兩種方式，一為使用版本號，二為使用時間戳。\\n\\n### 使用版本號\\n\\n可以在資料初始化時指定一個版本號，每次對資料的更新操作都會對版號進行 +1，並判斷目前版號是不是該筆資料的最新版號。\\n\\n```sql\\n-- 查詢出商品訊息\\nselect (status, status, version) from t_goods where id=#{id};\\n\\n-- 根據商品訊息產生訂單\\n-- 修改商品 status 為 2\\n\\nupdate t_goods set status=2, version=version+1\\nwhere id=#{id} and version=#{version};\\n```\\n\\n### 優點與不足\\n\\n樂觀併發控制相信請求之間的資料競爭(data race)的機率小，因此直到提交時才進行鎖定，因此不會產生任何鎖與死鎖問題。但仍然有可能遇到不可預期的結果，例如：兩個請求都讀取資料庫的某一行並加以修改後寫入資料庫，此時就會發生資料衝突。\\n\\n## 鎖定形式\\n\\n### 共享鎖\\n\\n又稱為讀鎖，其他的使用者可以併發讀取資料，但是無法修改和刪除，若一請求對某資料增加共享鎖，則其他請求只能對該資料增加共享鎖，不能加排他鎖。\\n\\n### 排他鎖\\n\\n又稱寫鎖，獨佔鎖。若一事務對某資料加上排他鎖，則只允許此一事務讀取和修改此資料，其他任何類型的事務都不能在此一資料加上任何類型的鎖，直到此事務釋放資料上的鎖。保證其他事務在上鎖期間不能讀取或修改該筆資料。\\n","tocContent":""}')},8515:function(n){"use strict";n.exports=JSON.parse('{"name":"前端工具.md","content":"# 前端開發工具\\n\\n## 假圖生產器：Lorem Picsum\\n\\n### 使用方法\\n\\n- 指定長寬\\n\\n  ```html\\n  <img src=\\"https://picsum.photos/<length>/<width>\\" />\\n  ```\\n\\n- random 生成不同圖片\\n\\n  ```html\\n  <img src=\\"https://picsum.photos/80?random=1\\" />\\n  <img src=\\"https://picsum.photos/80?random=2\\" />\\n  <img src=\\"https://picsum.photos/80?random=3\\" />\\n  ```\\n\\n  若沒有帶 random 參數，在相同的 url 之下，同一次頁面載入時，每一張圖片都會是一樣的。\\n\\n- grayscale 生成灰階圖片\\n\\n  ```html\\n  <img src=\\"https://picsum.photos/80?grayscale\\" />\\n  ```\\n\\n- blur 生成模糊濾鏡圖片\\n\\n  ```html\\n  <img src=\\"https://picsum.photos/80?blur\\" />\\n  ```\\n","tocContent":""}')},418:function(n){"use strict";n.exports=JSON.parse('{"name":"在 GCP 部署 laravel 專案.md","content":"# 在 GCP 部署 laravel 專案\\n\\n> [執行環境設定](https://bugswarehouse.blogspot.com/2018/07/gcpgceubuntuapachelaravel56.html)\\n>\\n> - Ubuntu 20.04.1 LTS \\\\n \\\\l\\n> - Apache/2.4.41 (Ubuntu)\\n> - mysql Ver 8.0.29-0ubuntu0.20.04.3 for Linux on x86_64 ((Ubuntu))\\n> - PHP 7.4.3\\n> - git 2.25.1\\n> - Composer 2.0.12\\n\\n## 設置專案\\n\\n### clone git repo\\n\\n將目錄切換到`/srv/www`，將託管在 git repo 的專案 clone 下來並依 laravel 上線環境設定流程執行。\\n一般而言會將文件名稱設為域名。\\n將目錄切換到 Apache 主機放公開程式的地方`/var/www`，將設定軟連結指向專案位置\\n\\n```bash\\nln -s /srv/www/your_project.com /var/www/your_project.com\\n```\\n\\n### 上線環境設定\\n\\n1. 安裝 compsoer 排除 dev 項目\\n\\n   ```bash\\n   composer install --optimize-autoloader --no-dev\\n   ```\\n\\n2. `.env`設定轉為線上並且關閉錯誤提示\\n\\n   ```php\\n   APP_NAME=專案名稱\\n   APP_ENV=production\\n   APP_KEY=\\n   APP_DEBUG=false\\n   APP_URL=https://正式網址\\n   ```\\n\\n3. 設定快取\\n\\n   ```bash\\n   php artisan config:cache\\n\\n   #　下次更新程式記得更新config\\n   php artisan config:clear\\n   ```\\n\\n4. Composer 緩存\\n\\n   ```bash\\n   composer dumpautoload -o\\n   # 每次更新 composer install 後，都要再執行一次\\n   ```\\n\\n5. 建立 keygen\\n\\n   ```bash\\n   php artisan key:generate\\n   ```\\n\\n6. 執行資料庫 migrate (須注意資料庫狀態)\\n\\n   ```bash\\n   # 遷移資料表\\n   php artisan migrate\\n\\n   # 填充資料\\n   php artisan db:seed\\n   ```\\n\\n7. 障礙排除\\n\\n   - 清除快取\\n\\n   ```bash\\n   php artisan config:clear\\n   ```\\n\\n   - migrate 指令\\n\\n   ```bash\\n   # 還原 --step 此參數為後退多少版本\\n   php artisan migrate:rollback\\n   php artisan migrate:rollback --step=5\\n\\n   # 重置所有migration\\n   php artisan migrate:refresh\\n\\n   # 重置所有migration，並填充資料\\n   php artisan migrate:refresh --seed\\n   ```\\n\\n### 設定專案文件夾的權限\\n\\n```bash\\nsudo chgrp -R www-data /srv/www/your_project.com\\nsudo chmod -R 775 /srv/www/your_project.com/storage\\n```\\n\\n## 2. 設定 Apache\\n\\n- 設定 Apache server\\n\\n```bash\\ncd /etc/apache2/sites-available\\ncp 000-default.conf your_project.com.conf\\n```\\n\\n- 編輯 conf 文件\\n  - ServerName : 設定伺服器 Domain Name ，此名稱必須已經註冊\\n  - ServerAdmin : 設定虛擬主機的管理者信箱，不一定要和本機的網站管理者相同\\n  - ServerAlias : 設定伺服器網域別名\\n  - DocumentRoot : 指定虛擬主機的網站主目錄\\n  - ErrorLog : 設定 error_log 所存放的路徑\\n  - CustomLog : 設定 access_log 所存放的路徑\\n\\n```vim\\n<VirtualHost *:80>\\n    ServerName your_project.com\\n\\n    ServerAdmin webmaster@localhost\\n    DocumentRoot /var/www/your_project.com/public\\n\\n    <Directory /var/www/your_project.com>\\n        AllowOverride All\\n    </Directory>\\n\\n    ErrorLog ${APACHE_LOG_DIR}/error.log\\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\\n</VirtualHost>\\n```\\n\\n- 啟用 Apache 站點\\n\\n```bash\\n# 關閉預設站點\\nsudo a2dissite 000-default.conf\\n\\n# 啟用新站點\\nsudo a2ensite your_project.com.conf\\n\\n# 首次設定需開啟\\nsudo a2enmod rewrite\\n\\n# 重啟Apache\\nsudo service apache2 restart\\n```\\n\\n## 參考資料\\n\\n[Run Laravel on Google Compute Engine](https://medium.com/imarishwa-solutions/run-laravel-on-google-compute-engine-b0403a6a9240)\\n\\n[GCP/GCE/Ubuntu/Apache/Laravel5.6 踩雷筆記](https://bugswarehouse.blogspot.com/2018/07/gcpgceubuntuapachelaravel56.html)\\n\\n## 延伸閱讀\\n\\n[詳解 Ubuntu/CentOS 下 Apache 多站點配置](https://codertw.com/%E4%BC%BA%E6%9C%8D%E5%99%A8/377669/)\\n\\n[Apache 之——多虛擬主機多站點配置的兩種實現方案](https://www.796t.com/content/1546761795.html)\\n\\n[ubuntu 設定 apache 部署多個站點](https://www.796t.com/content/1545633208.html)\\n\\n[SSL 憑證設定](https://ithelp.ithome.com.tw/articles/10081759)\\n\\n[輕鬆部署 Laravel 應用](https://learnku.com/blog/Wi1dcard/tags/easy-deployment-of-laravel-applications_50034)\\n","tocContent":""}')},3606:function(n){"use strict";n.exports=JSON.parse('{"name":"多線程與多進程.md","content":"# 多執行緒與多進程\\n\\n> 進程是資源分配的最小單位，執行緒是 CPU 調度的最小單位\\n\\n## 基本概念\\n\\n### 程式 (程序/Program)\\n\\n為完成特地任務，用某種語言編寫成的一組指令的集合。指的是一段靜態的程式碼，靜態的物件。\\n\\n### 程序 (進程/Process)\\n\\n為執行程式一次的過程，或是正在執行的一個程式。是一個動態的過程：他有自己生成、存在與消亡的過程。\\n\\n程式是靜態的，程序是動態的，程序作為資源分配的單位，系統在執行時會為每個程序，分配不同的內存區域。\\n\\n### 執行緒 (線程/thread)\\n\\n程序可以進一步細分為執行緒，是一個程式內部的一個次程式。\\n\\n- 若一個程序同一時間並行執行多個執行緒，就是支援多執行緒。\\n- 執行緒作為調度和執行的單位，每個執行緒擁有獨立的\\\\*執行棧(execution stack)和\\\\*程式計數器(Program Counter)，執行緒切換的開銷小。\\n- 多個執行緒，共享一個程序中結構：方法區、堆疊。\\n\\n- 註：\\n  - 執行堆疊(執行棧/execution stack) 儲存有關正在執行的子程式其訊息的堆疊，在呼叫任何子程式時，主程式都必須暫存子程式執行完畢後應該返回的地址。因此若被呼叫的子程式還要呼叫其他子程式，其自身返回的地址就必須存入執行堆疊，在其自身執行完畢後再取出。\\n  - 程式計數器(Program Counter)\\n    - 紀錄程式執行中的狀態\\n    - 記錄下一個指令的位元址\\n    - 紀錄程式執行完畢的指令\\n    - 紀錄程式執行完成的時間\\n\\n## 多執行緒與多進程的選擇與區別\\n\\n|                | 多進程                                             | 多執行緒                                                     | 結論       |\\n| -------------- | -------------------------------------------------- | ------------------------------------------------------------ | ---------- |\\n| 數據共享、同步 | 數據共享複雜，需要用到 IPC；數據是分開的，同步簡單 | 因為共享進程數據，數據共享簡單，但也因為這個原因導致同步複雜 | 各有優勢   |\\n| 內存、CPU      | 佔用內存多，切換複雜，CPU 利用率低                 | 佔用內存少，切換簡單，CPU 利用率高                           | 執行緒優勢 |\\n| 建立銷毀、切換 | 建立與銷毀切換複雜，速度慢                         | 建立與銷毀，切換簡單，速度快                                 | 執行緒優勢 |\\n| 程式設計、除錯 | 程式設計簡單，除錯簡單                             | 程式設計複雜，除錯複雜                                       | 進程優勢   |\\n| 可靠性         | 進程間不會互相影響                                 | 一個執行緒掛掉教會導致整個進程掛掉                           | 進程優勢   |\\n| 分布式         | 適應於多核、多機分布式，擴展到多台機器比較簡單     | 適應於多核分布式                                             | 進程優勢   |\\n\\n### 選擇情境\\n\\n- 需要頻繁建立與銷毀 => 多執行緒\\n\\n  - 常見於 web 伺服器，一個新的連線建立一個執行緒，連線斷了就銷毀執行緒。\\n\\n- 需要進行大量計算 => 執行緒\\n\\n  - 消耗大量 CPU，切換頻繁，如：圖像處理、算法處理。\\n\\n- 強相關的處理 => 執行緒、弱相關的處理 => 進程\\n\\n  - 一般 server 的任務，如：`資料收發`、`資料處理`。`資料收發`與`資料處理`為弱相關的任務，而`資料處理`又可分為`資料解碼`、`業務處理`，這兩個任務相較之下關聯性較強。因此`資料收發`與`資料處理`可以分進程設計，`資料解碼`與`業務處理`可以分執行緒設計。\\n\\n- 可能要擴展到多機分布的 => 進程、多核分布的 => 執行緒\\n\\n## PHP 環境下的多程序與多執行緒\\n\\nPHP 為單進程同步模型，一個請求對應一個進程，I/O(input/output)是同步阻塞的，\\n","tocContent":""}')},4859:function(n){"use strict";n.exports=JSON.parse('{"name":"撰寫 API 文件.md","content":"# 撰寫 API 文件\\n\\n> 文件內容包括：用途，路由、參數、回傳值\\n> 更詳細的會包括：參數放置的位置(route, queryString, body)、參數是否必填，回傳的 JSON 範例\\n\\n範例\\n\\n```markdown\\n## GET /card/{id}\\n\\n**查詢指定編號的卡片**\\n\\n### Parameter\\n\\n- Route\\n  - `id (int, required)` 卡片編號\\n\\nexample: https://exampleProjN.com/api/card/1\\n\\n### Response\\n\\n200: 回傳對應的卡片\\n{\\n\\"id\\": 0,\\n\\"name\\": \\"string\\",\\n\\"description\\": \\"string\\",\\n\\"attack\\": 0,\\n\\"health\\": 0,\\n\\"cost\\": 0\\n}\\n\\n404: 找不到\\n```\\n\\n### postman 的描述區域\\n\\n- API 用途\\n- 參數說明，除了 request body 說明之外，也能說明 uri 參數從哪來的。\\n- 成功或失敗案例的說明：因為目前我還不知道怎麼在 Response 加上註解。\\n- 別名，類似中文名稱。\\n\\n## 編輯房間\\n\\n### 用途\\n\\n- 編輯房間\\n- 同時處理增、刪、修動作\\n- 可以陣列傳入 room_id\\n\\n### header\\n\\n|      key      |        值        | 備註  |\\n| :-----------: | :--------------: | :---: |\\n| Authorization | Bearer {{token}} | token |\\n\\n### 參數\\n\\n|   key   |   值   |             驗證規則              |\\n| :-----: | :----: | :-------------------------------: |\\n| account | string |             required              |\\n|  role   | string | required, string, in:member,guest |\\n| room_id | array  |     required, exists:rooms,id     |\\n\\n./postman_doc_gen [C:\\\\Users\\\\RD\\\\Desktop\\\\V5-Cloud.postman_collection.json] -o [C:\\\\Users\\\\RD\\\\Desktop]\\n","tocContent":""}')},1187:function(n){"use strict";n.exports=JSON.parse('{"name":"數位憑證(SSL)要錢，誰還要數位憑證？.md","content":"# 數位憑證(SSL)要錢，誰還要數位憑證？\\n\\n> 目前 Chrome 全面在未採用 HTTPS 加密的網站，顯示紅色的不安全警告，一律視為不安全。\\n\\n## 免費 SSL VS. 付費 SSL\\n\\n### 1. 憑證公信力\\n\\n免費的 SSL 身分驗證不夠確實，可能導致釣魚網站也能冒名安裝其他業者的憑證，且被瀏覽器發現的話，更將會全面否定此間憑證供應商的憑證公信力，同時撤回相同 SSL 的其他網站安全認可。\\n\\n### 2. 網站身分的驗證方式\\n\\n免費的數位憑證通常只採電子郵件驗證。而付費的憑證，依付費方案類型的不同，會有更加嚴謹的驗證方式，也會加入第三方的驗證，以避免憑證誤頒的狀況發生。\\n\\n### 3. 憑證有效期限\\n\\n付費憑證因為檢驗機制完整且嚴謹，所以通常具備多年方案。\\n\\n### 4. 企業名稱揭示\\n\\n付費 SSL 會完整顯示企業資訊，增強品牌安全公信力。\\n\\n### 5. 損害賠償責任\\n\\n根據電子簽章法規定，因此無論是國內外憑證業者，均有制定損害賠償金額。若網站在有安裝此憑證下資料仍不幸遭竊，將有對應理賠金額。\\n\\n### 6. 憑證安裝協助\\n\\n付費 SSL 提供售後服務或是客服支援，協助 SSL 安裝導入。\\n\\n### 7. 多網域使用限制\\n\\n付費 SSL 則可依據企業需求，升級子網域與跨網域方案\\n\\n### 8. 憑證的安全標章\\n\\n付費 SSL 會提供安全標章供用戶置入於網站，提高網站信任感。\\n\\n### 9. 憑證供應商對於資安的重視與防護\\n\\n付費 SSL 具備完整資安防護機制\\n","tocContent":""}')},4171:function(n){"use strict";n.exports=JSON.parse('{"name":"物聯網.md","content":"# 物聯網\\n\\n## 物聯網的架構\\n\\n主要可以分為三層\\n\\n- 感知層\\n- 網路層\\n- 應用層\\n\\n### 感知層：物聯網的基礎\\n\\n各式各樣的感測器 (Sensor) 將擷取到的信號，透過 TCP/IP、RS485、RS232、USB、RFID、ZigBee、Bluetooth 等傳輸協定轉送給網路層\\n\\n- 關鍵技術\\n  - 無線感測技術\\n    - 加速度感測、濕度感測器、壓力感測器、位移感測器......\\n  - 辨識技術\\n    - RFID 辨識\\n    - 一維條碼\\n    - QR code\\n\\n### 網路層：資料處理集送地\\n\\n處理感知層蒐集到的資料進行基本的資料交換，判斷是要送往雲端或伺服器，亦或是直接採取適當的動作。這一層通常會有閘道器(gateway)來將不同的通訊技術結合，例如感測器透過 zigbee 傳出的訊號，但一般手機無法接收這種訊號。此時 gateway 會將接收到的訊息翻譯後，再透過 wifi 傳給手機，稱為異質網路整合。或提供進入雲端之後，大眾經常會用到的服務：搜尋引擎、網路硬碟、web mell、web office、GS 等\\n\\n- 關鍵技術\\n  - 有線網路技術\\n    - 電信網\\n    - 有線電視網\\n    - 電腦網路\\n  - 無線網路技術\\n  - body area networks\\n    - 以人為中心，服務範圍不超過兩公尺\\n    - 標準協定：IEEE 802.15.6\\n  - Personal Areas Networks\\n    - 短距離應用在家庭環境中，服務範圍不超過 10 公尺\\n    - IEEE 標準協定： Zigbee, Bluetooth, UWB\\n  - Wireless Local Areas Networks\\n    - 介於子網路及外部網路之間\\n    - 標準協定：IEEE 802.11\\n  - Metropolitan Area Network\\n    - 介於 LAN 和 WAN 之間能傳輸語音與資料的公用網路，服務範圍 2 到 4 公里\\n    - 標準協定：IEEE 802.16\\n  - 3G(3rd-generation)\\n    - 是指支持高速數據傳輸的細胞移動通訊技術。3G 服務能夠同時傳送聲音（通話）及數據資訊（電子郵件、即時通訊等）。3G 的 代表特徵是 提供高速數據業務，速率一般在幾百 kpbs 以上\\n  - LTE(Long Term Evolution)\\n  - 資料互通性\\n  - 雲端處理技術\\n\\n### 應用層：數據分析與應用\\n\\n將前面感知層蒐集到的資料依照不同的需求、不同領域轉化成實際的應用，現在常聽到的大數據、人工智慧在這層面扮演很重要的角色。\\n\\n- 從家庭及個人的食、衣、住、行、育、樂，乃至工業、農業、醫療、學習、及企業/政府所需的環境監控、交通管理、資源管理等\\n- 將網路層蒐集到的資訊做後製處理\\n","tocContent":""}')},9099:function(n){"use strict";n.exports=JSON.parse('{"name":"網域設定.md","content":"# 網域設定學習筆記\\n\\n## 網址 URL\\n\\nURL 其實就是「網址」網站的位址。\\n\\n網址的構成是由通信協定與網域名稱構成。\\n\\n| 通信協定 |     網域名稱      |\\n| :------: | :---------------: |\\n|  https   | www.google.com.tw |\\n\\n## DNS 跟網域名稱(Domain Name)\\n\\nDNS 的全名叫做 Domain Name System，中文叫做「網域名稱系統」。\\n\\n他會記錄域名指向到哪一個 ip 位址，而他運作的方式為依照 URL 倒序，先問根主機 root 此域名的所屬位置\\n\\n如上面的例子 google.com.tw 為 .tw 因此知道是在台灣，接著問 google 的託管服務提供商位址，最後取得 ip。\\n\\n### 子網域\\n\\n最通用的例子就是在主網域前面加上 www，例如：www.google.com.tw\\n\\n但一般而言，不會將 www.google.com 和 google.com 設在不同網站上面，避免誤導。\\n\\n而子網域是可以自行命名的，一般多以數字與英文小寫來進行命名\\n\\n#### 以 Bluehost 為例\\n\\n在 bluehost 的後台，點選 domain 再點選 manage，可以看到裡面記錄的清單，清單中的名字都指向相同的 ip 位址。\\n","tocContent":""}')},2554:function(n){"use strict";n.exports=JSON.parse('{"name":"語意化版本.md","content":"# 語意化版本\\n\\n> 參考資料：\\n>\\n> [語意化版本 2.0.0](https://semver.org/lang/zh-TW/)\\n\\n## 摘要\\n\\n版本格式：主板號.次版號.修訂號，版號遞增規則如下：\\n\\n1. 主板號：當推出一個不相容的 API 修改。\\n2. 次版號：當推出一個向下相容的功能性新增。\\n3. 修訂號：當推出一個向下相容的問題修正。\\n\\n先行版號及版本編譯資訊可以加到 \\"主版本號.次版本號.修訂號\\" 的後面作為延伸。\\n\\n## 簡介\\n\\n當系統規模越大，加入的套件越多，就越有可能在未來的某一天發現自己身陷絕望之中。\\n\\n再相依性高的系統中發佈新版本套件，可能很快就會變成惡夢。如果相依性關係過高，可能面臨版本控制被鎖死的風險(必須對每一個相依套件改版，才能完成某次升級)。而如果相依性過於鬆散\\n，又將無法避免版本混亂(假設相容於未來的多個版本已超出合理數量)。當你專案的進展因為版本相依被鎖死或版本混亂變得不夠簡便和可靠，就意味你正處於相依性地獄中。\\n\\n而語意化版本就是這個問題的解決方案之一。這些規則是根據(但不局限於)各種已經封閉、開放源碼軟體所廣泛應用的慣例所設計。為了讓這套理論運作，你必須先定義好的公共 API。這可以透過文件定義或程式碼強制要求來實限。無論如何，這套 API 的清楚明瞭是十分重要的。一旦你定義了公共 API。這可以透過修改相應的版號來向大家說明你的修改。考慮使用這樣的版號格式：X.Y.Z(主版號.次版號.修訂號)修復問題但不影響 API 時，遞增修訂號；API 保持向下相容的新增修改時，地增次版號；進行不向下相同的修改時，遞增主版號。\\n\\n## 語意版本控制規範\\n\\n1. 使用語意化版本控制的軟體必須(MUST)定義公共 API。該 API 可以在程式碼中被定義出來或出現於嚴謹的文件內。無論何種形式都應該(SHOULD)力求精確且完整。\\n2. 標準的版號必須(MUST)採用 X.Y.Z 格式，其中 X、Y 和 Z 為非負的整數，且禁止(MUST NOT)在數字前方補零。X 為主版號，Y 為次版號，Z 為修訂號。每個元素必須(MUST)以數值來遞增。例如：1.9.1 -> 1.10.0 -> 1.11.0。\\n3. 標記版號的軟體發行後，禁止(MUST NOT)改變該版本軟體的內容。任何修改都必須(MUST)以新版本發行。\\n4. 主版本號為零(0.y.z)的軟體處於開發初始階段，一切都可以(MAY)隨時改變。這樣的公共 API 不應該(SHOULD NOT)被視為穩定版。\\n5. 1.0.0 的版號用於界定公共 API 的形成。這一版之後所有的版號更新都基於公共 API 及其修改內容。\\n6. 修訂號 z 必須(MUST)在只做了向下相容的修正時才遞增。這裡的修正指的是針對不正確結果而進行的內部修改。\\n7. 次版號 y 必須(MUST)在有向下相容的新功能出現時遞增。在任何公共 API 的功能被標記為棄用時，也必需(MUST)遞增。也可以(MAY)在內部程式有大量新功能或改進被加入時遞增，其中可以(MAY)包括修訂級別的改變。每當次版號遞增時，修訂號必須(MUST)歸零。\\n8. 主版號 x 必須(MUST)在有任何不相容的修改被加入公共 API 時遞增。其中可以(MAY)包括次版號及修訂級別的改變。每當主版號遞增時，次版號和修訂號必須(MUST)歸零。\\n9. 先行版號可以(MAY)被標註在修訂版之後，先加上一個連接號再加上一連串以句點分隔的標示符號來修飾。標示符號必須(MUST)由 ASCII 碼的英數字和連接號組成，且禁止(MUST NOT)留白。數字型的標示符號禁止(MUST NOT)在前方補零。先行版的優先級低於相關聯的標準版。被標上先行版號則表示這個版號並非穩定且可能無法達到相容的需求。範例：1.0.0-alpha、1.0.0-alpha.1、1.0.0-0.3.7、1.0.0-x.7.z.92、1.0.0-x-y-z.–。\\n10. 版本編譯資訊可以(MAY)被標註在修訂版或先行版之後，先加上一個加號再加上一連串以句點分隔的標示符號來修飾。標示符號必須(MUST)由 ASCII 的英數字和連接號組成，且禁止(MUST NOT)留白。當判斷版本的優先層級時，版本編譯資訊必須(MUST)被忽略。因此當兩個版本只有在版本編譯資訊有差別時，屬於相同的優先層級。範例：1.0.0-alpha+001、1.0.0+20130313144700、1.0.0-beta+exp.sha.5114f85、1.0.0+21AF26D3—-117B344092BD。\\n11. 版本的優先層級指的是不同版本在排序時如何比較。\\n    1. 判斷優先層級時，必須(MUST)把版本依序拆分為主版號、次版號、修訂號及先行版號後進行比較(版本資訊不在此比較的範疇中)。\\n    2. 由左到右依序比較每個標示符號，第一個差異值用來決定優先層級：主辦號、次版號及修訂號以數值比較。例如：1.0.0 < 2.0.0 < 2.1.0 < 2.1.1。\\n    3. 當主版號、次版號及修訂號都相同時，有先行版號者優先層級較低。例如：1.0.0-alpha < 1.0.0。\\n    4. 有相同主版號、次版號及修訂號的兩個先行版號，其優先必須(MUST)透過由左到右每個被句點分隔的標示符號來做比較，值到找到一個差異值後決。\\n","tocContent":""}')},1830:function(n){"use strict";n.exports=JSON.parse('{"name":"電腦概論.md","content":"# 電腦概論\\n\\n## 演算法\\n\\n> 參考資料：\\n>\\n> https://medium.com/appworks-school/%E5%88%9D%E5%AD%B8%E8%80%85%E5%AD%B8%E6%BC%94%E7%AE%97%E6%B3%95-%E8%AB%87%E4%BB%80%E9%BA%BC%E6%98%AF%E6%BC%94%E7%AE%97%E6%B3%95%E5%92%8C%E6%99%82%E9%96%93%E8%A4%87%E9%9B%9C%E5%BA%A6-b1f6908e4b80\\n>\\n> 在數學和電腦科學/算學之中，演算法/算法/算責法(algorithm)，為一個計算的具體步驟。常用於計算、資料處理、自動推理。精確而言，演算法式一個表示為`有限長`列表的`有效方法`。演算法應包含清晰定義的指令用於計算函式。\\n\\n### 簡單定義\\n\\n> 輸入 + 演算法 = 輸出\\n\\n輸入一個東西，並將其轉換成另一個東西的過程，就是演算法。假設輸入 2 和 3，若想得到 6，就必須在兩個參數中間加入乘號，讓 2\\\\*3=6。\\n\\n### 時間複雜度\\n\\n用來判斷演算法執行快慢的指標。通常用大寫 O 符號來記錄時間複雜度的快慢。\\n\\n舉一時間複雜度的例子：\\n若今天想要吃牛排，有兩個方法：叫外送或是自己煮。若今天除了牛排還想吃其他料理，外送一樣一次送到，直接開吃，但若是自己煮，煮越多道菜所需要的時間就越長。\\n\\n從上述例子可以得知：外送取得料理(output)的時間不會受到想吃的料理數量(input)影響，因此可以把此一演算法的時間複雜度記為 O(1)。\\n\\n而如果若選擇自己下廚，則時間複雜度會隨著料理的數量數量而呈倍數成長。此時可以將時間複雜度記為 O(n)。\\n\\n也就是說：`大寫 O 符號，是用來描述一個演算法在輸入 n 個東西時，總執行時間與 n 的關係`\\n\\n#### 時間複雜度實例\\n\\n在設計程式演算法時，通常會希望演算法至少比 O(n²) 還要快。\\n\\n執行時間 vs. 步驟次數\\n","tocContent":""}')}}]);
//# sourceMappingURL=about.80def768.js.map