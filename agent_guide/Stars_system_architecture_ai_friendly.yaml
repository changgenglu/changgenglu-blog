# AI-friendly representation of Stars system architecture
project: "Stars"
environment:
  podmanContainerName: "php8"
  projectPath: "/var/www/html/stars"
  platform: "WSL2/Linux"

actors:
  - name: "Stars"
    role: "Core game backend"
  - name: "Satellite"
    role: "Backend admin/UI layer"
  - name: "Puppy"
    role: "MG/AB vendor proxy"
  - name: "HQ"
    role: "Headquarters (accounts, wallets, login)"
  - name: "Platform"
    role: "Game supplier; integrates with Stars"
  - name: "Client"
    role: "Multi-site Web frontend"

concepts:
  - key: "GameLink"
    description: "Link to start a game; flow: HQ -> Stars -> Platform/Puppy -> HQ -> Client"
  - key: "Report"
    description: "Backoffice reports: Cron -> Stars -> Platform"
  - key: "RTP"
    description: "Real-time payout updates; Stars -> Platform (and Puppy)"

architecture:
  externalInterfaces:
    - ClientWeb
    - PlatformVendorMGAB
    - Puppy
    - HQ
  internalComponents:
    - Stars
    - Satellite
    - Cron
    - Puppy
  dataFlows:
    - description: "Game link retrieval flow: Client -> HQ -> Stars -> Platform/Puppy -> Client (for game start)"
    - description: "RTP and balance updates: Stars <-> Platform and Puppyd by Cron"
    - description: "Reporting: Cron -> Stars -> Platform"

deployment:
  environment: "Podman + Alpine"
  notes: "Dev/prod environments; scalable containerized deployment"

interProjectRelations:
  - project: "HQ（總部）"
    relation: "Stars 與 HQ 的核心業務協調（會員/錢包/登入等整合）"
  - project: "Satellite"
    relation: "後台與 Stars 的資料流與權限控制"
  - project: "Puppy"
    relation: "MG/AB 廠商代理層，Stars 與 MG/AB 的橋接器"
  - project: "Platform"
    relation: "遊戲供應商，Stars 的整合對象"

