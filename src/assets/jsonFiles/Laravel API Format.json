{"name":"Laravel API Format.md","content":"# Laravel API Format\r\n\r\n>\r\n\r\n> api 返回資料若以原生格式返回，沒有經過任何處理，可能包含敏感資訊\r\n>\r\n> 利用 transformer 可以將 api 響應的訊息系統化規則，進行統一輸出，方便管理與編輯\r\n>\r\n> 參考資料：\r\n>\r\n> [Laravel API 系列教程（三）：使用 API Resource 来创建自己的 {JSON:API} 格式 API](https://laravelacademy.org/post/9203)\r\n>\r\n> [Laravel 構建 API 伺服器之響應資料處理](https://www.796t.com/content/1545181747.html)\r\n>\r\n> [Laravel 8 中文文檔 API 资源](https://learnku.com/docs/laravel/8.x/eloquent-resources/9410)\r\n\r\n## spatie/laravel-fractal 套件\r\n\r\n```bash\r\ncomposer require spatie/laravel-fractal\r\n```\r\n\r\n安裝完成後，在 laravel 中註冊\r\n\r\n```bash\r\nphp artisan vendor:publish --provider=\"Spatie\\Fractal\\FractalServiceProvider\"\r\n```\r\n\r\n### 建立 transformer\r\n\r\n在 app/Http 的目錄下建立 Transformers 目錄\r\n\r\n```bash\r\nphp artisan make:transformer TestTransformer\r\n```\r\n\r\n```php\r\nnamespace App\\Transformers;\r\n\r\nuse League\\Fractal\\TransformerAbstract;\r\n\r\nclass TeatTransformer extends TransformerAbstract\r\n{\r\n    /**\r\n     * List of resources to automatically include\r\n     *\r\n     * @var array\r\n     */\r\n    protected $defaultIncludes = [\r\n        //\r\n    ];\r\n\r\n    /**\r\n     * List of resources possible to include\r\n     *\r\n     * @var array\r\n     */\r\n    protected $availableIncludes = [\r\n        //\r\n    ];\r\n\r\n    /**\r\n     * A Fractal transformer.\r\n     *\r\n     * @return array\r\n     */\r\n    public function transform()\r\n    {\r\n        return [\r\n            'id' => $user->id,\r\n            'name' => $user->name,\r\n            'signature' => $user->signature,\r\n            'created_at' => $user->created_at->toDateTimeString()\r\n        ];\r\n    }\r\n}\r\n```\r\n\r\n返回的陣列代表真實要響應的 json 資料格式\r\n\r\n### 在 controller 中使用 transformer\r\n\r\n匯入 transformer 命名空間\r\n\r\n```php\r\nclass UserController extends Controller\r\n{\r\n\r\n    /**\r\n     * 使用者列表介面\r\n     */\r\n    public function index()\r\n    {\r\n      $users = User::all();\r\n\r\n      return $this->response->collection($users, new TestTransformer());\r\n    }\r\n\r\n}\r\n```\r\n\r\n輸出：\r\n\r\n```json\r\n{\r\n  \"data\": [\r\n    {\r\n      \"id\": 1,\r\n      \"name\": \"張三\",\r\n      \"signature\": \"Hello, World\",\r\n      \"created_at\": \"2018-11-02 16:21:20\"\r\n    },\r\n    {\r\n      \"id\": 2,\r\n      \"name\": \"李四\",\r\n      \"signature\": \"這個人很懶...什麼也沒有留下\",\r\n      \"created_at\": \"2018-11-02 16:21:20\"\r\n    }\r\n  ],\r\n  \"meta\": {\r\n    // ...自動生成的元資料，如果你查詢出的資料帶有分頁資料（laravel中的Paginate）\r\n    // 那麼Transformer將會自動幫你把分頁資料加入在此處\r\n  }\r\n}\r\n```\r\n\r\n## API Resource\r\n\r\nLaravel 5.5 新增的 API Resource，和 transformer 功能與思路基本上一樣\r\n\r\n但由於是 laravel 官方釋出，因此與 Laravel Eloquent model 各種功能結合的更加緊密\r\n\r\n```bash\r\nphp artisan make:resource ArticleResource\r\n```\r\n\r\n生成的檔案位於 app/Http/Resources 目錄底下\r\n\r\n```php\r\nnamespace App\\Http\\Resources;\r\n\r\nuse Illuminate\\Http\\Resources\\Json\\Resource;\r\n\r\nclass TestResource extends Resource\r\n{\r\n    /** * Transform the resource into an array.\r\n     *\r\n     * @param \\Illuminate\\Http\\Request $request\r\n     * @return array\r\n     */\r\n    public function toArray($request)\r\n    {\r\n        return [\r\n            'id' => $user->id,\r\n            'name' => $user->name,\r\n            'signature' => $user->signature,\r\n            'created_at' => $user->created_at->toDateTimeString()\r\n        ];\r\n    }\r\n}\r\n```\r\n\r\n在 controller 中將 transformer 實例化\r\n\r\n```php\r\npublic function show(User $user)\r\n{\r\n    return new ArticleResource($user);\r\n}\r\n```\r\n\r\n```json\r\n{\r\n  \"data\": {\r\n        {\r\n          \"id\": 1,\r\n          \"name\": \"張三\",\r\n          \"signature\": \"Hello, World\",\r\n          \"created_at\": \"2018-11-02 16:21:20\"\r\n        }\r\n    }\r\n\r\n}\r\n```\r\n\r\n預設數據會被包在 data 的物件裡面，可以透過 `withoutWrapping()` 來將其去除\r\n\r\n```php\r\npublic function show(User $user)\r\n{\r\n    TestResource::withoutWrapping();\r\n    return new TestResource($user);\r\n}\r\n```\r\n","tocContent":"- [Laravel API Format](#laravel-api-format)\r\n  - [spatie/laravel-fractal 套件](#spatielaravel-fractal-套件)\r\n    - [建立 transformer](#建立-transformer)\r\n    - [在 controller 中使用 transformer](#在-controller-中使用-transformer)\r\n  - [API Resource](#api-resource)"}