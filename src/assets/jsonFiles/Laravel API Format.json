{"name":"Laravel API Format.md","content":"# Laravel API Format\n\n>\n\n> api 返回資料若以原生格式返回，沒有經過任何處理，可能包含敏感資訊\n>\n> 利用 transformer 可以將 api 響應的訊息系統化規則，進行統一輸出，方便管理與編輯\n>\n> 參考資料：\n>\n> [Laravel API 系列教程（三）：使用 API Resource 来创建自己的 {JSON:API} 格式 API](https://laravelacademy.org/post/9203)\n>\n> [Laravel 構建 API 伺服器之響應資料處理](https://www.796t.com/content/1545181747.html)\n>\n> [Laravel 8 中文文檔 API 资源](https://learnku.com/docs/laravel/8.x/eloquent-resources/9410)\n\n## spatie/laravel-fractal 套件\n\n```bash\ncomposer require spatie/laravel-fractal\n```\n\n安裝完成後，在 laravel 中註冊\n\n```bash\nphp artisan vendor:publish --provider=\"Spatie\\Fractal\\FractalServiceProvider\"\n```\n\n### 建立 transformer\n\n在 app/Http 的目錄下建立 Transformers 目錄\n\n```bash\nphp artisan make:transformer TestTransformer\n```\n\n```php\nnamespace App\\Transformers;\n\nuse League\\Fractal\\TransformerAbstract;\n\nclass TeatTransformer extends TransformerAbstract\n{\n    /**\n     * List of resources to automatically include\n     *\n     * @var array\n     */\n    protected $defaultIncludes = [\n        //\n    ];\n\n    /**\n     * List of resources possible to include\n     *\n     * @var array\n     */\n    protected $availableIncludes = [\n        //\n    ];\n\n    /**\n     * A Fractal transformer.\n     *\n     * @return array\n     */\n    public function transform()\n    {\n        return [\n            'id' => $user->id,\n            'name' => $user->name,\n            'signature' => $user->signature,\n            'created_at' => $user->created_at->toDateTimeString()\n        ];\n    }\n}\n```\n\n返回的陣列代表真實要響應的 json 資料格式\n\n### 在 controller 中使用 transformer\n\n匯入 transformer 命名空間\n\n```php\nclass UserController extends Controller\n{\n\n    /**\n     * 使用者列表介面\n     */\n    public function index()\n    {\n      $users = User::all();\n\n      return $this->response->collection($users, new TestTransformer());\n    }\n\n}\n```\n\n輸出：\n\n```json\n{\n  \"data\": [\n    {\n      \"id\": 1,\n      \"name\": \"張三\",\n      \"signature\": \"Hello, World\",\n      \"created_at\": \"2018-11-02 16:21:20\"\n    },\n    {\n      \"id\": 2,\n      \"name\": \"李四\",\n      \"signature\": \"這個人很懶...什麼也沒有留下\",\n      \"created_at\": \"2018-11-02 16:21:20\"\n    }\n  ],\n  \"meta\": {\n    // ...自動生成的元資料，如果你查詢出的資料帶有分頁資料（laravel中的Paginate）\n    // 那麼Transformer將會自動幫你把分頁資料加入在此處\n  }\n}\n```\n\n## API Resource\n\nLaravel 5.5 新增的 API Resource，和 transformer 功能與思路基本上一樣\n\n但由於是 laravel 官方釋出，因此與 Laravel Eloquent model 各種功能結合的更加緊密\n\n```bash\nphp artisan make:resource ArticleResource\n```\n\n生成的檔案位於 app/Http/Resources 目錄底下\n\n```php\nnamespace App\\Http\\Resources;\n\nuse Illuminate\\Http\\Resources\\Json\\Resource;\n\nclass TestResource extends Resource\n{\n    /** * Transform the resource into an array.\n     *\n     * @param \\Illuminate\\Http\\Request $request\n     * @return array\n     */\n    public function toArray($request)\n    {\n        return [\n            'id' => $user->id,\n            'name' => $user->name,\n            'signature' => $user->signature,\n            'created_at' => $user->created_at->toDateTimeString()\n        ];\n    }\n}\n```\n\n在 controller 中將 transformer 實例化\n\n```php\npublic function show(User $user)\n{\n    return new ArticleResource($user);\n}\n```\n\n```json\n{\n  \"data\": {\n        {\n          \"id\": 1,\n          \"name\": \"張三\",\n          \"signature\": \"Hello, World\",\n          \"created_at\": \"2018-11-02 16:21:20\"\n        }\n    }\n\n}\n```\n\n預設數據會被包在 data 的物件裡面，可以透過 `withoutWrapping()` 來將其去除\n\n```php\npublic function show(User $user)\n{\n    TestResource::withoutWrapping();\n    return new TestResource($user);\n}\n```\n","tocContent":"- [Laravel API Format](#laravel-api-format)\n  - [spatie/laravel-fractal 套件](#spatielaravel-fractal-套件)\n    - [建立 transformer](#建立-transformer)\n    - [在 controller 中使用 transformer](#在-controller-中使用-transformer)\n  - [API Resource](#api-resource)"}