{"name":"MQTT 學習筆記.md","content":"# MQTT\r\n\r\n> 目前最新版本為 v5.0 (但 v3.1 版較為普及)\r\n\r\n>\r\n\r\n## 概述\r\n\r\n適用於 Server 與 Client 訊息傳 遞的通訊協定\r\n\r\n利用訂閱(Subscribe)與發佈(Public)的機制來進行訊息傳遞\r\n\r\n因其訊息結構簡單且輕量化，因此非常適合用於硬體效能較低的控制器，或作為物聯網的輕量資料收集應用。\r\n\r\n在此架構下，會有三種角色：\r\n\r\n- `Broker`: 代理人\r\n- `Publisher`: 訊息發佈人\r\n- `Subscriber`: 訊息訂閱者\r\n\r\n訊息發佈者(Publisher)多為感測器，發送資料。訊息訂閱者(Subscriber)為使用者的裝置(pc, 手機)，代理人(Broker)接收來自感測器的資料，透過 Topic 來辨別目標的使用者裝置。有訂閱 Topic 的訊息訂閱，會收到相對應的資料。\r\n\r\n### MQTT 訊息格式\r\n\r\n- `Control Header`(1 byte)\r\n- `Remaining Length`(1 - 4 bytes)\r\n- `Variable Header`\r\n- `Payload`\r\n\r\nControl Header 和 Remaining Length 為必須，後面的 Variable Header 和 Payload 則是依需求決定。\r\n\r\n在傳遞的過程中，Publisher 不需要知道 Subscriber 的 IP ，只需要知道 Broker 的位址就可以進行訊息傳遞。\r\n\r\nTopic 有階層式設計，用`/`分開，並且有大小寫的差異。\r\n\r\n### 重要特色\r\n\r\nMQTT 可以針對網路品質(QoS)，決定操作等級\r\n\r\n- `QoS Level0`: Publisher 丟訊息給 Broker 後不理\r\n- `QoS Level1`: Publisher 丟出訊息後，Broker 必回傳 PUBACK 以確定訊息有收到，倘若沒收到 PUBACK，Publisher 會再重傳一次資料。(缺點為若回傳 PUBACK 時斷線，Publisher 會判斷傳送失敗而再重傳一次資料，將導致 Subscriber 重複收到相同的資料)\r\n- `QoS Level2`: 在 Publisher 確認 Broker 有收到訊息後，Broker 才將資料傳遞給 Subscriber，且 Subscriber 收到訊息後，也須回傳 PUBACK 給 Publisher，可避免收到重複的訊息，但較佔頻寬。\r\n\r\n## 在 windows 建立 MQTT 測試主機: Eclipse Mosquitto\r\n\r\n- 在[官網](https://mosquitto.org/download/)下載。\r\n- 在 `Choose Components` 中，如果勾選 `service` 的選項，MQTT Broker 就會變成 windows 的服務，當開機時便會被執行。(若測試環境，建議手動開啟即可)\r\n- 設定 windows 防火牆：在 MQTT 預設的通訊埠號為 1883 在 windows 是關閉的。\r\n  - 開啟 windows Defender 防火牆設定頁面，按下進階設定。\r\n  - 輸入規則，按下新增規則\r\n  - 選擇連接埠\r\n  - 選擇 TPC 通訊協定與特定本機連接埠 1833\r\n  - 選擇允許連線\r\n  - 選擇私人連線\r\n  - 設定名字，即可完成針對 TPC 連線的 1833 port 輸入規則\r\n  - 接著設定輸出規則，步驟相同，一樣指定 TPC 與埠號 1833\r\n  - 最後確認輸入及輸出正常啟用即可\r\n\r\n## 在虛擬主機建立 MQTT Broker: Mosquitto\r\n\r\n- 下載 mosquitto 程式庫\r\n\r\n  ```bash\r\n  sudo apt-add-repository ppa:mosquitto-dev/mosquitto-ppa\r\n  ```\r\n\r\n- 更新程式庫\r\n\r\n  ```bash\r\n  sudo apt-get update\r\n  ```\r\n\r\n- 安裝 mosquitto\r\n\r\n  ```bash\r\n  sudo apt-get install mosquitto\r\n  ```\r\n\r\n  - 安裝好後，broker 會自動運行\r\n\r\n- 控制指令\r\n\r\n  ```bash\r\n  # 查詢 mosquitto 服務狀態\r\n  systemctl status mosquitto\r\n\r\n  # 啟動 mosquitto 服務\r\n  sudo systemctl start mosquitto\r\n\r\n  # 停止 mosquitto 服務\r\n  sudo systemctl stop mosquitto\r\n\r\n  # 重新啟動 mosquitto 服務\r\n  sudo systemctl restart mosquitto\r\n  ```\r\n\r\n- 確認運行\r\n\r\n  - 查看 server 狀態\r\n\r\n  ```bash\r\n  sudo service mosquitto status\r\n  ```\r\n\r\n  - 列舉目前作用中的連線：mosquitto server 預設運作於 port: 1833\r\n\r\n  ```bash\r\n  rexlite_public@rexlitemqtt:~$ netstat -an\r\n  Active Internet connections (servers and established)\r\n  Proto Recv-Q Send-Q Local Address           Foreign Address         State\r\n  tcp        0      0 0.0.0.0:1833            0.0.0.0:*               LISTEN\r\n  ```\r\n\r\n- 本機測試\r\n\r\n  - `-d` debug 模式\r\n  - `-t` 訂閱的主題\r\n  - `-h` broker 的 IP\r\n  - `-m` 發送的內容\r\n  - `-v` 顯示主題名稱\r\n\r\n  - 訂閱\r\n\r\n    ```bash\r\n    mosquitto_sub -v -d -t <topic> -u <user> -P <Password>\r\n    ```\r\n\r\n  - 推送\r\n\r\n    ```bash\r\n    mosquitto_pub -d -t <Topic> -m <Message> -u <User> -P <Password>\r\n    ```\r\n\r\n- 開啟 server 防火牆的 port: 1883\r\n\r\nmosquitto 的 broker 通訊埠號預設為：1833，因此需要在 server 的防火牆開通道\r\n\r\n讓外界可以透過這個通道跟 MQTT Broker 溝通\r\n\r\n- 打開資訊欄 => 虛擬私有雲網路 => 防火牆 => CREATE FIREWALL rule\r\n- 填入\r\n  - 名稱：自訂名稱\r\n  - 目標：選擇網路中所有執行個體\r\n  - 來源 ip 範圍：0.0.0.0/0\r\n- 通訊協定和通訊埠：\r\n  - 指定的通訊協定和通訊埠：tcp:1883\r\n- 點擊建立\r\n\r\n## Mosquitto conf 設定與啟動\r\n\r\n移動到軟體檔案安裝的目錄下(linux: /etc/mosquitto)，用編輯器打開 mosquitto.conf。\r\n\r\n### 設定使用者須使用帳號密碼連線\r\n\r\n用 `mosquitto_passwd`，來建立密碼\r\n\r\n```bash\r\nmosquitto_passwd -c <password file> <username>\r\n```\r\n\r\n- 參數 `-c` 為建立密碼文件，若指定的檔案已存在，將會被覆蓋\r\n\r\n若要將更多的使用者添加到現有的文件中，則省略 `-c` 參數\r\n\r\n```bash\r\nmosquitto_passwd <password file> <username>\r\n```\r\n\r\n若要從密碼文件中刪除用戶\r\n\r\n```bash\r\nmosquitto_passwd -D <password file> <username>\r\n```\r\n\r\n```txt\r\nallow_anonymous false\r\npassword_file C:\\你的路徑\\mosquitto\\usrlist.txt\r\nlistener 1883\r\n```\r\n\r\n- `allow_anonymous false`: 不允許匿名登入\r\n- `password_file` : 指定帳號清單的目錄\r\n- `listener` : 指定遠端登入時可以使用的 PORT\r\n\r\n### 重新啟動 Mosquitto\r\n\r\n```bash\r\nsudo systemctl restart mosquitto\r\n```\r\n\r\n### 啟動 MQTT Broker\r\n\r\n在安裝目錄下輸入\r\n\r\n```bash\r\n./mosquitto.exe -c mosquitto.conf -v\r\n```\r\n\r\n- `-c` 指定 config 檔\r\n- `-v` verbose mode 詳細模式\r\n\r\n當啟動成功會顯示所有 broker 的即時資訊\r\n\r\n## 測試 Broker\r\n\r\n- Chrome 瀏覽器擴充程式：MQTTLens\r\n  - [MQTT 教學（四）：使用 MQTTLens 訂閱與發布 MQTT 訊息](https://swf.com.tw/?p=1009)\r\n- MQTT Explorer\r\n  - [| ESP32 教學 | Mosquitto conf 設定與 MQTT 測試](https://jimirobot.tw/esp32-mosquitto-conf-mqtt-tutorial/)\r\n\r\n## 安裝身分驗證套件: mosquitto-auth-plugin\r\n\r\n> Ubuntu 20\r\n>\r\n> Mosquitto 2.0  \r\n> [mosquitto-auth-plugin](https://github.com/jpmens/mosquitto-auth-plug)  \r\n> MySQL\r\n>\r\n> [Mosquitto 2.0 + mosquitto-auth-plugin + MySQL](https://www.jmeze.net/2021/06/mosquitto-20-mosquitto-auth-plugin-mysql.html)\r\n>\r\n> [Ubuntu 18 使用 apt 安装 mosquitto auth plugin 与 MySQL](https://www.jianshu.com/p/08b42c170a6a)\r\n>\r\n> [mosquitto 权限验证](https://tongxinmao.com/Article/Detail/id/166)\r\n\r\n### 設置 mosquitto\r\n\r\n- 安裝所需套件\r\n\r\n  ```bash\r\n  apt install gcc g++ make xsltproc docbook-xsl libwebsockets-dev libmysqlclient-dev\r\n  ```\r\n\r\n- 卸載舊版本的 Mosquitto\r\n\r\n  ```bash\r\n  apt purge mosquitto\r\n  ```\r\n\r\n- 從官方安裝 mosquitto 源碼\r\n\r\n  ```bash\r\n  wget https://mosquitto.org/files/source/mosquitto-2.0.10.tar.gz\r\n  tar xvf mosquitto-2.0.10.tar.gz\r\n  ```\r\n\r\n- 更改 config.mk 設定\r\n\r\n  ```config\r\n  WITH_WEBSOCKETS:=yes\r\n  WITH_CJSON:=no\r\n  ```\r\n\r\n  - `WITH_WEBSOCKETS` 當需要使用 websockets 連線到 mosquitto 時，才將其開啟。\r\n  - `WITH_CJSON` 將此設定開啟會報錯(未知原因)\r\n\r\n- 將 mosquitto 編譯並安裝\r\n\r\n  ```bash\r\n  make\r\n  make install\r\n  ```\r\n\r\n- 建立 mosquitto 使用者並改變目錄權限\r\n\r\n  ```bash\r\n  useradd -r mosquitto\r\n  mkdir /var/log/mosquitto\r\n  chown mosquitto:mosquitto /var/log/mosquitto/\r\n  mkdir /var/lib/mosquitto\r\n  chown mosquitto:mosquitto /var/lib/mosquitto/\r\n  ```\r\n\r\n- 建立文件 /etc/systemd/system/mosquitto.service\r\n\r\n  ```bash\r\n  touch /etc/systemd/system/mosquitto.service\r\n  ```\r\n\r\n  ```service\r\n  [Unit]\r\n  Description=Mosquitto MQTT v3.1/v3.1.1 server\r\n  Wants=network.target\r\n  Documentation=http://mosquitto.org/documentation/\r\n\r\n  [Service]\r\n  Type=simple\r\n  User=mosquitto\r\n  Group=mosquitto\r\n  ExecStart=/usr/local/sbin/mosquitto -c /etc/mosquitto/mosquitto.conf\r\n  Restart=on-failure\r\n  SyslogIdentifier=Mosquitto\r\n\r\n  [Install]\r\n  WantedBy=multi-user.target\r\n  ```\r\n\r\n### 安裝 mosquitto-auth-plug 套件\r\n\r\n- git clone\r\n\r\n```bash\r\ngit clone https://github.com/kmihaylov/mosquitto-auth-plug.git\r\n```\r\n\r\n- 在 mosquitto-auth-plug 的目錄底下編輯 config.mk 的副本\r\n\r\n```bash\r\ncp config.mk.in config.mk\r\nvim config.mk\r\n```\r\n\r\n- 根據實際環境，設定 config.mk\r\n\r\n```mk\r\n# mosquitto 源碼\r\n# MOSQUITTO_SRC = /etc/mosquitto-2.0.10\r\nMOSQUITTO_SRC = <your path>/mosquitto\r\n\r\n# OPENSSLDIR = /usr/lib/ssl\r\nOPENSSLDIR = <your path>\r\n```\r\n\r\n- 可以使用 `whereis openssl` 指令來顯示 OpenSSL 的目錄\r\n\r\n- 編譯此套件\r\n\r\n```bash\r\nmake\r\n```\r\n\r\n- errors\r\n\r\n```bash\r\n/usr/local/include/mosquitto_plugin.h:167:46: error: unknown type name ‘mosquitto_plugin_id_t’; did you mean ‘mosquitto_property’?\r\n```\r\n\r\n修改 `auth-plug.c` 與 `log.c` 檔\r\n\r\n```c\r\n#include <mosquitto_broker.h>\r\n#include <mosquitto_plugin.h>\r\n#include <mosquitto.h>\r\n```\r\n\r\n- 將編譯完成後生成的 `auth-plug.so` 複製至 mosquitto 的目錄下(不是源碼目錄，是安裝後的目錄)\r\n\r\n```bash\r\ncp auth-plug.so /var/lib/mosquitto\r\n```\r\n\r\n- 進入 mosquitto 安裝後的目錄(預設為 etc/mosquitto)，複製 mosquitto.conf.example 並在文件最後加入設定\r\n\r\n```conf\r\ninclude_dir /etc/mosquitto/conf.d\r\n```\r\n\r\n- 在 mosquitto 目錄下建立 conf.d 資料夾，並新增 auth-plug.conf\r\n\r\n```bash\r\nmkdir /etc/mosquitto/conf.d\r\nvim auth-plug.conf\r\n```\r\n\r\n```conf\r\n# auth_plugin /var/lib/mosquitto/auth-plug.so\r\nauth_plugin /<your path>/auth-plug.so\r\nauth_opt_backends mysql\r\nauth_opt_log_quiet false\r\n# auth_opt_host localhost\r\nauth_opt_host <your mysql host>\r\n# auth_opt_port 3306\r\nauth_opt_port <your mysql port>\r\nauth_opt_dbname <your mysql schema>\r\nauth_opt_user <your mysql user>\r\nauth_opt_pass <your mysql password>\r\n\r\nauth_opt_userquery SELECT pw FROM <your_users_table> WHERE username = '%s'\r\nauth_opt_superquery SELECT COUNT(*) FROM <your_users_table> WHERE username = '%s' AND super = 1\r\nauth_opt_aclquery SELECT topic FROM <your_acls_table> WHERE (username = '%s') AND (rw >= %d)\r\n# auth_opt_superusers Sup\r\nauth_opt_superusers S*\r\nauth_opt_ssl_enabled true\r\n```\r\n\r\n- 更改檔案權限\r\n\r\n  ```bash\r\n  chown mosquitto:mosquitto auth-plug.conf\r\n  chmod go-rwx auth-plug.conf\r\n  ```\r\n\r\n### 若 mosquitto 無法正常運行\r\n\r\n使用 `sudo systemctl start mosquitto -l` 啟動 Mosquitto\r\n\r\n使用 `sudo systemctl status mosquitto -l` 查看運行狀態\r\n\r\n若狀態為失敗，運行輸入 `sudo /usr/local/sbin/mosquitto -c /etc/mosquitto/mosquitto.conf` (ExecStart=)，查看詳細的啟動錯誤資訊\r\n\r\n- 缺乏權限：將缺乏權限的目錄或是檔案，其權限歸於 mosquitto\r\n- libmosquitto.so.1:cannot open shard object\r\n  - 運行 `sudo /sbin/ldconfig` 更新庫的連接器緩存\r\n\r\n## 安裝身分驗證套件: mosquitto-go-auth\r\n\r\n> 僅支援 Linux (Debian, Ubuntu and Mintus) 和 MacOS\r\n>\r\n> [iegomez/mosquitto-go-auth](https://github.com/iegomez/mosquitto-go-auth#build)\r\n>\r\n> [Mosquitto 安装与部署](https://www.cnblogs.com/IC1101/p/14749722.html)\r\n>\r\n> [Uninstalling Go (golang)](https://askubuntu.com/questions/742078/uninstalling-go-golang)\r\n\r\n### 設置 mosquitto: 同 mosquitto-auth-plug 套件\r\n\r\n### 安裝 mosquitto-go-auth\r\n\r\n- 安裝之前，需先在系統上安裝 golang，所需 go 最低版本為 1.13.8。\r\n\r\n```bash\r\ngo version\r\n```\r\n\r\n- 安裝 go (若要更新 golang，需先將舊版本解除安裝 remove golang)\r\n\r\n```bash\r\n# Update the following as per your system configuration\r\nexport GO_VERSION=1.16.4\r\nexport GO_OS=linux\r\nexport GO_ARCH=amd64\r\n\r\nwget https://dl.google.com/go/go${GO_VERSION}.${GO_OS}-${GO_ARCH}.tar.gz -O golang.tar.gz\r\nsudo tar -C /usr/local -xzf golang.tar.gz\r\nexport PATH=$PATH:/usr/local/go/bin\r\nrm golang.tar.gz\r\n\r\n# Prints the Go version\r\ngo version\r\n```\r\n\r\n- 將 mosquitto-go-auth 套件，git clone 下來，並打包\r\n\r\n```bash\r\nmake\r\n```\r\n\r\n- 設定 mosquitto 文件(mosquitto.conf)\r\n\r\n```conf\r\ninclude_dir /etc/mosquitto/conf.d\r\n```\r\n\r\nvim /mosquitto/conf.d/go-auth.conf\r\n\r\n```conf\r\n# 套件編譯完成後的檔案\r\nauth_plugin /etc/mosquitto/conf.d/go-auth.so\r\n\r\n# 後端\r\nauth_opt_backends mysql\r\n\r\n# 密碼編碼方式\r\nauth_opt_hasher bcrypt\r\nauth_opt_hasher_cost 10\r\n\r\n# 設定  mosquitto log (上線後應將 log_level debug 關閉)\r\nauth_opt_log_level debug\r\nauth_opt_log_dest file\r\nauth_opt_log_file /var/log/mosquitto/mosquitto.log\r\n\r\nauth_opt_mysql_protocol tcp\r\n\r\n# 允許使本機密碼\r\nauth_opt_mysql_allow_native_passwords true\r\n\r\n# 連接資料庫的設定\r\nauth_opt_mysql_host localhost\r\nauth_opt_mysql_port 3306\r\nauth_opt_mysql_dbname max_system\r\nauth_opt_mysql_user max_system\r\nauth_opt_mysql_password maxsystem@2021\r\nauth_opt_mysql_connect_tries 5\r\nauth_opt_mysql_userquery SELECT password_hash FROM test_user WHERE username = ? limit 1\r\nauth_opt_mysql_superquery SELECT COUNT(*) FROM test_user WHERE username = ? AND is_admin = 1\r\nauth_opt_mysql_aclquery SELECT topic FROM test_acl WHERE test_user_id = (SELECT id FROM test_user WHERE username = ?) AND (rw >= ?)\r\n```\r\n\r\n### acl 權限設定\r\n\r\n其實一般而言只會使用到權限 2、5、7\r\n\r\n```txt\r\n0: no access (NULL)\r\n1: read access (r)  // 不會動\r\n2: write access (w)\r\n3: read and write access (rw)\r\n4: subscribe access (s)\r\n5: read & subscribe access (rs)\r\n6: write & subscribe access (ws)\r\n7: read, write and subscribe access (rws)\r\n```\r\n\r\n## MQTT Client\r\n\r\n> [php-mqtt/client](https://github.com/php-mqtt/client)\r\n>\r\n> [php-mqtt/client-examples](https://github.com/php-mqtt/client-examples)\r\n\r\n### 安裝\r\n\r\n```git\r\ngit clone https://github.com/php-mqtt/client-examples.git\r\n```\r\n\r\n將專案複製到本機，進入專案資料夾，啟動 composer\r\n\r\n```bash\r\ncd client-examples\r\ncomposer install\r\n```\r\n\r\n### 設定 mqtt-client 連線\r\n\r\n進入 share 資料夾，編輯 config.php\r\n\r\n```php\r\n<?php\r\n\r\ndeclare(strict_types=1);\r\n\r\ndefine('MQTT_BROKER_HOST', '127.0.0.1');  // host\r\ndefine('MQTT_BROKER_PORT', 1883);         // port\r\ndefine('MQTT_BROKER_TLS_PORT', 8883);     // tls port\r\n\r\ndefine('TLS_SERVER_CA_FILE', '');\r\ndefine('TLS_CLIENT_CERTIFICATE_FILE', '');\r\ndefine('TLS_CLIENT_CERTIFICATE_KEY_FILE', '');\r\ndefine('TLS_CLIENT_CERTIFICATE_KEY_PASSPHRASE', null);\r\n\r\ndefine('AUTHORIZATION_USERNAME', '');     // mqtt broker username\r\ndefine('AUTHORIZATION_PASSWORD', '');     // mqtt broker password\r\n```\r\n","tocContent":"- [MQTT](#mqtt)\r\n  - [概述](#概述)\r\n    - [MQTT 訊息格式](#mqtt-訊息格式)\r\n    - [重要特色](#重要特色)\r\n  - [在 windows 建立 MQTT 測試主機: Eclipse Mosquitto](#在-windows-建立-mqtt-測試主機-eclipse-mosquitto)\r\n  - [在虛擬主機建立 MQTT Broker: Mosquitto](#在虛擬主機建立-mqtt-broker-mosquitto)\r\n  - [Mosquitto conf 設定與啟動](#mosquitto-conf-設定與啟動)\r\n    - [設定使用者須使用帳號密碼連線](#設定使用者須使用帳號密碼連線)\r\n    - [重新啟動 Mosquitto](#重新啟動-mosquitto)\r\n    - [啟動 MQTT Broker](#啟動-mqtt-broker)\r\n  - [測試 Broker](#測試-broker)\r\n  - [安裝身分驗證套件: mosquitto-auth-plugin](#安裝身分驗證套件-mosquitto-auth-plugin)\r\n    - [設置 mosquitto](#設置-mosquitto)\r\n    - [安裝 mosquitto-auth-plug 套件](#安裝-mosquitto-auth-plug-套件)\r\n    - [若 mosquitto 無法正常運行](#若-mosquitto-無法正常運行)\r\n  - [安裝身分驗證套件: mosquitto-go-auth](#安裝身分驗證套件-mosquitto-go-auth)\r\n    - [設置 mosquitto: 同 mosquitto-auth-plug 套件](#設置-mosquitto-同-mosquitto-auth-plug-套件)\r\n    - [安裝 mosquitto-go-auth](#安裝-mosquitto-go-auth)\r\n    - [acl 權限設定](#acl-權限設定)\r\n  - [MQTT Client](#mqtt-client)\r\n    - [安裝](#安裝)\r\n    - [設定 mqtt-client 連線](#設定-mqtt-client-連線)"}