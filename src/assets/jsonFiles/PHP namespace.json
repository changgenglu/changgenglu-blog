{"name":"PHP namespace.md","content":"# PHP 命名空間\n\n> 參考資料：\n>\n> [namespace 命名空間詳解](https://learnku.com/articles/15064/namespace-namespace-detailed-explanation)\n\n## 什麼是命名空間\n\n在 php 中，語法規則不允許`變數`、`類別名稱`、`const 常數`在一個請求中出現多個相同的命名，若有應用程序不得不出現多個同名的`變數`、`類別名稱`、`const 常數`，此時可以將其放到不同的空間進行請求。\n\n這個不同的空間就稱作`命名空間 namespace`。空間可以作為一個`容器`、`儲存類別`、`函數`、`const 常數`的容器。\n\n- 同名元素在同一空間：\n\n  ```php\n  function getInfo(){\n    echo \"hello\";\n  }\n\n  function getInfo(){\n    echo \"hello\";\n  }\n  getInfo();\n  ```\n\n  同名稱的兩個 function 在同一個空間存取會報錯，錯誤碼：\n\n  ```txt\n  Fatal error: Cannot redeclare getInfo() (previously declared in...)\n  ```\n\n- 同名元素在不同空間\n\n  ```php\n  namespace Test1;\n\n  function getInfo() {\n    echo \"hello from test 1\";\n  }\n  getInfo();\n  echo \"<br>\";\n\n  namespace Test2;\n\n  function getInfo() {\n    echo \"hello from test 2\";\n  }\n  getInfo();\n  ```\n\n  相同命名的兩個 function 放到不同空間進行存取，最後輸出：\n\n  ```txt\n  hello from test 1\n  hello from test 2\n  ```\n\n## 使用命名空間\n\n### 命名規則\n\n- 透過 namespace 關鍵字宣告命名空間\n\n  ```php\n  namespace 空間名稱  // 空間名稱依照 php 正確的命名方式定義即可\n  ```\n\n  namespace 針對 function、類別名稱、const 常數三個部份起作用，並統稱為元素。\n\n### 常數的宣告\n\n- define ($name, $value);\n\n  在類別外部宣告常數，和命名空間沒有關係。同名稱的常數只能 define 一次\n\n  ```php\n  namespace Test1;\n  define ('IVAN', 'hello world');\n\n  namespace Test2;\n  define ('IVAN', 'hello world');\n\n  // Notice: Constants IVAN already defined in...\n  ```\n\n- const NAME = $value;\n  和空間命名有關係。const 可以在類別的內部宣告常數值(類別常數)，也可以在類別外部宣告(正常常數)。\n\n  使用空間命名的時候，const 可以放到類別外面宣告。相同名稱的多個常數，可以分別定義報不同的命名空間裡面。\n\n  ```php\n  namespace Test1;\n  const USER = \"ivan_1\";\n  echo USER;\n  echo \"<br>\";\n\n  namespace Test2;\n  const USER = \"ivan_2\";\n  echo USER;\n  ```\n\n  ```txt\n  ivan_1\n  ivan_2\n  ```\n\n### 命名空間中 const 和 define 的區別\n\n`const` 針對命名空間產生影響，`define` 不發生影響。\n\n`const` 可以宣告多個相同名稱的常數。\n\n`define` 宣告的名稱具有唯一性。\n\n## 間單的元素存取\n\n```php\n// 空間的名稱與具體父層目錄沒有直接關係\n// 按照 php 正確的命名方式定義即可\nnamespace Test1;\n\nfunction getInfo() {\n  echo \"test_1\";\n}\n\nconst USER = \"ivan_1\";\n\nnamespace Test2;\n\nfunction getInfo(){\n  echo \"test_2\";\n}\nconst USER = \"ivan_2\";\n\n// 存取元素\n// 當元素沒有任何限制的時候，會存取\"目前空間\"的元素\n// 目前空間：離此呼叫 function 最近的命名空間\ngetInfo(); // test_2\necho USER; // ivan_2\n\n// 當元素指定存取的命名空間\n// 存取其他命名空間的元素：\\空間\\元素;\n\\Test1\\getInfo(); // test_1\necho \\Test1\\USER; // ivan_1\n```\n\n## 子級(多級)空間\n\n命名空間可以讓我們存放許多元素(函數、類別、常數)，當元素較多時，為了方便管理，可以對元素進行分類儲存，將命名空間設定為多級空間。\n\n多級空間的最後一級空間就稱為子級空間。\n\n- 空間元素存取的三種型式：\n\n  - 非限定名稱方式\n  - 完全限定名稱方式\n  - 限定名稱\n\n- 多級命名空間使用\n\n  ```php\n  // 多級命名空間使用\n  namespace AAA\\aaa\\test;\n\n  class Shop\n  {\n    public $impression = 'beautiful';\n  }\n\n  namespace BBB\\bbb\\test;\n\n  class Shop\n  {\n    public $impression = 'science and technology';\n  }\n\n  // 非限定方式存取元素\n  // 預設存取當前的空間元素\n  $obj = new Shop();\n  echo $obj->impression; // science and technology\n\n  // 完全限定名稱方式存取元素\n  // 存取其他空間元素\n  $obj_1 = new \\AAA\\aaa\\test\\Shop();\n  echo $obj_1->impression; // beautiful\n  ```\n\n- 多級空間使用\n\n  ```php\n  namespace AAA\\aaa\\test\\library;\n  const USER = 'ivan_1';\n\n  namespace BBB\\bbb\\test;\n  const USER = \"ivan_2\";\n\n  namespace AAA\\aaa\\test;\n  const USER = \"ivan_3\";\n\n  // 限定名稱存取元素\n  // 此方法存取元素規則：目前空間 + 本身空間\\元素\n\n  echo library\\USER; // 命名空間為 \\AAA\\aaa\\test\\library\\USER;\n  // ivan_1\n  ```\n\n- 非限定名稱方式\n  `echo Shop::$impression;` 就近存取上面與其最近的空間內的 Shop() 元素。類似 php 引入文件 `include(\"common.php\");` 使用相對路徑引入當前目錄下的 common.php 文件。\n- 限定名稱\n  `echo library\\Shop::$impression;` 將當前空間和 library 空間聯合，獲得 Shop() 元素。類似 `include(\"Common/Conf/config.php\");` 相對路徑。\n- 完全限定名稱方式\n  `echo BBB\\Shop::$impression;` 存取 BBB 空間的 Shop 元素。類似 `include(\"D:/web/1121/Conf/common.php);` 使用絕對路徑引入文件。\n\n## 引入機制\n\n命名空間可宣告為多級空間，此一多級空間元素在其他的空間內部存取的時候，不可以需要透過`完全限定名稱`，此一方法不方便維護及開發。\n\n為了降低程式碼的複雜度，可以在當前的空間將指定的空間引入，進而透過`限定名稱`的形式，使用其他空間的元素。\n\n### 空間引入\n\n- use 空間\n\n  ```php\n  // 引入機制：空間引入\n  namespace AAA\\aaa\\test;\n\n  const USER = 'ivan';\n  const HOST = 'localhost:80';\n\n  function getInfo() {\n    echo 'test';\n  }\n\n  namespace BBB\\bbb\\library;\n\n  const USER = 'cindy';\n  const HOST = 'localhost:443';\n  function getInfo() {\n    echo 'test';\n  }\n\n  /**\n   * 項目需要頻繁存取其他空間元素\n   * 為了降低存取其他空間的複雜度，可以將頻繁存取的空間引入當前的空間\n   * 進而透過\"限定名稱\"方式存取元素\n   * 限定名稱：被引入間的最後一級空間的名稱\n   */\n\n  use AAA\\aaa\\test;\n\n  echo test\\USER; // ivan\n  test\\getInfo(); // test\n  echo test\\HOST; // localhost:80\n  // 返回最近的空間元素\n  echo USER; // cindy\n  ```\n\n- 類別元素引入：\n\n`use 空間\\空間\\空間\\類元素;`\n\n空間引入可以解決完全限定名稱訪問元素的繁瑣性，但是還需要透過限定名稱方式訪問空間。\n\n若引入空間的元素是 class，就可以直接將這個類別引入到當前空間，使用的時候也就可以透過非限定名稱的方式訪問。\n\n程式碼相對較為簡潔。\n\n- 類別元素引入\n\n  ```php\n  namespace AAA\\aaa\\test;\n\n  class Shop\n  {\n    static $name = 'ivan';\n  }\n\n  namespace BBB\\bbb\\test;\n  const USER = 'cindy';\n\n  // 將 AAA\\aaa\\test\\Shop 類別元素引入\n  use AAA\\aaa\\test\\Shop;\n\n  // 透過非限定名稱在此命名空間中存取引入的類別中的元素\n  echo Shop::$name; // ivan\n  ```\n\n- 類別元素在引入時的特殊狀況\n  當引入類別的命名和當前空間的類別名稱相同時：\n\n  ```php\n  namespace AAA\\aaa\\test;\n  class Shop\n  {\n    static $name = 'ivan';\n  }\n\n  namespace BBB\\bbb\\test;\n  const USER = 'cindy';\n  class Shop\n  {\n    static $name = 'jack';\n  }\n\n  // 將 AAA\\aaa\\test 類別元素直接引入\n  use AAA\\aaa\\test\\Shop;\n\n  // 透過非限定名稱存取引入的類別\n  echo Shop::$name; // error\n\n  // Fatal error: Cannot use AAA\\aaa\\test\\Shop as Shop because the name is already in use in...\n  ```\n\n  解決方法：使用別名\n\n  `use 空間\\元素 as 別名;`\n\n  把其他空間的一個類別元素引入到當前空間，若當前空間也已有一個同名的類別元素，則引入元素與當前空間的元素就會產生衝突，為了避免衝突，可以給引入的空間元素取一個別名。\n\n  引入的 Shop 與當前空間的 Shop 有衝突取別名：\n\n  ```php\n    namespace AAA\\aaa\\test;\n  class Shop\n  {\n    static $name = 'ivan';\n  }\n\n  namespace BBB\\bbb\\test;\n  const USER = 'cindy';\n  class Shop\n  {\n    static $name = 'jack';\n  }\n\n  // 將 AAA\\aaa\\test 類別元素直接引入\n  use AAA\\aaa\\test\\Shop as IntShop;\n\n  // 透過別名存取引入的類別\n  echo IntShop::$name; // ivan\n  echo Shop::$name; // jack\n  ```\n\n### 公共空間\n\n一個 php 文件裡面沒有 namespace 關鍵字宣告，則該文件的元素都存在於公共空間。\n\n存取公共空間的元素統一設為：`\\元素`\n\n### CommonSpace.php include 引入 CommonSpace1.php\n\n- CommonSpace.php\n\n  ```php\n  namespace AAA;\n\n  function f1() {\n    echo \"in good mood\";\n  }\n\n  // 在公共空間的檔案會被引入，針對當前空間不發生影想\n\n  include(\"CommonSpace1.php\"); // 公共空間\n\n  // 存取元素\n  f1(); // in good mood 當前空間就是 AAA 空間\n  echo \\NAME; // 存取公共空間的元素\n\n  // 本身有命名空間，引入的檔案是公共空間，本身的空間存取不到時，會到別的空間去尋找此元素\n  ```\n\n- CommonSpace1.php\n\n  ```php\n  const NAME = 'ivan';\n\n  function f1() {\n    echo \"okay\";\n  }\n\n  function f2() {\n    echo 'all good';\n  }\n  ```\n\nCommonSpace.php 有 namespace，CommonSpace1.php 沒有(CommonSpace1.php 處於公共空間)。被引入的檔案空間，此時被引入的文件 CommonSpace1.php 屬於公共空間，針對當前空間不發生影響。\n\n- 透過非限定名稱呼叫一個元素(function、常數)\n  - 首先取得本空間元素\n  - 其次取得公共空間元素\n\n若在 CommonSpace.php 中將 function fi() 註解，此時 f1() 呼叫的 function 為公共空間 function f1()，輸出：\n\n```txt\nokay\nivan\n```\n\n將 CommonSpace.php 的 function f1() 取消註解，此時 f1() 呼叫的是 AAA 命名空間的 function f1()。\n\n```txt\nin good mood\nivan\n```\n\n### ReverseCommonSpace.php include 引入 ReverseCommonSpace １.php\n\n- ReverseCommonSpace.php\n\n  ```php\n  function f1() {\n    echo \"in good mood\";\n  }\n\n  const NAME = \"cindy\";\n\n  function f2() {\n    echo \"good\";\n  }\n\n  include(\"ReverseCommonSpace1.php\") // 有命名空間\n\n  \\f2(); // good 存取公共空間需要有\"反斜線\"，提高程式碼可讀性\n  echo NAME;\n  echo \\AAA\\NAME;\n  // f3(); // 無法存取會報錯，正確的存取寫法為： \\AAA\\f3();\n  \\AAA\\f3();\n\n  // 本身是公共空間，引入的檔案是有命名空間的，本身的空間無法存取時，不會到別的空間去找尋元素。\n  ```\n\n  若 f3(); 沒有註解掉會報錯：\n\n  ```txt\n  good\n  cindy\n  ivan\n\n  (!) Fatal error: Uncaught Error: Call to undefined function f3() in...\n  ```\n\n  將其註解後輸出：\n\n  ```txt\n  good\n  cindy\n  ivan\n  buy book\n  ```\n\n- ReverseCommonSpace1.php\n\n  ```php\n  namespace AAA;\n\n  const NAME = 'ivan';\n\n  function f2() {\n    echo 'good';\n  }\n\n  function f3(){\n    echo \"buy book\";\n  }\n  ```\n\n## 範例與總結\n\n### 錯誤範例\n\n```php\nconst USER = 'ivan';\n\nnamespace AAA;\n\nfunction getInfo() {\n  echo 'OK';\n}\n\n// Fatal error: Namespace declaration statement has to be the very first statement or after any declare call in the script in...\n```\n\n正確做法：\n\n```php\nnamespace AAA;\n\nconst USER = 'ivan';\n\nfunction getInfo() {\n  echo 'OK';\n}\n\ngetInfo(); // OK\n```\n\n不能宣告常數在公共空間，而 function 在命名空間。\n\n宣告命名空間時，在 namespace 關鍵字前面不能有任何程式碼，包刮 header 也要寫在下面。\n\n### 命名空間總結\n\n1. 宣告命名空間時，在 namespace 關鍵字前面不能有任何程式碼(可以註解)，包刮 header 也要寫在下面。\n2. 命名空間是虛擬抽象的空間，非真實的檔案路徑。\n3. 同一請求多檔案可以使用相同的命名空間，只要這些檔案中不會出現多的同名稱、同類型的元素(function, const)即可。\n","tocContent":""}