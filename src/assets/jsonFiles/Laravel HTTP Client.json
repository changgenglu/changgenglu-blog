{"name":"Laravel HTTP Client.md","content":"# laravel HTTP Client\n\n> laravel 透過 Guzzle 這個套件，模擬 http client 來發送 request\n> 預設情況下，laravel 已經自動包含了這個套件。\n> 若尚未安裝，可透過 composer 再安裝一次。\n>\n> ```bash\n> composer require guzzlehttp/guzzle\n> ```\n\n## 建立 request\n\n建立基礎的 GET request\n\n```php\nuse Illuminate\\Support\\Facades\\Http;\n\n$response = Http::get('http://example.com');\n```\n\n可以直接將查詢字串(query string)加到 URL 上，或是傳入一組索引鍵/值配對的陣列作為 get 的第二個引數\n\n```php\n$response = Http::get('http://example.com/users', [\n    'name' => 'Taylor',\n    'page' => 1,\n]);\n```\n\nget 方法會回傳 Illuminate\\Http\\Client\\Response 的實體，該實體提供了許多用來取得 Response 資訊的方法：\n\n```php\n$response->body() : string;\n$response->json($key = null) : array|mixed;\n$response->object() : object;\n$response->collect($key = null) : Illuminate\\Support\\Collection;\n$response->status() : int;\n$response->ok() : bool;\n$response->successful() : bool;\n$response->redirect(): bool;\n$response->failed() : bool;\n$response->serverError() : bool;\n$response->clientError() : bool;\n$response->header($header) : string;\n$response->headers() : array;\n```\n\nPOST PUT PATCH 等 HTTP action 傳送額外資料，一般情況下，資料會使用 json 的資料型別來傳遞\n\n```php\nuse Illuminate\\Support\\Facades\\Http;\n\n$response = Http::post('http://example.com/users', [\n    'name' => 'Steve',\n    'role' => 'Network Administrator',\n]);\n```\n\n若想用 x-www-form-urlencoded 來傳送資料，要在建立 request 前呼叫 asForm() 方法\n\n```php\n$response = Http::asForm()->post('http://example.com/users', [\n    'name' => 'Sara',\n    'role' => 'Privacy Consultant',\n]);\n```\n\n## 錯誤處理\n\nlaravel HTTP client 不會在 client 端或是 server 端錯誤時拋出異常(status code 400 or 500)。\n\n此時可以透過 successful, clientError 或是 serverError 方法來判斷是否發生錯誤。\n\n```php\n// 若 status code 在200 ~ 300\n$response->successful();\n\n// 若 status code 大於 400\n$response->failed();\n\n// 若 status code 為400層級的錯誤\n$response->clientError();\n\n// 若 status code 為500層級的錯誤\n$response->serverError();\n```\n","tocContent":""}