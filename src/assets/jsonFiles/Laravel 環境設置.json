{"name":"Laravel 環境設置.md","content":"# Laravel 環境設置\n\n>\n\n## 環境初始設定\n\n### 1. 安裝 XAMPP or phpEnv\n\n#### xampp 更改 php 版本: 版本 5 => 7\n\n> 注意！php 8.1 不相容 laravel 6.x 以下(包含 6)\n\n1. 開啟 Apache Admin 查看當前 XAMPP 所有版本資訊\n2. 到[XAMPP](https://windows.php.net/download/)下載要更新的 php 版本的 zip 檔。(注意！選擇 `Thread Safe` 版本！)\n3. 解壓縮定指定資料夾名稱為`php`，將此資料夾放至 XAMPP 資料夾中，並將原本的 php 資料夾另外命名\n4. 至 XAMPP 控制面板點選 `config` 按鈕，開啟 `httpd-xampp.conf` 檔，並修改其內容\n\n   1. 找到以下文字，並將其修改\n\n      修改前\n\n      ```txt\n      LoadFile \"C:/xampp/php/php5ts.dll\"\n      LoadFile \"C:/xampp/php/libpq.dll\"\n      LoadModule php5_module \"C:/xampp/php/php5apache2_4.dll\"\n      ```\n\n      修改後\n\n      ```txt\n      LoadFile \"C:/xampp/php/php7ts.dll\"\n      LoadFile \"C:/xampp/php/libpq.dll\"\n      LoadModule php7_module \"C:/xampp/php/php7apache2_4.dll\"\n      ```\n\n      - 修改時需確認修改路徑的檔案確實存在，若無此檔案，可能是 php 版本的關係\n\n   2. 將 `httpd-xampp.conf` 設定檔中所有 `php5_module` 改為 `php7_module`\n      - 在 php8 的 `httpd-xampp.conf` 設定檔為 `php_module`\n\n5. 重建 `php.ini` 設定檔\n\n   1. 複製 php 資料夾中的 php.ini-development，並重新命名為 php.ini\n   2. 開啟 php.ini 並依開發或網站需求，開啟相關模組(刪除前面的分號`;`)\n      1. `Dynamic Extensions` 動態延伸功能\n         - extension=curl\n         - extension=gd2(version 7) / gd(version 8)\n           - 在 php 8.0，DG 延伸功能 windows dll 文件名稱由 php_gd2.dll 改為 php_gd.dll)\n         - extension=mbstring\n         - **extension=mysqli**\n         - extension=openssl\n      2. `Paths and Directories` 路徑和目錄\n         - **extension_dir = \"ext\"**\n      3. 常見設定\n         - max_execution_time = 600\n         - short_open_tag = On\n         - max_input_time = 180\n         - **error_reporting=E_ALL & ~E_DEPRECATED & ~E_STRICT**\n           - 設置錯誤訊息通知，加入版本兼融性的提示\n         - memory_limit = 500M\n         - post_max_size = 500M\n         - upload_max_filesize = 100M\n         - max_file_uploads = 50\n\n6. 至 XAMPP 面板重啟 Apache\n7. 重新執行 composer update\n\n#### XAMPP 除錯\n\n> 問題：XAMPP 開啟 MySQL 失敗\n\n錯誤訊息：\n\n```txt\n2023-08-24 16:06:19 0 [Note] InnoDB: Mutexes and rw_locks use Windows interlocked functions\n2023-08-24 16:06:19 0 [Note] InnoDB: Uses event mutexes\n2023-08-24 16:06:19 0 [Note] InnoDB: Compressed tables use zlib 1.2.12\n2023-08-24 16:06:19 0 [Note] InnoDB: Number of pools: 1\n2023-08-24 16:06:19 0 [Note] InnoDB: Using SSE2 crc32 instructions\n2023-08-24 16:06:19 0 [Note] InnoDB: Initializing buffer pool, total size = 16M, instances = 1, chunk size = 16M\n2023-08-24 16:06:19 0 [Note] InnoDB: Completed initialization of buffer pool\n2023-08-24 16:06:19 0 [Note] InnoDB: 128 out of 128 rollback segments are active.\n2023-08-24 16:06:19 0 [Note] InnoDB: Creating shared tablespace for temporary tables\n2023-08-24 16:06:19 0 [Note] InnoDB: Setting file 'C:\\xampp\\mysql\\data\\ibtmp1' size to 12 MB. Physically writing the file full; Please wait ...\n2023-08-24 16:06:19 0 [Note] InnoDB: File 'C:\\xampp\\mysql\\data\\ibtmp1' size is now 12 MB.\n2023-08-24 16:06:19 0 [Note] InnoDB: Waiting for purge to start\n2023-08-24 16:06:19 0 [Note] InnoDB: 10.4.27 started; log sequence number 72915773; transaction id 17227\n2023-08-24 16:06:19 0 [Note] InnoDB: Loading buffer pool(s) from C:\\xampp\\mysql\\data\\ib_buffer_pool\n2023-08-24 16:06:19 0 [Note] Plugin 'FEEDBACK' is disabled.\n2023-08-24 16:06:19 0 [Note] Server socket created on IP: '::'.\n```\n\n解決辦法：\n\n1. 先到路徑：`C:\\xampp\\mysql\\data`\n2. 將 data 資料夾備份\n3. 再建立一個新的 data 資料夾\n4. 建立後重啟 mysql\n5. 重啟失敗後，data 資料夾會新增程式自動建立的檔案\n6. 此時將`C:\\xampp\\mysql\\backup`中的資料夾複製到 data 資料夾中\n7. 這時再重啟 mysql 已經可以正常運行了，接下來將就的資料庫加回來\n8. 此時先關閉 mysql，將剛剛備份的 data 資料夾底下的資料夾與 `ibdata1` 檔案，複製到新的 data 資料夾底下\n9. 重啟 mysql 即可\n\n### macOS Monterey 上安裝 PHP\n\n> 問題：安裝完 MAMP 之後，要用終端機安裝 composer，結果出現`zsh: command not found: php`\n>\n> 原因：MacOS Monterey 版本，預設沒有安裝 PHP。\n\n1. 安裝 PHP\n   [Installing PHP on your Mac](https://daily-dev-tips.com/posts/installing-php-on-your-mac/)\n\n1. 安裝 Homebrew\n   在 terminal 輸入\n\n   ```terminal\n   /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n   ```\n\n   顯示路徑問題的解決辦法\n\n   ```terminal\n   echo 'eval \"$(/opt/homebrew/bin/brew shellenv)\"' >> /Users/changgenglu/.zprofile\n\n   eval \"$(/opt/homebrew/bin/brew shellenv)\"\n   ```\n\n1. 使用 Homebrew 安裝 PHP\n   先確定 Homebrew 安裝成功\n\n   ```terminal\n   brew update\n   brew doctor\n   ```\n\n   安裝 PHP\n\n   ```terminal\n   brew install php\n   ```\n\n   安裝特定版本\n\n   ```terminal\n   brew install php@7.4\n   ```\n\n   - 安裝指定版本後，並不會自動切換 PHP 本版本\n\n1. 使用 Homebrew 切換 PHP\n   檢查當前版本\n\n   ```terminal\n   php -v\n\n   # PHP 8.0.1 (cli) (built: Jan  8 2021 01:27:28) ( NTS )\n   ```\n\n   取消該版本\n\n   ```terminal\n   brew unlink php@8.0\n   ```\n\n   選擇版本\n\n   ```terminal\n   brew link php@7.4\n   ```\n\n   出現路徑問題，提示：須遜行腳本來添加路徑\n\n   ```terminal\n   echo 'export PATH=\"/opt/homebrew/opt/php@7.4/bin:$PATH\"' >> ~/.zshrc\n\n   ```\n\n### 2. 安裝 composer\n\n#### windows 透過 composer 官網下載 composer 安裝檔\n\n#### 下載 Composer: MacOS\n\n- 代碼以[Composer 官網](https://getcomposer.org/download/)為主\n\n下載安裝程序到當前目錄\n\n```bash\nphp -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\"\n```\n\n驗證安裝程序\n\n```bash\nphp -r \"if (hash_file('sha384', 'composer-setup.php') === '906a84df04cea2aa72f40b5f787e49f22d4c2f19492ac310e8cba5b96ac8b64115ac402c8cd292b8a03482574915d1a8') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;\"\n```\n\n運行安裝程序\n\n```bash\nphp composer-setup.php\n```\n\n刪除安裝程序\n\n```bash\nphp -r \"unlink('composer-setup.php');\"\n```\n\n- MacOS 如果出現 `zsh: command not found: php`\n\n  原因：MacOS Monterry 版本，沒有包括 PHP。請參考：[macOS Monterey 上安裝 PHP](https://hackmd.io/wnFCr0GUS-iIRxHY2zrBgw)\n\n- MacOS 須確保 Composer 的系統等級 vendor bin 資料夾有放在$PATH 中，這樣作業系統才能找到`laravel` 可執行檔。一般常見的位置如下：\n  - macOS: $HOME/.composer/vendor/bin\n  - Windows: %USERPROFILE%\\AppData\\Roaming\\Composer\\vendor\\bin\n\n#### 全局調用 Composer: MacOS\n\n確認是否成功安裝 Composer\n\n```bash\n# 要看到有composer.phar的檔案\nls\n```\n\n將 composer.phar 放入本地的目錄\n\n```bash\nsudo mv composer.phar /usr/local/bin/composer\n```\n\n測試是否安裝成功\n\n```bash\ncomposer\n```\n\n### 3. 安裝 Visual Studio Code or phpStorm\n\n### 4. Laravel 全域安裝 XAMPP\n\n```bash\ncd c:\\xampp\\htdocs\ncomposer global require laravel/installer\n\nlaravel new project_name\n\ncd project_name\n\nphp artisan serve\n```\n\n## 從 Git clone Laravel 專案\n\n由於安全性及維護的考量，Laravel 預設有 .gitignore，所以較為敏感的檔案，不會被 push 上去。\n因此專案 clone 下來之後，必須要重建才能正常執行。\n\n### 開發環境設定\n\n1. 安裝依賴套件\n\n   ```bash\n   composer install\n   ```\n\n2. 設定.env 檔\n\n   複製.env.example 並更改為.env\n\n   ```bash\n   cp .env.example .env\n   ```\n\n   修改.env\n\n3. 設定加密的 APP_KEY\n\n   ```bash\n   php artisan key:generate\n   ```\n\n4. 設定資料庫\n\n   建立 MySQL 所需的資料庫\n\n5. Migration 和 Seeding 建立資料表結構\n\n   ```cmd\n   php artisan migrate\n   &\n   php artisan db:seed\n   &\n   php artisan migrate --seed\n   ```\n\n6. 若有安裝 passport 需運行命令產生 Access Token\n\n   ```bash\n   php artisan passport:install\n   ```\n\n7. 建立符號連結\n   如果有使用到 public storage （如：Storage::disk('public')），\n   記得使用以下指令，將 storage 軟連結到 storage/app/public\n\n   ```cmd\n   php artisan storage:link\n   ```\n\n8. 設定伺服器\n\n   例如到 NGINX 新增、調整 conf 檔\n\n9. 設定任務排程\n\n   如果有在 Laravel 中定義排程的任務，\n   記得在 crontab 中增加 Laravel 指令排程器\n\n   ```cmd\n   # 在 crontab -e 中\n   * * * * * php /path-to-your-project/artisan schedule:run >> /dev/null 2>&1\n   ```\n\n### 上線環境設定\n\n1. 安裝 composer 排除 dev 項目\n\n   ```bash\n   composer install --optimize-\n   loader --no-dev\n   ```\n\n2. `.env`設定轉為線上並且關閉錯誤提示\n\n   ```php\n   APP_NAME=專案名稱\n   APP_ENV=production\n   APP_KEY=\n   APP_DEBUG=false\n   APP_URL=https://正式網址\n   ```\n\n3. 設定快取\n\n   ```bash\n   php artisan config:cache\n\n   #　下次更新程式記得更新config\n   php artisan config:clear\n   ```\n\n4. Router 快取\n   error: (Unable to prepare route [api/user] for serialization. Uses Closure. )\n\n   ```bash\n   php artisan route:cache\n\n   # 下次更新程式記得更新route\n   php artisan route:clear\n   php artisan cache:clear\n   ```\n\n5. Composer 緩存\n\n   ```bash\n   composer dump\n   load -o\n   # 每次更新composer install 後，都要再執行一次\n   ```\n\n6. 類別緩存\n   error: (Unable to prepare route [api/user] for serialization. Uses Closure. )\n\n   ```bash\n   php artisan optimize\n   ```\n\n7. 清除類別緩存\n\n   ```bash\n   php artisan clear-compiled\n   ```\n\n8. 建立 keygen\n\n   ```bash\n   php artisan key:generate\n   ```\n\n9. 若有安裝 passport 需運行命令產生 Access Token\n\n   ```bash\n   php artisan passport:keys\n   ```\n\n10. 執行\n\n```bash\n# 遷移資料表\nphp artisan migrate\n# 填充資料\nphp artisan db:seed\n```\n\n### composer install 失敗\n\n```shell\nnode: /lib64/libm.so.6: version `GLIBC_2.27` not found (required by node)\nnode: /lib64/libc.so.6: version `GLIBC_2.28` not found (required by node)\nnode: /lib/x86_64-linux-gnu/libc.so.6: version `GLIBC_2.28` not found (required by node)\n```\n\n當出現上面的錯誤訊息，表示 GLIBC 的版本不符合現行系統上的 node 版本。\n\n解決錯誤常見的方法有兩種：\n\n1. 安裝較舊、支援更廣泛的 Node.js (16.x) 版本\n\n   使用 `nvm` 安裝其他版本的 node.js\n\n   ```shell\n   nvm install 16\n   nvm use 16\n   ```\n\n   完成後確認當前版本\n\n   ```shell\n   nvm ls\n   node --version\n   ```\n\n   移除特定版本\n\n   ```shell\n   # 👇️ uninstall Node.js version 13.X.X\n   nvm uninstall 13\n   ```\n\n   若還未安裝 nvm\n\n   ```shell\n   curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh | bash\n   chmod +x ~/.nvm/nvm.sh\n   source ~/.bashrc\n   # 驗證 nvm 是否安裝成功\n   nvm -v\n   ```\n\n2. 將 Linux 操作系統升級到更新版本。\n\n## Laravel ReactJS\n\n> Use laravel/ui Package to install react in laravel with Bootstrap 4.\n\n1. 建立新的專案\n\n   ```cmd\n   composer create-project laravel/laravel --prefer-dist running_in_circles\n\n   laravel new running_in_circles\n   ```\n\n2. 進入 Laravel 項目\n\n   ```cmd\n   cd running_in_circles\n   ```\n\n3. 安裝 laravel/ui\n\n   ```cmd\n   composer require laravel/ui\n   ```\n\n4. 在 Laravel 中安裝 React\n\n   ```cmd\n   php artisan ui react\n   ```\n\n5. 安裝所需的軟件包\n\n   ```cmd\n   <!-- 檢查node和npm是否安裝 -->\n       node -v\n       npm -v\n   <!-- 建立一個node_modules資料夾並自動安裝package.json -->\n       npm install\n   ```\n\n6. 在 Laravel 中設置 React 組件\n\n   ```javascript\n   // 路徑 ==> resource/js/components/User.js\n   import React from \"react\";\n   import ReactDOM from \"react-dom\";\n\n   function User() {\n     return (\n       <div className=\"container mt-5\">\n         <div className=\"row justify-content-center\">\n           <div className=\"col-md-8\">\n             <div className=\"card text-center\">\n               <div className=\"card-header\">\n                 <h2>React Component in Laravel</h2>\n               </div>\n               <div className=\"card-body\">I am tiny React component in Laravel app!</div>\n             </div>\n           </div>\n         </div>\n       </div>\n     );\n   }\n\n   export default User;\n\n   // DOM element\n   if (document.getElementById(\"user\")) {\n     ReactDOM.render(<User />, document.getElementById(\"user\"));\n   }\n   ```\n\n7. 修改 resources/js/app.js 註冊 React 文件\n\n   ```javascript\n   require(\"./bootstrap\");\n\n   // Register React components\n   require(\"./components/Example\");\n   require(\"./components/User\");\n   ```\n\n8. 修改 views/welcome.blade.php 模板\n\n   ```html\n   <!DOCTYPE html>\n   <html lang=\"{{ str_replace('_', '-', app()->getLocale()) }}\">\n     <head>\n       <meta charset=\"utf-8\" />\n       <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n       <title>Laravel</title>\n       <!-- Styles -->\n       <link href=\"{{ asset('css/app.css') }}\" rel=\"stylesheet\" />\n     </head>\n\n     <body>\n       <!-- React root DOM -->\n       <div id=\"user\"></div>\n       <!-- React JS -->\n       <script src=\"{{ asset('js/app.js') }}\" defer></script>\n     </body>\n   </html>\n   ```\n\n9. 執行命令編譯 Laravel 和 React.js\n\n   ```cmd\n   npm run watch\n   ```\n\n10. 編譯成功，運行 laravel\n\n```cmd\nphp artisan serve\n```\n\n## Laravel 安裝 bootstrap\n\n### Laravel 8\n\n1. 終端機\n\n   ```cmd\n   npm install\n   ```\n\n2. 建立文件(如果尚未建立) `resources/sass/app.scss` 並引入:\n   `@import '~bootstrap';`\n\n3. 在 webpack.mix.js 加入\n\n   ```php\n   mix.sass('resources/sass/app.scss', 'public/css')\n   ```\n\n4. 終端機\n\n   ```cmd\n   npm run dev\n   ```\n\n5. 現在可以引用 bootstrap\n\n   ```php\n   <link href=\"{{ asset('css/app.css') }}\" rel=\"stylesheet\">\n   ```\n\n### Laravel 6\n\n1. 終端機輸入\n\n   ```cmd\n   composer require laravel/ui=\"1.*\" --dev\n   ```\n\n2. 輸入\n\n   ```cmd\n   php artisan ui bootstrap\n   ```\n\n3. 如果出現 \"Command \"ui\" is not defined.\"\n\n   ```cmd\n   composer update\n   ```\n\n4. 執行\n\n   ```cmd\n   npm install\n   ```\n\n5. 終端機\n\n   ```cmd\n   npm run dev\n   ```\n\n6. 現在可以引入\n\n   ```php\n   <link rel=\"stylesheet\" href=\"/css/app.css\">\n   <script src=\"/js/app.js\"></script>\n   ```\n\n## Laravel Telescope\n\n提供察看 laravel 中的請求、異常、日誌、資料庫查詢等等功能\n\n### 安裝\n\n利用 composer 安裝到 laravel 中\n\n```bash\ncomposer require laravel/telescope\n```\n\n安裝後使用 artisan 命令發布資產\n\n```bash\nphp artisan telescope:install\n```\n\n並運行 migrate\n\n```bash\nphp artisan migrate\n```\n\n若指定在開發環境中安裝，則再發布資產後薛將配置文件，從 config/app.php 中註解，並在 AppServiceProvider 手動註冊服務\n\n```bash\n# 指定在開發環境中安裝\ncomposer require laravel/telescope --dev\n```\n","tocContent":"- [Laravel 環境設置](#laravel-環境設置)\n  - [環境初始設定](#環境初始設定)\n    - [1. 安裝 XAMPP or phpEnv](#1-安裝-xampp-or-phpenv)\n      - [xampp 更改 php 版本: 版本 5 =\\> 7](#xampp-更改-php-版本-版本-5--7)\n      - [XAMPP 除錯](#xampp-除錯)\n    - [macOS Monterey 上安裝 PHP](#macos-monterey-上安裝-php)\n    - [2. 安裝 composer](#2-安裝-composer)\n      - [windows 透過 composer 官網下載 composer 安裝檔](#windows-透過-composer-官網下載-composer-安裝檔)\n      - [下載 Composer: MacOS](#下載-composer-macos)\n      - [全局調用 Composer: MacOS](#全局調用-composer-macos)\n    - [3. 安裝 Visual Studio Code or phpStorm](#3-安裝-visual-studio-code-or-phpstorm)\n    - [4. Laravel 全域安裝 XAMPP](#4-laravel-全域安裝-xampp)\n  - [從 Git clone Laravel 專案](#從-git-clone-laravel-專案)\n    - [開發環境設定](#開發環境設定)\n    - [上線環境設定](#上線環境設定)\n    - [composer install 失敗](#composer-install-失敗)\n  - [Laravel ReactJS](#laravel-reactjs)\n  - [Laravel 安裝 bootstrap](#laravel-安裝-bootstrap)\n    - [Laravel 8](#laravel-8)\n    - [Laravel 6](#laravel-6)\n  - [Laravel Telescope](#laravel-telescope)\n    - [安裝](#安裝)"}