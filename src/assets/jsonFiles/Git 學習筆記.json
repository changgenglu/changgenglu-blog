{"name":"Git 學習筆記.md","content":"# Git 學習筆記\n\n>\n\n## 常用指令\n\n### Git 常用指令\n\n- `git init` 將目前的目錄初始化為 Git 目錄, 建立本地儲存庫\n- `git config` 設定或檢視 Git 設定檔資訊\n- `git add` 將檔案加入 Git 暫存區\n- `git rm` 將檔案移出 Git 暫存區\n- `git status` 顯示 Git 狀態\n- `git commit` 將暫存區的檔案提交至儲存庫納入版本控制\n- `git log` 顯示過去歷次的版本異動\n- `git reflog` 顯示完整的版本異動歷史紀錄\n- `git show` 顯示指定版本的異動內容\n- `git branch` 建立一個新分支 (branch)\n- `git checkout` 取出分支內容還原為工作目錄\n- `git merge` 合併分支\n- `git reset` 重設某一版本\n- `git clone` 從遠端儲存庫 (GitHub 或 Bitbucket) 複製副本至本地儲存庫\n- `git push` 將本地儲存庫內容推送到遠端儲存庫\n- `git pull` 將遠端儲存庫拉回合併更新到本地儲存庫\n\n## Git Flow 開發流程觀念\n\n> [參考資料：Git Flow 是什麼？為什麼需要這種東西？](https://gitbook.tw/chapters/gitflow/why-need-git-flow)\n>\n> [參考資料：Git flow 分支策略](https://git-tutorial.readthedocs.io/zh/latest/branchingmodel.html)\n\n### 分支介紹\n\n#### 長期分支\n\n- **main**(原為 master, 於 2020/10 變更)\n  主要為穩定，上線的版本。不該允許開發者直接 commit 到此分支。\n  一般在專案初期，環境建置好就會拉 develop 分支出去，以維持 main 獨立性。\n- **develop**\n  所有開發分支的基礎，當新增/修改功能時，會從此分支切出去，完成後再合併回來。\n\n#### Topic 任務分支\n\n- **feature**\n\n  開發新功能時，會從 develop 切出 feature 分支，其命名方式採`feature/功能名稱`。只要新功能未完成，功 能分支就會持續存在，直到開發完成並合併回開發分支，或直到放棄此新功能。\n\n  此分支通常只會存在於該功能的開發者的本機端 repository，不會出現在遠端的庫中。\n\n  - 原則：\n    - 從 develop 分支分離\n    - 合併回 develop 分支\n    - 分支命名原則：除了 master, develop, release-\\*, hotfix 之外的功能名稱都可以\n\n  詳細步驟：\n\n  1. 開新功能分支\n\n     ```bash\n     # 從 develop 分支開一個命為 new-feature 的分支\n     $ git checkout -b feature/new-feature develop\n     ```\n\n  2. 將已開發完成之功能合併回 develop 分支\n\n     ```bash\n     # 切換至開發分支\n     $ git checkout develop\n\n     # 將 new-feature 分支合併到開發分支\n     $ git merge --no-ff feature/new-feature\n\n     # 刪除 new-feature 分支\n     $ git branch -d feature/new-feature\n\n     # 將開發分支push到遠端的origin\n     $ git push origin develop\n     ```\n\n  `--no-ff` 可保存 feature 上面的歷史資訊，讓開發者可以更瞭解開發的來龍去脈(No Fast Forward)。\n\n- **release**\n\n  由 develop 切出來，正式上線前的最終測試分支，通過後會將 release 合併到 main 以及 develop 確保在 release 時修正的一些問題能同步到 main 與 develop。\n\n  制訂版本號碼的最佳時機是在發布分支時。\n\n  - 原則\n    - 從 develop 分離\n    - 合併回 develop 與 main 分支\n    - 分支命名規則：release-\\*(版本號)\n\n  詳細步驟：\n\n  1. 開發佈分支\n\n     ```bash\n     # 從開發分支開一支名為「release-1.2」的分支，開完後切換到release-1.2分支。\n     $ git checkout -b release-1.2 develop\n     ```\n\n  2. 制訂版本號\n\n     ```bash\n     # commit 一個版本，commmit 訊息為「版本跳躍至1.2]\n     $ git commit -a -m \"Bump version number to 1.2\"\n     ```\n\n  3. 將已制訂好的 metadata 或已修復錯誤的發佈分支，合併到主分支\n\n     ```bash\n     # 切換至主要分支\n     $ git checkout master\n\n     # 將release-1.2分支合併到主要分支\n     $ git merge --no-ff release-1.2\n\n     # 上tag\n     $ git tag -a 1.2\n     ```\n\n  4. 將已制訂好 metadata 或已修復錯誤的發佈分支，合併回開發分支\n\n     ```bash\n     # 切換至開發分支\n     $ git checkout develop\n\n     # 將release-1.2分支合併回開發分支\n     $ git merge --no-ff release-1.2\n     ```\n\n  5. 刪除 release-1.2 分支\n\n     ```bash\n     # 刪除分支\n     $ git branch -d release-1.2\n     ```\n\n- **hotfix**\n\n  上線版本需緊急修復時，由 main 直接切出的 hotfix 分支，修復完成也會合併至 main 分支。\n\n  由於 develop 在開發中，若從 develop 切 hotfix 分支，再合併至 main 分支時可能會出現更嚴重的問題。\n\n  當 bug 修復後，可合併到開發分支，或是合併回主分支，並標上另一版本號的 tag。\n\n  - 原則：\n    - 從主分支分離\n    - 合併回開發分支或主分支\n    - 分支命名規則為：hotfix-\\*\n\n  詳細步驟：\n\n  1. 開修復分支\n\n     ```bash\n     # 從主要分支開一支名為「hotfix-1.2.1」的分支，開完後切換到hotfix-1.2.1分支。\n     $ git checkout -b hotfix-1.2.1 master\n     ```\n\n  2. 制訂版本號\n\n     ```bash\n     # commit 一個版本，commit 訊息為「版本號跳躍至1.2.1」\n     $ git commit -a -m \"Bumped version number to 1.2.1\"\n     ```\n\n  3. 修正 bug 並 commit 一版\n\n     ```bash\n     # commit 修正版\n     $ git commit -m \"Fixed severe production problem\"\n     ```\n\n  4. 將修好的分支合併回主分支\n\n     ```bash\n     # 切換至主要分支\n     $ git checkout master\n\n     # 將hotfix-1.2.1分支合併到主要分支\n     $ git merge --no-ff hotfix-1.2.1\n\n     # 上tag\n     $ git tag -a 1.2.1\n     ```\n\n  5. 將修好的分支合併回 develop 分支\n\n     ```bash\n     # 切換至開發分支\n     $ git checkout develop\n\n     # 將hotfix-1.2.1分支合併回開發分支\n     $ git merge --no-ff hotfix-1.2.1\n     ```\n\n     **特別注意** 若修復分支與發佈分支同時存在，則當 bug 修正後，就不是合併回開發分支而是發佈分支。修 補程式就會在從未來發布分支合併回開發分支時，一併將 bug 修補完。\n\n  6. 刪除 hotfix 分支\n\n     ```bash\n     # 刪除分支\n     $ git branch -d hotfix-1.2.1\n     ```\n\n### Git Commit 規範\n\n> [Git Commit Message 這樣寫會更好，替專案引入規範與範例](https://ithelp.ithome.com.tw/articles/10228738)\n\n#### Commit Message 格式\n\n```bash\n\n# 標題: <type>(<scope>): <subject>\n# - type: feat, fix, docs, style, refactor, test, chore\n# - scope: 如果修改範圍為全局修改或難以分配給單個組件，可略\n# - subject: 以動詞開頭的簡短描述\n#\n# 正文: 內文需包含:\n# * 程式碼更訂的原因(問題、原因、需求)\n# * 調整項目\n# * 與先前行為的對比\n#\n# 結尾:\n# - 任務編號(如果有)\n# - 重大變化(紀錄不兼容的更動)，\n#   以 BREAKING CHANGE: 開頭，後面是對變動的描述、以及變動原因和遷移方法。\n#\n```\n\n#### 標題\n\n- Type 類型\n  - **feat** - 新增/修改功能 (Feature)\n  - **fix** - 修正 Bug (bug fix)\n  - **docs** - 修改內容/新增文件 (documentation)\n  - **style** - 修改程式碼格式或風格，不影響原有運作，包含修改縮排、新增縮排...等等\n  - **refactor** - 重構程式碼，不屬於 bug 修正，也不屬於新功能\n  - **perf** - 改善效能 (A code change that improves performance)\n  - **test** - 增加/修改測試功能 (when adding missing tests)\n  - **chore** - 增加或修改第三方套件(輔助工具)等 (maintain)\n  - **revert** - 撤銷回覆先前的 commit 例如：revert: type(scope): subject (回覆版本：xxxx)。\n  - **build** - 改變打包流程\n- scope 範圍\n  - 任何可以劃分程式碼改變的範圍，例如：page, router, compile, component...等等。\n- subject 主題\n  - 對程式碼修改做簡單描述\n\n#### 正文\n\n描述測次程式碼變更的動機，並說出這個提交與改變前的對比。\n\n1. 為什麼這個提交是必要的？\n2. 他如何解決問題？\n3. 這個提交會對專案產生什麼副作用？\n   - 可以有效辨認次提交是做了太多改變。若有一兩個副作用尚可接受，但若五、六個以上，則表示改變幅度太大。\n\n#### Footer\n\n結尾通常會有兩種：\n\n1. 標註 Breaking Changes 應以單詞 BREAKING CHANGE 開頭：用空格或兩個換行符。後面是對變動的描述和變動的理由。\n\n```bash\nBREAKING CHANGE: isolate scope bindings definition has changed.\n\n    To migrate the code follow the example below:\n\n    Before:\n\n    scope: {\n      myAttr: 'attribute',\n    }\n\n    After:\n\n    scope: {\n      myAttr: '@',\n    }\n\n    \"The removed `inject` wasn't generally useful for directives so there should be no code using it.\"\n```\n\n如果當前 commit 還原了先前的 commit，則應以 revert：開頭，後跟還原的 commit 的 header。在 body 中必須寫成：This reverts commit \\<hash>。其中 hash 是要還原的 commit 的 SHA 標識。\n\n```bash\nrevert: feat(pencil): add 'delete' option\n\nThis reverts commit 667ecc1654a317a13331b17617d973392f415f02.\n```\n\n#### commit 模板\n\n在~/.gitconfig 新增\n\n```config\n[commit]\ntemplate = ~/.gitmessage\n```\n\n新建 ~/.gitmessage\n\n```vim\n\n# 標題: <type>(<scope>): <subject>\n# - type: feat, fix, docs, style, refactor, test, chore\n# - scope: 如果修改範圍為全局修改或難以分配給單個組件，可略\n# - subject: 以動詞開頭的簡短描述\n#\n# 正文: 內文需包含:\n# * 程式碼更訂的原因(問題、原因、需求)\n# * 調整項目\n# * 與先前行為的對比\n#\n# 結尾:\n# - 任務編號(如果有)\n# - 重大變化(紀錄不兼容的更動)，\n#   以 BREAKING CHANGE: 開頭，後面是對變動的描述、以及變動原因和遷移方法。\n#\n```\n\n## Git 本地操作情境\n\n### 將 git 預設的編輯器改為 vim\n\n```bash\ngit config --global core.editor \"vim\"\n```\n\n### 取消 commit：git reset\n\nGit 的 `reset`指令，比較像是「前往」或是「變成」，並不會真的重新設定。\n\n`reset`後的東西都還可以撿的回來。\n\n- 確認 git 紀錄\n\n  ```bash\n  git log --oneline\n  af75a42 (HEAD -> develop) 0327\n  1baa403 (origin/develop) no message\n  13fd2dc 0223\n  a640c49 0222新增\n  e09ecae init commit\n  ```\n\n- 利用相對位置取消 commit\n\n  ```bash\n  git reset af75a42^\n  ```\n\n  `^`符號表示「前一次」的意思，`af75a42^`是指`af75a42`這個 commit 的「前一次」，`af75a42^^`則是往前 兩次，以此類推。\n\n  如果要倒退五次可以寫成`af75a42~5`。\n\n  另外`HEAD`和`develop`也都指向`af75a42`這個 commit，所以也可以寫成\n\n  ```bash\n  git reset develop^\n  &\n  git reset HEAD^\n  ```\n\n- 利用絕對位置取消 commit\n\n  ```bash\n  git reset 1baa403\n  ```\n\n  他會切會到`1baa403`這個 commit，剛好是`af75a42`的前一個 commit，和取消最後一次 commit 的效果一 樣。\n\n### git commit 打錯字\n\n```bash\ngit commit --amend\n```\n\n編輯最後一個提交的 commit\n\n### 將未完成的工作暫存：git stash\n\n工作做到一半，需要切換到別的分支進行其他任務。\n先看一下目前的狀態：\n\n```bash\ngit status\nOn branch feature/admin_controller\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n        modified:   app/Http/Controllers/RegionController.php\n        modified:   app/Models/Room.php\n        modified:   app/Models/User.php\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n```\n\n- 將現階段工作暫存\n\n  目前正在修改 `app/Http/Controllers/RegionController.php` `app/Models/Room.php` `app/Models/   User.php`，使用 `git stash` 把他們存起來。\n\n  ```bash\n  git stash\n  Saved working directory and index state WIP on feature/admin_controller: c745ccb style    (MemberController): 修改response的資料與取消註解\n  ```\n\n  > **注意**\n  >\n  > Untracked 狀態的檔案無法被 stash，需要額外使用 `-u` 參數\n\n  看一下目前的狀態\n\n  ```bash\n  git status\n  On branch cat\n  nothing to commit, working tree clean\n  ```\n\n  `git stash list` 可以查看暫存檔案\n\n  ```bash\n  git stash list\n  stash@{0}: WIP on cat: b174a5a add cat 2\n  ```\n\n- 取出暫存\n\n  當任務完成，要把剛剛暫存的東西拿回來\n\n  ```bash\n  git stash pop stash@{0}\n  On branch feature/add_new_api_route\n  Changes not staged for commit:\n    (use \"git add <file>...\" to update what will be committed)\n    (use \"git restore <file>...\" to discard changes in working directory)\n          modified:   app/Http/Controllers/RegionController.php\n          modified:   app/Models/Room.php\n          modified:   app/Models/User.php\n\n  no changes added to commit (use \"git add\" and/or \"git commit -a\")\n  Dropped stash@{0} (8810ecbe89e1c1412c0c47d7fb7ded9f3e29aa53)\n  ```\n\n  使用 `pop` 指令，可以將某個 `stash` 拿出來並套到目前的分支上。套用成功之後，套用過的 `stash` 就會 被刪除。\n  如果沒有指定 `pop` 哪一個 `stash`，將會從編號小的也就是 `stash@{0}` 開始使用，也就是最後存進來的。\n\n  要刪除 `stash` 可以用 `drop` 指令\n\n  ```bash\n  git stash drop stash@{0}\n  Dropped stash@{0} (87390c02bbfc8cf7a38fb42f6f3a357e51ce6cd1)\n  ```\n\n  如果要把 `stash` 撿回來，但不想刪除，可以使用 `apply`\n\n  ```bash\n  git stash apply stash@{0}\n  ```\n\n- 主要指令\n\n  - git stash 將當前分支的修改內容加入暫存\n  - git stash -u 將 untracked 檔案加入暫存\n  - git stash save -u \"\" 將 untracked 檔案加入暫存並撰寫註解\n  - git stash push 將修改內容加入暫存(完整指令)\n  - git stash push -m 將修改內容加入暫存，並加入註解\n  - git stash list 瀏覽所有暫存項目\n  - git stash pop 將最新暫存套用至當前分支，成功後刪除暫存\n  - git stash pop stash@{1} 將指定暫存套用至當前分支，成功後刪除暫存\n  - git stash apply 套用最新暫存，成功後保留暫存\n  - git stash apply stash@{1} 套用指定暫存，成功後保留暫存\n  - git stash drop 清除最新暫存\n  - git stash drop stash@{1} 清除指定暫存\n  - git stash clear 清除全部暫存\n\n### 解決合併衝突\n\n當在不同分支中，修改同一檔案的不同行，此時合併不會發生問題。\n倘若修改的是同一行，就會發生合併衝突。\n\n```bash\ngit merge feature/create_device_model\nAuto-merging app-src/app/Http/Controllers/UserController.php\nCONFLICT (content): Merge conflict in app-src/app/Http/Controllers/UserController.php\nAuto-merging app-src/app/Models/Room.php\nAuto-merging app-src/app/Models/User.php\nCONFLICT (content): Merge conflict in app-src/app/Models/User.php\nAutomatic merge failed; fix conflicts and then commit the result.\n```\n\n有出現 CONFLICT (content)提示的檔案，為發生合併衝突的檔案。\n此時在檔案中，Git 會將衝突位置標示出來。\n\n```php\n<<<<<<< HEAD\n當前內容。\n=======\n要合併的目標分支上歧異的內容。\n>>>>>>> feature/i_am_old_branch\n```\n\n修正衝突點後，將修改的檔案暫存，最後進行提交。\n\n```bash\ngit add --all\ngit commit\n```\n\n### 取消 merge 清除合併紀錄\n\n> [Git 實戰技巧 - 取消合併](https://blog.darkthread.net/blog/git-undo-merge/)\n\n當 feature 與 develop 分支的合併位置有誤，想要拆掉重做\n\n```bash\ndb7915e (HEAD -> dev, feature/mqtt_test) feat: 測試mqtt連線\nb65d2d2 (tag: release_v2.0.0, origin/dev) no message\n0a198be refactor(firmware index page): 優化firmware前端頁面\n539942f (origin/master, origin/HEAD, master) Merge branch 'feature/fix_firmware_download' into dev\n1a4515a fix(firmwareController): 修復firmware下載問題\nd1e204f docs(README): 修改上線環境設定\n```\n\n`git rebase -i` ：重整目標 commit 之後的 commit：重整清單中不會有下指令的 commit 而是顯示其後所有的 commit。\n\n```bash\ngit rebase -i 0a198be\n```\n\n輸入指令之後會進入編輯器\n\n```vim\npick db7915e feat: 測試mqtt連線\npick b65d2d2 no message\n\n# Rebase 539942f..879c462 onto 539942f (3 commands)\n#\n# Commands:\n# p, pick <commit> = use commit\n# r, reword <commit> = use commit, but edit the commit message\n# e, edit <commit> = use commit, but stop for amending\n# s, squash <commit> = use commit, but meld into previous commit\n# f, fixup [-C | -c] <commit> = like \"squash\" but keep only the previous\n#                    commit's log message, unless -C is used, in which case\n#                    keep only this commit's message; -c is same as -C but\n#                    opens the editor\n```\n\n並將要取消的 commit 改為 drop\n\n```vim\ndrip db7915e feat: 測試mqtt連線\npick b65d2d2 no message\n```\n\n```bash\nb65d2d2 (HEAD -> dev, tag: release_v2.0.0, origin/dev) no message\n0a198be refactor(firmware index page): 優化firmware前端頁面\n539942f (origin/master, origin/HEAD, master) Merge branch 'feature/fix_firmware_download' into dev\n1a4515a fix(firmwareController): 修復firmware下載問題\n```\n\n### Git 別名\n\n修改 `~/.gitconfig`\n\n```vim\n[alias]\nst = status\nptlg = log --color --graph --pretty=format:'%C(yellow)%h%Creset %C(bold brightred)%d%Creset %C()%s%Creset \\n %C(blue italic dim)-- %an%Creset %C(green italic dim)(%cr)%Creset'\nadal = add --all\n```\n\n## git 遠端操作\n\n### 更改 git remote 位置\n\n當修改 git repo 的名稱或是路徑時，若要在本機進行 push 或是 pull 的指令時，會出現：remote: This repository moved. Please use the new location [new location]\n\n- 解決辦法：重新設定 remote url\n\n  ```bash\n  git remote set-url origin https://XXX.git\n  ```\n\n  檢查 remote url 是否修改成功\n\n  ```bash\n  git remote -v\n  ```\n\n### 在 git server 建立新儲存庫\n\n> 主機架設 ssh server\n>\n> 主機安裝好 git\n\n1. 在要建立遠端 repository 的資料夾底下，新增專案資料夾 `<project-name>.git`\n2. 切換到新建的資要夾底下，初始化遠端倉庫\n\n   ```shell\n    git init --bare\n   ```\n\n3. 確認資料夾中以建立的檔案\n\n   ```shell\n   $ ls\n   HEAD  config  description  hooks/  info/  objects/  refs/\n   ```\n\n4. 提交本地專案或將本地專案的遠端指向此 repository\n\n### 將本地專案新增至遠端儲存庫\n\n```bash\ngit init\n\ngit add .\n\ngit commit -m \"First commit\"\n```\n\n添加遠端儲存庫的路徑\n\n```bash\n## git remote add origin \"remote repository URL\"\ngit remote add origin //fishbone/研發部/軟體區/GitServer/V5/*.git\n```\n\n將遠端儲存庫初始化\n\n```bash\n## git init --bare \"remote repository URL\"\ngit init --bare //fishbone/研發部/韌體區/GitServer/V5/*.git\n```\n\n將本地儲存庫內容推送到遠端\n\n```bash\ngit push --set-upstream origin main\n```\n\n### 轉移資料庫：git mirror\n\n可以轉移整個 repository 的資訊，包括 branch, tags\n\n將 repo clone --mirror 到本地\n\n```bash\ngit clone --mirror gitolite@git.lab317.org:dinos80152/Authentication\n```\n\n接著在 github 建立新的 repository\n\n進到專案資料夾，設定新的遠端 git repo 位置\n\n```bash\ncd your_project.git/\ngit remote set-url --push origin https://github.com/your_name/your_project.git\n```\n\nlocal 更新 remote branch ,最後將整包 push 上去\n\n```bash\ngit push --mirror\n```\n\n或者一個指令直接指向遠端 repo\n\n```bash\ngit push --mirror https://github.com/your_name/your_project.git\n```\n\n## Git 管理\n\n### 使用 VSCode 管理 Git\n\n> [Visual Studio Code 無需輸入 Git 指令，透過界面按鈕就可輕鬆管理 Github 中的專案檔案](https://www.minwt.com/webdesign-dev/22926.html)\n\n## GitHub 操作\n\n### 將本地專案上傳到 github\n\n1. git init\n2. git add .\n3. git commit -m \"init commit\"\n4. git remote add origin `https://github.com/<username>/<repo>.git`\n5. git push -u origin master\n\n### Https 設定 Token\n\n- 問題：\n\n  當使用推送，輸入 github 密碼會出現錯誤。\n\n  ```bash\n  changgenglu@masenyuandeMacBook-Air ~ % git push -u origin master\n  remote: Support for password authentication was removed on August 13, 2021. Please use a  personal access token instead.\n  remote: Please see https://github.blog/ 2020-12-15-token-authentication-requirements-for-git-operations/ for more information.\n  fatal: unable to access 'https://github.com/changgenglu/your_project.git/': The requested   URL returned error: 403\n  ```\n\n  大致意思是，密碼驗證於 2021 年 8 月 13 日不再支援，也就是今天不能再用密碼方式去提交程式碼。請用使 用 **personal access token** 替代。\n\n- 解決方法：設定 personal access token\n\n  - 開啟 GitHub.com -> Setting -> Developer settings -> Personal access tokens\n  - 按下`Generate new token`\n  - Note 欄位填入 token 的備註\n  - Expiration 設定 token 的時效\n  - Select scopes 設定權限（基本全部開啟）\n  - 按下`Generate token`\n  - 複製 token 代碼\n\n  再次使用終端機推送\n\n  ```bash\n  git push -u origin master\n  ```\n\n  輸入 github 密碼的地方，貼上 token 代碼\n\n### 設定 SSH\n\n1. 輸入指令產生 SHH\n\n```bash\nssh-keygen\n```\n\n產生\n\n```bash\n$ Enter file in which to save the key (/Users/changgenglu/.ssh/id_rsa):\n# 這行只是確定存在哪\n$ Overwrite (y/n)?\n# 如果原本就有金鑰會跳出此問題，覆蓋嗎？ (是)\n$ Enter passphrase (empty for no passphrase):\n$ Enter same passphrase again:\n# 輸入密碼，再次確認輸入密碼\n```\n\n此處的輸入密碼為使用至個金鑰的密碼，可以選擇不輸入。\n\n2. 產生 SSH 連線所需的公鑰內容\n\n```bash\ncat ~/.ssh/id_rsa.pub\n```\n\n輸出實例\n\n```bash\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDFp+A3qe4qm1Dkw66LN/  vNGlufX5iC9VERfuUiXHNM5L3hQuz6wO8WuzFv+zDIHRPGUl616oLXTHTqommuO0GZavDo+lbUIRkSBM9j/9tr  +hlF4LPTT4ggjOgzLCHTrSyzcmcdykgBfnDgX3aYfZbhCEcWdERUxWFNnDf +YYlNd8L6LMKSIce61nhqiSLNbugDCrE0IH+/1hoS3LNoag9V05Qwo5yZ6srLNJT8uISoqvJv5BwSpBL9ImnePx  +LzDiVXlJMisKf1GSXdVuWmVWlKrZOsadk4ZkSNH2cL1wgkNvAUbydWKG9Ag4TfI/khKwUXyhT  +7V4jWsJusDXZxafylZma4qeOsaLAN4ScSStnOoSm1CxeNqmPsQpAGbtvx49yB2 +c4HFsa68VzcwV1oejhh2E67iqqKK53IFN/  qQmYYfhUukY6rgLLHlLkmjLqdVpVcULCP0mMzn4xacFWLwDgOtZK1i97vWaLPyG6hYQQ108zK9i/Cg13p0Z+CUTCs=  changgenglu@masenyuandeMacBook-Air.local\n```\n\n3. 上傳公鑰\n\n到 Github > Settings > SSH and GPG keys 的設定頁面，選擇 New SSH Key。\n\n### 部署靜態頁面到 github\n\n> 參考資料：\n>\n> [[Vue] 將 Vue 專案部署至 Github Pages](https://dean34520.medium.com/vue%E7%B3%BB%E5%88%97%E6%96%87-%E5%B0%87vue%E6%AA%94%E6%A1%88%E9%83%A8%E7%BD%B2%E8%87%B3github-334951cadede)\n\n1. 建立與本地專案相同名稱的 repository\n2. 在專案資料夾中新增 vue.config.js，設定 publishPath\n\n   ```javascript\n   //vue.config.js\n   module.exports = {\n     publicPath: process.env.NODE_ENV === \"production\" ? \"/eric-project/\" : \"/\",\n   };\n   ```\n\n3. 將本地專案推送至雲端\n4. 在專案目錄下新增 deploy.sh 自動化腳本\n\n   ```sh\n    #!/usr/bin/env sh\n    # 當發生錯誤時終止腳本運行\n    set -e\n    # 打包\n    npm run build\n    # 移動至到打包後的dist目錄\n    cd dist\n    # 因為dist資料夾預設是被ignore的，因此在進入dist資料夾後初始化git\n    git init\n    git add -A\n    git commit -m 'deploy'\n    # 部署到 https://github.com/<user-name>/<repo-name>.git 分支為 gh-pages\n    git push -f https://github.com/<user-name>/<repo-name>.git master:gh-pages\n    # 將dist資料夾中的內容推送至遠端eric-project的gh-pages分支中，並強制無條件將舊有的內容取代成目前的內容（指令 git push -f)\n    cd -\n   ```\n\n   github 在部署時只允許三種來源：\n\n   1. master\n   2. gh-pages\n   3. master/docs\n\n5. 執行腳本\n\n   ```shell\n   sh ./deploy.sh\n   ```\n\n   完成後，此時 github 上的 gh-pages 分支會和 vue 專案中的 /dist 資料夾內一樣\n\n6. 進入 setting 頁面的 pages，將 Source 改為 gh-pages\n7. 待部署完成，頁面上方會出現專案頁面的連結\n","tocContent":"- [Git 學習筆記](#git-學習筆記)\n  - [常用指令](#常用指令)\n    - [Git 常用指令](#git-常用指令)\n  - [Git Flow 開發流程觀念](#git-flow-開發流程觀念)\n    - [分支介紹](#分支介紹)\n      - [長期分支](#長期分支)\n      - [Topic 任務分支](#topic-任務分支)\n    - [Git Commit 規範](#git-commit-規範)\n      - [Commit Message 格式](#commit-message-格式)\n      - [標題](#標題)\n      - [正文](#正文)\n      - [Footer](#footer)\n      - [commit 模板](#commit-模板)\n  - [Git 本地操作情境](#git-本地操作情境)\n    - [將 git 預設的編輯器改為 vim](#將-git-預設的編輯器改為-vim)\n    - [取消 commit：git reset](#取消-commitgit-reset)\n    - [git commit 打錯字](#git-commit-打錯字)\n    - [將未完成的工作暫存：git stash](#將未完成的工作暫存git-stash)\n    - [解決合併衝突](#解決合併衝突)\n    - [取消 merge 清除合併紀錄](#取消-merge-清除合併紀錄)\n    - [Git 別名](#git-別名)\n  - [git 遠端操作](#git-遠端操作)\n    - [更改 git remote 位置](#更改-git-remote-位置)\n    - [在 git server 建立新儲存庫](#在-git-server-建立新儲存庫)\n    - [將本地專案新增至遠端儲存庫](#將本地專案新增至遠端儲存庫)\n    - [轉移資料庫：git mirror](#轉移資料庫git-mirror)\n  - [Git 管理](#git-管理)\n    - [使用 VSCode 管理 Git](#使用-vscode-管理-git)\n  - [GitHub 操作](#github-操作)\n    - [將本地專案上傳到 github](#將本地專案上傳到-github)\n    - [Https 設定 Token](#https-設定-token)\n    - [設定 SSH](#設定-ssh)\n    - [部署靜態頁面到 github](#部署靜態頁面到-github)"}