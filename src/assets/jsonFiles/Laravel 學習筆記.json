{"name":"Laravel 學習筆記.md","content":"# Laravel 學習筆記\r\n\r\n> 請先完成 laravel 環境設置\r\n\r\n>\r\n\r\n## 基礎建立\r\n\r\n- 建立新的專案\r\n\r\n  ```cmd\r\n  laravel new ProjectName\r\n  ```\r\n\r\n- 安裝指定本版\r\n\r\n  ```cmd\r\n  composer create-project laravel/laravel=6.* ProjectName\r\n  ```\r\n\r\n- 同時建立 migration controller model\r\n\r\n  ```cmd\r\n  php artisan make:model New -mcr\r\n  ```\r\n\r\n- 建立 Controller\r\n\r\n  - 控制器路徑 app/Http/controllers/NewController.php\r\n  - 控制器名稱字首需大寫\r\n\r\n  ```cmd\r\n  php artisan make:controller NewController\r\n  ```\r\n\r\n- 啟動 Laravel 伺服器\r\n\r\n  ```cmd\r\n  php artisan serve\r\n  ```\r\n\r\n- 使用路由\r\n\r\n  ```php\r\n  // routes/web.php\r\n  Route::get('/home/news', \"App\\Http\\Controllers\\NewController@index\");\r\n\r\n  // app/Http/controllers/NewController.php\r\n  public function index()\r\n  {\r\n    return \"<h1>OK</h1>\";\r\n  }\r\n  ```\r\n\r\n## 連線資料庫將資料顯示在畫面上\r\n\r\n### mysql\r\n\r\n- Laravel 資料庫設定檔 `.env`\r\n\r\n  ```php\r\n  APP_NAME=Laravel        （專案的名稱）\r\n  APP_ENV=local           （專案開發的環境，local / staging）\r\n  APP_KEY=                (APP KEY)\r\n  APP_DEBUG=true          （提供在瀏覽器中顯示詳細的錯誤訊息來進行debug）\r\n  APP_URL=http://localhost（專案網址，EX. http://example.com，使用方法url()時便可取得該網址）\r\n\r\n  LOG_CHANNEL=stack\r\n\r\n  DB_CONNECTION=mysql (使用的資料庫)\r\n  DB_HOST=127.0.0.1   (資料庫主機位置)\r\n  DB_PORT=3306        (資料庫的埠號)\r\n  DB_DATABASE=test    (資料庫名稱)\r\n  DB_USERNAME=        （資料庫帳號）\r\n  DB_PASSWORD=        （資料庫密碼）\r\n  ```\r\n\r\n- 建立一個 model\r\n\r\n  - model 路徑 app/Models/News.php\r\n\r\n  ```cmd\r\n  php artisan make:model News\r\n  ```\r\n\r\n- Controller 參用 News model\r\n\r\n  ```php\r\n  use App\\Models\\News;\r\n  ```\r\n\r\n- 如何把陣列顯示在前台 (回傳`json`格式)\r\n\r\n  ```php\r\n  public function index()\r\n  {\r\n    $dataList = News::all();\r\n\r\n    return json_encode($dataList);\r\n  }\r\n  ```\r\n\r\n- 接收 `Route::post` 的路由接引到 `store(`) 完成資料庫的新增\r\n\r\n  ```php\r\n  Route::post('/home/news', \"App\\Http\\Controllers\\NewController@store\");\r\n  ```\r\n\r\n### redis\r\n\r\n> 需先在環境安裝 redis\r\n\r\n- 安裝 `predis`\r\n\r\n  ```bash\r\n  composer require predis/predis\r\n  ```\r\n\r\n- redis 預設有 16 個資料庫，Laravel 會使用預設的資料庫`0`\r\n- 修改 `env`\r\n\r\n  ```config\r\n  REDIS_HOST=127.0.0.1\r\n  REDIS_PASSWORD=null\r\n  REDIS_PORT=6379\r\n  REDIS_CLIENT=predis\r\n  REDIS_PREFIX=\"\"\r\n  ```\r\n\r\n- 使用方法\r\n\r\n  ```php\r\n  use Illuminate\\Support\\Facades\\Redis;\r\n  Redis::set('name', 'Vic');\r\n  Redis::get('name');\r\n  ```\r\n\r\n- redis-cil\r\n\r\n  ```bash\r\n  $ redis-cli\r\n  $ select 0   //選擇資料庫0\r\n  $ keys *     //列出所有keys\r\n  $ get laravel_database_name  //取得key value\r\n  ```\r\n\r\n- 須注意 laravel 預設的 redis key 會有 `laravel_database_` 這個前綴：`$ get laravel_database_${your_key}`。這個前綴設定可以在 `env` 中的 `REDIS_PREFIX` 修改\r\n\r\n## 新增一個 html 測試`input`到資料庫\r\n\r\n- 修改 controller\r\n\r\n  ```php\r\n  store(Request $request){\r\n    $newItem = new News();\r\n    $newItem->title = $request->input(\"title\");\r\n    $newItem->title = $request->input(\"ymd\");\r\n    $newItem->save();\r\n\r\n    return \"進來了\";\r\n  }\r\n  ```\r\n\r\n- 修改 `VerifyCsrfToken.php`，先略過資料傳送的資安問題\r\n\r\n  - 路徑 `/home` 底下都先忽略\r\n\r\n  ```php\r\n  protected $except = [\r\n    \"/home/*\"\r\n  ];\r\n  ```\r\n\r\n- 在 model 增加\r\n\r\n  ```php\r\n  public $timestamps = false;\r\n  // redirect => 重新導向\r\n  ```\r\n\r\n### 將變數傳入 `view` 的三種方法\r\n\r\n1. with: 用於簡單傳遞變數，但不易擴充傳遞變數，所以不常用到\r\n\r\n   ```php\r\n   $name = \"test\";\r\n   $age = 23; \r\n\r\n   return view('my_laravel')->with('name', $name);\r\n   // &\r\n   return view('my_laravel')->with('name', $name)->with('age', $age);\r\n\r\n   // 用陣列包起來\r\n   $data = [\r\n     'name' = 'test',\r\n     'age'  =26\r\n   ];\r\n\r\n   return view('my_laravel')->with('data', $data);\r\n\r\n   // view\r\n   {{ $data['name'] }}\r\n   ```\r\n\r\n2. Array\r\n\r\n   ```php\r\n   $data = [\r\n     'name' => 'test',\r\n     'age' => 26\r\n   ]\r\n\r\n   return view('my_laravel', $data)\r\n\r\n   // view\r\n   {{ $name }}\r\n   ```\r\n\r\n3. compact\r\n\r\n   ```php\r\n   // 常用於複雜變數，不用包裝成新的變數名稱\r\n   $data = [\r\n     'name' => 'test',\r\n     'age' => 26\r\n   ];\r\n   $title = 'title';\r\n\r\n   return view('my_laravel', compact('data', 'title'));\r\n\r\n   // view\r\n   {{ $data['name'] }}  // 因為在 data 陣列中 \r\n   {{ $title }}  // 變數值直接使用\r\n   ```\r\n\r\n## Controller\r\n\r\n### 生成 controller\r\n\r\n```bash\r\nphp artisan make:controller NewController\r\n```\r\n\r\n- `--resource`\r\n\r\n  ```bash\r\n  php artisan make:controller function/NewController --resource\r\n  ```\r\n\r\n  - 在`function/` 的目錄下，新增一個資源控制器\r\n  - 生成`index()` `create()` `store()` `show()` `edit()` `update()` `destroy()`\r\n\r\n- `--api`\r\n\r\n  ```bash\r\n  php artisan make:controller api/NewController --api\r\n  ```\r\n\r\n  - 一般 api 控制器會新增在 Controller/api 的目錄之下\r\n  - 生成`index()` `store()` `show()` `update()` `destroy()`，省略 `create()` `edit()` 方法\r\n\r\n### resource controller function\r\n\r\n- `index()`: 顯示所有資料的列表\r\n\r\n- `create()`: 顯示新增畫面\r\n- `store()`: 新增資料\r\n- `show()`: 顯示指定 id 的資料\r\n- `edit()`: 顯示編輯的畫面\r\n- `update()`: 更新資料\r\n- `destroy()`: 刪除資料\r\n\r\n### controller 傳入參數\r\n\r\n一般參數\r\n\r\n```php\r\npublic function show($id)\r\n{\r\n   return response()->json(New::find($id), 200);\r\n}\r\n```\r\n\r\n構造函數注入(Constructor Injection)\r\n\r\n```php\r\npublic function show(New $new)\r\n{\r\n    return response()->json($new, 200);\r\n}\r\n```\r\n\r\n### 參數預設值\r\n\r\n當傳入 controller 的參數為空時，參數返回預設值。\r\n\r\n```php\r\n// route/api.php:\r\nRoute::post('new/{new?}', 'NewController@show');\r\n\r\n// NewController.php:\r\nclass NewController extends Controller\r\n{\r\n    public function show($new = \"nothing news\")\r\n    {\r\n        // ...\r\n    }\r\n}\r\n```\r\n\r\n## Route\r\n\r\nlaravel 中 route 有兩種:`routes/web.php` `routes/api.php`，分別為一般頁面和 api\r\n\r\n### route 基本寫法\r\n\r\n- 一般參數\r\n\r\n  ```php\r\n  Route::get(‘new’, ‘api\\NewController@index’);\r\n  Route::get(‘new/{id}’, ‘api\\NewController@show’);\r\n  Route::post(‘new’, ‘api\\NewController@store’);\r\n  Route::put(‘new/{id}’, ‘api\\NewController@update’);\r\n  Route::delete(‘new/{id}’, ‘api\\NewController@destroy’);\r\n  ```\r\n\r\n- 構造函數注入\r\n\r\n  ```php\r\n  Route::get(‘new’, ‘api\\NewController@index’);\r\n  Route::get(‘new/{new}’, ‘api\\NewController@show’);\r\n  Route::post(‘new’, ‘api\\NewController@store’);\r\n  Route::put(‘new/{new}’, ‘api\\NewController@update’);\r\n  Route::delete(‘new/{new}’, ‘api\\NewController@destroy’);\r\n  ```\r\n\r\n  - 第一個參數是對應的路徑，後面有`{}`代表傳入的參數\r\n  - 第二個參數是對應的 controller @後面為 controller 內要呼叫的方法\r\n\r\n### resource controller 資源控制器\r\n\r\n```php\r\nRoute::Resource('new', 'NewController');\r\n\r\n// api資源控制器\r\nRoute::apiResource('new', 'api\\NewController');\r\n```\r\n\r\n### route 分組\r\n\r\n- prefix: 前綴用來設定 URL 開始共同的部分。\r\n\r\n```php\r\nRoute::prefix(\"new\")->group(function () {\r\n    Route::get('view', 'NewController@show');\r\n    Route::post('create', 'NewController@create');\r\n    Route::put('update', 'NewController@edit');\r\n    // ...\r\n});\r\n\r\n```\r\n\r\n- namespace: 若要綁定的 controller 不在預設的 app/Http/Controller 裡，而是有更進一步的分類，可以設定 namespace()方便管理。\r\n\r\n```php\r\n// app/Http/Controller/New\r\nRoute::namespace(\"new\")->group(function () {\r\n    Route::get('new/view/{id}', 'NewController@show');\r\n    Route::post('new/create', 'NewController@create');\r\n    Route::put('new/update', 'NewController@edit');\r\n    // ...\r\n});\r\n```\r\n\r\n- middleware: laravel 進入 action 之前會先對 http request 進行檢查\r\n\r\n```php\r\nRoute::middleware('adminonly')->group(function () {\r\n    Route::get('new/create', 'NewController@create');\r\n    Route::get('new/{id}/delete', 'NewController@delete');\r\n    // ...\r\n});\r\n```\r\n\r\n## Laravel 功能實現\r\n\r\n### 儲存檔案並刪除舊檔\r\n\r\n```php\r\npublic function updateProfile(Request $request)\r\n{\r\n  $user = auth()->user();\r\n  // 表單驗證規則\r\n  $validated = $this->validateUserProfile($request->all(), $user->id)->validate();\r\n  if ($request->has('image')) {\r\n    // 取得資料表中原始資料\r\n    $originalData = User::find(auth()->user()->id)->getAttributes();\r\n    if ($originalData['image']) {\r\n      $filename = $originalData['image'];\r\n      $storage = Storage::disk('upload');\r\n      // 如果資料表中有紀錄，那就刪除檔案\r\n      if ($storage->exists($filename)) {\r\n        $storage->delete($filename);\r\n      }\r\n    }\r\n    // 原始$request['image']的值為暫存路徑，現將其改為資料表中的路徑\r\n    if ($request->hasFile('image')) {\r\n      $validated['image'] = $request->file('image')->store('images/users', 'upload');\r\n    }\r\n  }\r\n  $user->update($validated);\r\n}\r\n```\r\n\r\n## Class not found\r\n\r\n當出現 `Class 'xxx\\\\xxx\\\\xxx\\\\xxx' not found` 時，可能原因為 composer autoload 尚未註冊或是註冊錯誤。\r\n\r\n解決方法：\r\n\r\n- 方法一\r\n\r\n  ```terminal\r\n  composer dump-autoload -o\r\n  ```\r\n\r\n- 方法二\r\n\r\n  檢查 vendor/composer 下面的 autoload 資料夾中的檔案 autoload_classmap.php 和 autoload_static.php\r\n\r\n## 框架設計模式\r\n\r\n在小型專案中，典型的 MVC 架構沒什麼問題，但隨著系統越來越複雜，必須再細分更多層，於是衍生出 View - Presenter - Controller - Service - Repository - Model 六層框架設計模式。\r\n\r\n### 每一層的職責\r\n\r\n- Model 盡可能隱藏操作資料的 know-how，將資料抽象化，作為一個 Object Relational Mapping。\r\n- Repository 藉由操作 Model，幫助 Service 實現各種商務邏輯對應的資料庫操作方法。\r\n- Service 實現商務邏輯，並且讓 Controller 僅需要專注在溝通上。\r\n- Controller 作為 View 與商務邏輯間的溝通橋樑。\r\n- Presenter 負責 \"如何處理資料\"\r\n- View 負責\"要給客戶看到什麼\"\r\n\r\n### MVC 框架\r\n\r\n> 參考資料：\r\n>\r\n> [Laravel 加入 Repository 與 Service](https://vocus.cc/article/5fa7fe49fd8978000125da22)\r\n\r\n若將這六個 layer 的職責對應到 MVC 框架中，小專案下的 model 其實就是 Business Model，包含商業邏輯以及和資料庫溝通。而 View 也不會刻意把資料操作邏輯與資料處理方式獨立成一個 Presenter，因此\r\n小型專案的 View 往往混著一些邏輯判斷。\r\n\r\n- Model\r\n  - Service\r\n  - Repository\r\n  - Model\r\n- Controller\r\n  - Controller\r\n- View\r\n  - View\r\n  - Presenter\r\n\r\n### Web API Service\r\n\r\n通 Web API Service 僅僅是將 service 送來的資料變成 JSON format 輸出到 View 上，所以有時 Controller 就涵蓋了 Presenter 的職責，View 純粹只是 JSON, XML 等格式資料。\r\n\r\n- Model\r\n  - Service\r\n  - Repository\r\n  - Model\r\n- Controller\r\n  - Presenter\r\n  - Controller\r\n- View\r\n  - View\r\n","tocContent":"- [Laravel 學習筆記](#laravel-學習筆記)\r\n  - [基礎建立](#基礎建立)\r\n  - [連線資料庫將資料顯示在畫面上](#連線資料庫將資料顯示在畫面上)\r\n    - [mysql](#mysql)\r\n    - [redis](#redis)\r\n  - [新增一個 html 測試`input`到資料庫](#新增一個-html-測試input到資料庫)\r\n    - [將變數傳入 `view` 的三種方法](#將變數傳入-view-的三種方法)\r\n  - [Controller](#controller)\r\n    - [生成 controller](#生成-controller)\r\n    - [resource controller function](#resource-controller-function)\r\n    - [controller 傳入參數](#controller-傳入參數)\r\n    - [參數預設值](#參數預設值)\r\n  - [Route](#route)\r\n    - [route 基本寫法](#route-基本寫法)\r\n    - [resource controller 資源控制器](#resource-controller-資源控制器)\r\n    - [route 分組](#route-分組)\r\n  - [Laravel 功能實現](#laravel-功能實現)\r\n    - [儲存檔案並刪除舊檔](#儲存檔案並刪除舊檔)\r\n  - [Class not found](#class-not-found)\r\n  - [框架設計模式](#框架設計模式)\r\n    - [每一層的職責](#每一層的職責)\r\n    - [MVC 框架](#mvc-框架)\r\n    - [Web API Service](#web-api-service)"}