{"name":"SOLID 物件導向原則.md","content":"# SOLID 物件導向原則\n\n> 參考資料\n>\n> [物件導向設計原則 SOLID](https://clouding.city/php/solid/)\n\n## SPR 單一職責原則\n\n> Single Responsibility Principle\n\n### 定義\n\n應該且僅有一個原因引起類別的變更，讓類別只有一個職責。\n\n### 秘訣\n\n- 關注點分離\n- 不應該因為貪圖方便塞在一起\n- 若切分太細，會有類別太多的問題\n\n### 提醒\n\n- 設計階段就可以避開類別職責太大的問題\n- 在維護階段需小心別又讓類別職責變多\n\nBad\n\n```php\nclass UserSettings\n{\n    private $user;\n\n    public function __construct(User $user)\n    {\n        $this->user = $user;\n    }\n\n    public function changSettings(array $settings): void\n    {\n        if ($this->verifyCredentials()) {\n            //\n        }\n    }\n\n    private function verifyCredentials(): bool\n    {\n        //\n    }\n}\n```\n\nGood\n\n```php\nclass UserAuth\n{\n    private $user;\n\n    public function __construct(User $user)\n    {\n        $this->user = $user;\n    }\n\n    public function verifyCredentials(): bool\n    {\n        //\n    }\n}\n\nclass UserSetters\n{\n    private $user;\n\n    private $auth;\n\n    public function __construct(User $user)\n    {\n        $this->user = $user;\n        $this->auth = new UserAuth($user);\n    }\n\n    public function ChangSettings(array $settings): void\n    {\n        if ($this->auth->verifyCredentials()) {\n            //\n        }\n    }\n}\n```\n\n## Open Closed Principle 開放封閉原則\n\n### 定義\n\n軟體中的對象(類別、函數)，對於擴展是開放的，對於修改是封閉的。\n\n### 秘訣\n\n- 只考慮抽象層級的介面互動\n- 把變化委託給其他類別處理\n- 只異動 metadata 或 config\n\n### 提醒\n\n- 不是所有程式都遵守 OCP\n- 可能一開始無法預想到要擴充，但可以透過重構完成\n- 不要過度用繼承的方式來進行擴充\n\nBad\n\n```php\nabstract class Adapter\n{\n    protected $name;\n\n    public function getName(): string\n    {\n        return $this->name;\n    }\n}\n\nclass AjaxAdapter extends Adapter\n{\n    public function __construct()\n    {\n        parent::__construct();\n\n        $this->name = 'ajaxAdapter';\n    }\n}\n\nclass NodeAdapter extends Adapter\n{\n    public function __construct()\n    {\n        parent::__construct();\n\n        $this->name = 'nodeAdapter';\n    }\n}\n\nclass HttpRequester\n{\n    private $adapter;\n\n    public function __construct(Adapter $adapter)\n    {\n        $this->adapter = $adapter;\n    }\n\n    public function fetch(string $url): promise\n    {\n        $adapterName = $this->adapter->getName();\n\n        if ($adapterName === 'ajaxAdapter') {\n            return $this->makeAjaxCall($url);\n        } elseif ($adapterName === 'httpNodeAdapter') {\n            return $this->makeHttpCall($url);\n        }\n    }\n\n    private function makeAjaxCall(string $url): promise\n    {\n        // request and return promise\n    }\n\n    private function makeHttpCall(string $url): promise\n    {\n        // request and return promise\n    }\n}\n```\n\nGood\n\n```php\ninterface Adapter\n{\n    public function request(string $url): promise;\n}\n\nclass AjaxAdapter implements Adapter\n{\n    public function request(string $url): promise\n    {\n        // request and return promise\n    }\n}\n\nclass NodeAdapter implements Adapter\n{\n    public function request(string $url): promise\n    {\n        // request and return promise\n    }\n}\n\nclass HttpRequester\n{\n    private $adapter;\n\n    public function __construct(Adapter $adapter)\n    {\n        $this->adapter = $adapter;\n    }\n\n    public function fetch(string $url): promise\n    {\n        return $this->adapter->request($url);\n    }\n}\n```\n\n## Liskov Substitution Principle 里氏替換原則\n\n### 定義\n","tocContent":""}