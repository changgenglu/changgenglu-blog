{"name":"Laravel 實作權限.md","content":"# Laravel 實作權限\n\n## Gates\n\n### 使用者角色\n\n將使用者區分為:\n\n- 系統管理者: admin\n- 一般管理者: manager\n- 一般使用者: user\n\n編輯`app/User.php`，加入帳號角色名稱常數，並將`role`欄位加入 `fillable` 中\n\n```php\nclass User extends Authenticatable\n{\n    // ...\n\n    const ROLE_ADMIN = 'admin';\n    const ROLE_MANAGER = 'manager';\n    const ROLE_USER = 'user';\n\n    protected $fillable = [\n        'name', 'email', 'password', 'role',\n    ];\n\n    // ...\n}\n```\n\n### 資料庫 migration\n\n建立一個 `migration` 設定檔，在 `users` 資料表中加入儲存帳號角色的 `role` 欄位\n\n```php\nclass AddRoleColumnToUsersTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::table('users', function (Blueprint $table) {\n            $table->string('role')->default(Admin::ROLE_USER);\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::table('users', function (Blueprint $table) {\n            $table->dropColumn('role');\n        });\n    }\n}\n```\n\n修改完成後，執行 migrate\n\n### 使用者註冊 Controller\n\n編輯`app/Http/Controllers/Auth/RegisterController.php`，設定使用者註冊時，預設角色為一般使用者\n\n```php\nprotected function create(array $data)\n{\n    return User::create([\n        'name' => $data['name'],\n        'email' => $data['email'],\n        'password' => Hash::make($data['password']),\n        'role' => User::ROLE_USER,  // 預設為一般使用者\n    ]);\n}\n```\n\n### 建立 Gate 規則權限\n\n編輯`app/Providers/AuthServiceProvider.php`，加入自訂的 Gates 規則\n\n```php\nuse App\\User;\n\nclass AuthServiceProvider extends ServiceProvider\n{\n    // ..\n\n    public function boot()\n    {\n        $this->registerPolicies();\n\n        // 系統管理者 Gate 規則\n        Gate::define('admin', function ($user) {\n            return $user->role === User::ROLE_ADMIN;\n        });\n\n        // 一般管理者 Gate 規則\n        Gate::define('manager', function ($user) {\n            return $user->role === User::ROLE_MANAGER;\n        });\n\n        // 一般使用者 Gate 規則\n        Gate::define('user', function ($user) {\n            return $user->role === User::ROLE_USER;\n        });\n    }\n}\n```\n\n### 在 Blade 運用 Gate 權限設定\n\n在 Blade 樣板中可以運用 `@can`、`@cannot` 或 `@canany` 來判斷使用者的權限\n\n```php\n@can('admin')\n    <!-- 系統管理者 -->\n@elsecan('manager')\n    <!-- 一般管理者 -->\n@else\n    <!-- 一般使用者 -->\n@endcan\n```\n\n### Controller 運用 Gate 權限設定\n\n在 Controller 中則可使用 `Gate::allows` 或 `Gate::denies` 判斷使用者權限\n\n```php\nuse Illuminate\\Support\\Facades\\Gate;\n\nclass Controller extends BaseController\n{\n    // ...\n\n    public function someAction()\n    {\n        if (Gate::allows('admin')) {\n            return '系統管理者。';\n        }\n\n        if (Gate::denies('admin')) {\n            return '非系統管理者！';\n        }\n    }\n}\n```\n\n運用 `authorize` 直接限制整個函數的執行權限\n\n```php\nclass Controller extends BaseController\n{\n    // ...\n\n    // 只有系統管理者可以執行\n    public function adminAction()\n    {\n        $this->authorize('admin');\n\n        // ...\n    }\n}\n```\n\n### Middleware 運用 Gate 權限設定\n\n應用在 Route\n\n```php\n// 只有系統管理者可以執行\nRoute::get('/someAction', 'MyController@someAction') -> middleware('can:admin');\n```\n\n## Policy\n\n可以針對一個 Model 或資源實作限制權限\n\n```php\nphp artisan make:policy PostPolicy --model=Post\n```\n\n到`app/Providers/AuthServiceProvider`註冊剛建立好的 Policy\n\n```php\nprotected $policies = [\n    // 'App\\Model' => 'App\\Policies\\ModelPolicy',\n    Post::class => PostPolicy::class,\n];\n```\n\n到`app/Policies/PostPolicy`修改條件\n\n```php\npublic function update(User $user, Post $post)\n{\n    return $user->id === $post->user_id;\n}\n```\n","tocContent":""}