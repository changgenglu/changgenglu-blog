{"name":"Laravel 實作權限.md","content":"# Laravel 實作權限\r\n\r\n## Gates\r\n\r\n### 使用者角色\r\n\r\n將使用者區分為:\r\n\r\n- 系統管理者: admin\r\n- 一般管理者: manager\r\n- 一般使用者: user\r\n\r\n編輯`app/User.php`，加入帳號角色名稱常數，並將`role`欄位加入 `fillable` 中\r\n\r\n```php\r\nclass User extends Authenticatable\r\n{\r\n    // ...\r\n\r\n    const ROLE_ADMIN = 'admin';\r\n    const ROLE_MANAGER = 'manager';\r\n    const ROLE_USER = 'user';\r\n\r\n    protected $fillable = [\r\n        'name', 'email', 'password', 'role',\r\n    ];\r\n\r\n    // ...\r\n}\r\n```\r\n\r\n### 資料庫 migration\r\n\r\n建立一個 `migration` 設定檔，在 `users` 資料表中加入儲存帳號角色的 `role` 欄位\r\n\r\n```php\r\nclass AddRoleColumnToUsersTable extends Migration\r\n{\r\n    /**\r\n     * Run the migrations.\r\n     *\r\n     * @return void\r\n     */\r\n    public function up()\r\n    {\r\n        Schema::table('users', function (Blueprint $table) {\r\n            $table->string('role')->default(Admin::ROLE_USER);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Reverse the migrations.\r\n     *\r\n     * @return void\r\n     */\r\n    public function down()\r\n    {\r\n        Schema::table('users', function (Blueprint $table) {\r\n            $table->dropColumn('role');\r\n        });\r\n    }\r\n}\r\n```\r\n\r\n修改完成後，執行 migrate\r\n\r\n### 使用者註冊 Controller\r\n\r\n編輯`app/Http/Controllers/Auth/RegisterController.php`，設定使用者註冊時，預設角色為一般使用者\r\n\r\n```php\r\nprotected function create(array $data)\r\n{\r\n    return User::create([\r\n        'name' => $data['name'],\r\n        'email' => $data['email'],\r\n        'password' => Hash::make($data['password']),\r\n        'role' => User::ROLE_USER,  // 預設為一般使用者\r\n    ]);\r\n}\r\n```\r\n\r\n### 建立 Gate 規則權限\r\n\r\n編輯`app/Providers/AuthServiceProvider.php`，加入自訂的 Gates 規則\r\n\r\n```php\r\nuse App\\User;\r\n\r\nclass AuthServiceProvider extends ServiceProvider\r\n{\r\n    // ..\r\n\r\n    public function boot()\r\n    {\r\n        $this->registerPolicies();\r\n\r\n        // 系統管理者 Gate 規則\r\n        Gate::define('admin', function ($user) {\r\n            return $user->role === User::ROLE_ADMIN;\r\n        });\r\n\r\n        // 一般管理者 Gate 規則\r\n        Gate::define('manager', function ($user) {\r\n            return $user->role === User::ROLE_MANAGER;\r\n        });\r\n\r\n        // 一般使用者 Gate 規則\r\n        Gate::define('user', function ($user) {\r\n            return $user->role === User::ROLE_USER;\r\n        });\r\n    }\r\n}\r\n```\r\n\r\n### 在 Blade 運用 Gate 權限設定\r\n\r\n在 Blade 樣板中可以運用 `@can`、`@cannot` 或 `@canany` 來判斷使用者的權限\r\n\r\n```php\r\n@can('admin')\r\n    <!-- 系統管理者 -->\r\n@elsecan('manager')\r\n    <!-- 一般管理者 -->\r\n@else\r\n    <!-- 一般使用者 -->\r\n@endcan\r\n```\r\n\r\n### Controller 運用 Gate 權限設定\r\n\r\n在 Controller 中則可使用 `Gate::allows` 或 `Gate::denies` 判斷使用者權限\r\n\r\n```php\r\nuse Illuminate\\Support\\Facades\\Gate;\r\n\r\nclass Controller extends BaseController\r\n{\r\n    // ...\r\n\r\n    public function someAction()\r\n    {\r\n        if (Gate::allows('admin')) {\r\n            return '系統管理者。';\r\n        }\r\n\r\n        if (Gate::denies('admin')) {\r\n            return '非系統管理者！';\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n運用 `authorize` 直接限制整個函數的執行權限\r\n\r\n```php\r\nclass Controller extends BaseController\r\n{\r\n    // ...\r\n\r\n    // 只有系統管理者可以執行\r\n    public function adminAction()\r\n    {\r\n        $this->authorize('admin');\r\n\r\n        // ...\r\n    }\r\n}\r\n```\r\n\r\n### Middleware 運用 Gate 權限設定\r\n\r\n應用在 Route\r\n\r\n```php\r\n// 只有系統管理者可以執行\r\nRoute::get('/someAction', 'MyController@someAction') -> middleware('can:admin');\r\n```\r\n\r\n## Policy\r\n\r\n可以針對一個 Model 或資源實作限制權限\r\n\r\n```php\r\nphp artisan make:policy PostPolicy --model=Post\r\n```\r\n\r\n到`app/Providers/AuthServiceProvider`註冊剛建立好的 Policy\r\n\r\n```php\r\nprotected $policies = [\r\n    // 'App\\Model' => 'App\\Policies\\ModelPolicy',\r\n    Post::class => PostPolicy::class,\r\n];\r\n```\r\n\r\n到`app/Policies/PostPolicy`修改條件\r\n\r\n```php\r\npublic function update(User $user, Post $post)\r\n{\r\n    return $user->id === $post->user_id;\r\n}\r\n```\r\n","tocContent":""}