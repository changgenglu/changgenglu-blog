{"name":"CSS學習筆記.md","content":"# CSS 學習筆記\n\n>\n\n> 將所有物件加上外框\n>\n> ```css\n> * {\n>   outline: 1px solid #000;\n> }\n> ```\n\n## 後裔選擇器\n\n### 基本類型\n\n- 標籤 `#id` `.class`\n\n- div 標籤和 span 標籤\n\n  ```css\n  div,\n  span {\n  }\n  ```\n\n### 複合型\n\n- div 標籤底下，為 span 標籤\n\n  ```css\n  div > span {\n  }\n  ```\n\n- div 標籤內所有的 span 標籤\n\n  ```css\n  div span {\n  }\n  ```\n\n- div 標籤之後的第一個 span 標籤\n\n  ```css\n  div + span {\n  }\n  ```\n\n- div 標籤之後的所有 span 標籤\n\n  ```css\n  div ~ span {\n  }\n  ```\n\n## 屬性選擇器`[]`\n\n可直接查找任何屬性內元素(ex:`class`, `div`, `title`, `href`,....)，亦可使用於直接指定屬性\n\n- `|` 符號為屬性，包含`[foo]`且必在開頭，須為獨立字元、特定單詞，以及字元後加上連接符號 `-`\n\n  ```css\n  p[class|=\"red\"] {\n  }\n  ```\n\n- `~` 符號為屬性只要有包含`[foo]`，無順序問題，需為獨立字元、特定單詞\n\n  ```css\n  a[herf~=\"apple\"] {\n  }\n  ```\n\n- `^` 符號為屬性使用`[foo]`開頭，不特定獨立字元\n\n  ```css\n  a[herf^=\"http\"] {\n  }\n  ```\n\n- `$` 符號為屬性使用`[foo]`結尾，不特定獨立字元\n\n  ```css\n  a[herf$=\"selectors.asp\"] {\n  }\n  ```\n\n- `*` 符號為屬性內含有`[foo]`，不特定獨立字元\n\n  ```css\n  a[herf*=\"pseudo\"] {\n  }\n  ```\n\n## 表格\n\n- 將標籤做成表格\n\n  ```css\n  .class {\n    display: grid;\n  }\n  ```\n\n## 偽元素\n\n- 在原本的元素「之前」加入內容\n\n  ```css\n  ::before ;\n  ```\n\n- 在原本的元素「之後」加入內容\n\n  ```css\n  ::after ;\n  ```\n\n- 兩者都是以 display: inline-block;屬性存在\n- 偽元素會「繼承」原本元素的屬性\n- 偽元素一定要加上 content 的屬性，沒有 content 偽元素不會出現在畫面上\n\n## `display:none`和`visibility:hidden`的差別\n\n當使用 `visibility:hidden` 時，物件是確實的被隱藏的，但依然保有物件的位置\n\n例如：當表格內的標籤加上 `visibility:hidden` 時，其儲存格中的值會被隱藏，但儲存格不會消失\n\n當使用 `display:none` 時，物件及其原本的位置都會被隱藏\n\n## Background\n\n### attachment 固定樣式\n\n- scroll 預設：當設定背景圖的區域有捲軸時，當捲動該區域，背景圖會固定位置不變，但當捲動整個網頁時，該區域的背景圖會跟著網頁捲軸滾動。\n- fixed：無論在捲動設定背景圖區快內的捲軸，或是整個網頁的捲軸，背景都會固定位置不變。\n- local：和 fixed 相反，捲動任意捲軸，背景圖都會跟著捲軸移動。\n\n### blend-mode 圖層混合模式\n\n類似套濾鏡的效果\n\n### clip 定義背景延伸的範圍\n\n- border-box 背景範圍為 content + padding + border\n- padding-box 背景範圍為 content + padding\n- content-box 背景範圍為 content\n\n### color 背景顏色\n\n預設為透明，當未設定背景圖片時顯示。\n\n### image 背景圖片\n\n```css\ndiv {\n  background-image: url('./images/background/001.png');\n}\n```\n\n### origin 設定背景起使位置\n\n- border-box 起始位置為左上角，包含 border + padding + content\n- padding-box 起始位置為左上角，包含 padding + content\n- content-box 起始位置為左上角，包含 content\n\n### position 設定背景圖片的位置\n\n- left top\n- left center\n- left bottom\n- right top\n- right center\n- right bottom\n- center top\n- center center\n- center bottom\n- x% y%\n- xops yops\n\n### repeat 重複\n\n- repeat 預設：於 x 軸與 y 軸重複背景\n- repeat-x：只於 x 軸重複背景\n- repeat-y：只於 y 軸重複背景\n- no-repeat：不重複\n- space：背景尺寸不變，自動調整圖片間距填滿畫面\n- round：調整背景尺寸填滿畫面\n\n### size 背景圖片尺寸\n\n- auto 預設：顯示原圖尺寸\n- length：設定圖片 width & height，若只輸入一個值，則 width & height 相同。\n- percentage：設定背景圖片在區域中要顯示的比例，若 width & height 其中一值未設定則為 auto\n- cover：不改變圖片比例的情況下，用背景圖片將區塊塞滿後裁切\n- contain：不改變圖片比例，完整呈現圖片。若為 no-repeat，圖片尺寸若小於區域尺寸，則會出現空白區域\n\n\n\n## Display\n\n### Display Outside\n\n#### Block 區塊元素\n\n- 總是以新的一行開始，所以無論設定多少寬度，他基本容器的寬度，還是會撐滿整個空間。\n- 即使容器中的元素已經被調整成 50%，但他還是會將後面的元素排擠在下面。\n\n#### Inline 行內元素\n\n- 又稱線內元素，元素本身高度多少他就是多少，無法調整寬高，此外他可以設定 padding 的上下左右，而 margin 只能設定他的左右。\n- inline 屬性預設元素的排列為由左到右，直到裝滿容器。\n\n### Display Inside\n\n#### Table\n\n- 可以將元素直接模擬成 table 來使用。\n\n  - Table-Row 對應 `<tr>`\n  - Table-Row-Group 對應 `<tbody>`\n  - Table-Cell `<td>`\n  - Table-caption `<caption`\n  - Table-Column `<col>`\n  - Table-Column-Group `<colgroup>`\n  - Table-Header-Group `<thead>`\n  - Table-Footer-Group `<footer>`\n\n#### Flex\n\n- 設定 flex 屬性之前，需先設定父層容器 display: flex\n\n##### Flex-direction 方向性\n\n- 水平方向(瀏覽器預設)：row, row-reverse(水平方向反轉)\n- 垂直方向：column, column-reverse(垂直方向反轉)\n\n##### justify-content 調整內容\n\n- 改變 flex 物件在主軸上的對齊(預設為水平方向)，若 flex-direction 為 column，則對齊方向改為垂直方向(y 軸)\n  - justify-content: flex-start 以起點為基準\n  - justify-content: flex-end 以尾端為基準\n  - justify-content: center 以中間為基準\n  - justify-content: space-between 會將物件依容器大小均分\n  - justify-content: space-around 會將物件依容器大小均分，並會給左右空間\n\n##### align-items 對齊物件\n\n- 改變橫軸上所有 flex 物件的對齊(預設為垂直方向)，若 flex-direction 為 column，則對其方向會改為水平方向(x 軸)\n  - align-items: flex-start 以起點為基準\n  - align-items: flex-end 以尾端為基準\n  - align-items: center 以中間為基準\n  - align-items: baseline 以物件基準線為基準\n  - align-items: stretch 以起點為基準，但會撐滿容器(瀏覽器預設)\n\n##### align-self 自身對齊\n\n- 單獨改變物件在橫軸上的對齊(預設為垂直方向)，若 flex-direction 為 column，則對齊方向則改為水平方向(x 軸)\n  - align-self: flex-start 以起點為基準\n  - align-self: flex-end 以尾端為基準\n  - align-self: center 以中間為基準\n  - align-self: baseline 以物件基準線為基準\n  - align-self: stretch 以起點為基準，但會撐滿容器(瀏覽器預設)\n\n#### Wrap 斷行\n\n- Flex-Nowrap：強制不斷行。\n- Flex-Wrap：裝滿容器會強制斷行。\n- Flex-Wrap-Reverse：裝滿容器會強制斷行，但排列順序是相反的。\n\n### Global 全域屬性\n\n- 除了 display 以外，齊他任意屬性都能使用\n\n#### inherit 跟隨父層屬性\n\n- 當父層屬性為 block，子層下 Display:Inherit 時，子層屬性也會變成 block\n\n#### initial 變回原本屬性\n\n- 假如我 div 屬性在某種情況下更改為 inline 屬性，那我後面有吃到同樣 CSS 的 div 想改回 Block，我只要下 Display:Initial，就會變回 Div 原本的 Block 屬性\n\n### Display-Box 影響用箱子裝起來的所有元素\n\n#### none\n\n- 若被 display: none; 的 div 裝起來的元素，會被隱藏。\n\n### Display-Legacy 此屬性繼承兩者的特性\n\n#### inline-block\n\n- 讓許多區塊自動浮起來水平排列，且不用額外設定 clear 也不會讓接著的元素浮上來蓋住區塊\n\n#### inline-table\n\n#### inline-flex\n\n- flex 時父元素為 block，而 inline-flex 則是父元素變成 inline，他會根據子元素所有的 div 大小自適應寬度和高度\n\n## HTML 佈局\n\n### 盒子模型\n\n在 HTML 中元素的盒子模型分為兩種，塊狀元素(block)和行內元素(inline)。其兩種元素和 display 屬性中的 inline block 兩個屬性不盡相同。\n\n盒子模型中的 inline, block 類似於 display 屬性的父類，如：display 屬性中的 list-item 屬性質是屬於塊狀(block)類型。\n\n塊狀(block)和行內(inline)的區別:\n\n- block 可以設置 width, height 屬性。inline 設置無效。\n- block 類型的元素會獨佔一行，而 inline 會在同一行內顯示\n- block 元素的 width 預設為 100%，而 inline 則是根據自身的 內容及子元素來決定寬度。\n\n下面是一些常見的元素分類\n\n- block: p, div, ul, il, dd, dt......\n- inline: a, img, span, strong\n\n### Position\n\n> 設定物件定位時所要的參考對象\n\n- 目前可以用的\n  - static 靜態的\n  - relative 相對定位\n  - fixed 固定定位\n  - absolute 絕對定位\n  - sticky 黏貼定位\n\n#### Static\n\n靜態定位，將其他定位特性取消，回到最原始的狀態，為一般網頁最原始的預設值。\n\n#### Relative\n\n相對定位，將設定的物件其參考空間，設定為自身原始的資料流位置，且此種定位值並不會將物件獨立一層，搭配其他 css 屬性如：`top`, `bottom`, `left`, `right`可以做到顯示位置的偏移。\n\n#### Absolute\n\n絕對定位，將設定的物件，其參考空間設定為「階層離自身最近，且具備定位設定的父層空間」，若沒有任何父層空間具備定位設定，該物件將採用視窗空間座位參考空間，而父層只要具備以下四種定位類型之一，即可被絕對定位當作參考空間：\n\n- relative\n- absolute\n- fixed\n- sticky\n\n此外當物件設定了 abstract 後，將會自己獨立一層，不在其他物件關連，可以利用此一特性，進行物件堆疊的視覺效果。\n\n#### Fixed\n\n固定定位，將設定的物件，將其參考空間設定為視窗，因此無論如何捲動視窗捲軸，這個物件都會固定在原位。固定定位和絕對定位一樣，都會自己獨立一層。\n\n#### sticky\n\n黏貼定位，結合 relative 和 fixed 兩大特性\n\n1. 預設定位在父層空間\n2. 當視窗捲動到該物件時，會依據對該物件設定的 top 值來讓該物件呈現 fixed 在視窗中的效果。\n3. 當物件呈現 fixed 的效果時，其所能 fixed 的空間是該物件的父層空間。\n4. 當視窗向下捲動超過 sticky 物件的父層空間時，該物件不會再呈現 fixed 效果，而是被捲離視窗範圍。\n\n### float\n\nfloat 的屬性只有 none, left, right。\n\n1. 只有橫向浮動，沒有縱向浮動\n2. 當元素應用了 float 時將會脫離一般資料流，其容器元素將得不到脫離原始資料流的子元素高度\n3. 一個元素會圍繞著浮動元素(文繞圖)，與應用了 position 的元素相比，浮動元素並不會遮蓋後一個元素。\n4. 浮動元素前一個元素不會受到任何影響，若想將兩塊狀元素並排顯示，則需將兩個塊狀元素都應用 float。\n5. 會將元素的 display 屬性更變為 block\n\n### float 和 position 的兼容問題\n\n元素若同時應用 position: relative, float, (top, bottom, right and left) 屬性時，則元素會先浮動到相對應位置，再根據 (top, bottom, right and left)設置的距離來發生偏移。\n\n若不將 float 元素的 position 設置為 relative，此時若要設置 float 的 z-index 來實現覆蓋 position: absolute 會無效。\n\n同理可證，float 元素若下面存在 position: absolute 的子元素，若不將 float 元素的 position 設為 relative，absolute 元素是無法定位到 float 元素的。\n\n## CSS 簡易暗黑模式\n\n```css\n@media (prefers-color-scheme: dark) {\n  html {\n    filter: invert(90%) hue-rotate(180deg);\n  }\n\n  img,\n  video,\n  svg,\n  code[class*=\"language-\"] {\n    filter: invert(110%) hue-rotate(180deg);\n    opacity: 0.8;\n  }\n\n  img {\n    background: #fff;\n  }\n}\n```\n\n- `invert` 將所有色值反轉，hue-rotate 將黑白以外的其他主題色調再反轉過來(防止頁面主題色出現過大變化)\n- `code[class*=\"language-\"]` 為 markdown 語法中的程式碼區塊\n- 若 html 反轉 90% 則圖片等元素需反轉 110%\n- 去背圖片在黑暗模式中因為背景變成黑底色，可能就會造成深色內容被深色背景吃掉的問題，為了避免這個問題，建議 img 的背景一律調成跟正常模式的背景色\n\n## 變數宣告\n\n- 定義變數：必需要定義在 css 選取器中，建議定義在 `:root` 最高層及的選取器以便於使用，使用 `--自訂名稱` 作為屬性的方式來宣告變數\n- 取用變數值：`var(變數名稱)`\n\n```css\n:root {\n  --dangerous-color: red;\n}\n\n.table {\n  background-color: var(--dangerous-color);\n}\n```\n\n## RWD 範例\n\n- max-width: 表示這個數字以下(包含)都適用 (<=)\n- min-width: 表示這個數字以上(包含)都適用 (>=)\n\n- landscape 縱向顯示(直式螢幕)\n  - @media all and (orientation:landscape) { … }\n- portrait 橫向顯示(橫式螢幕)\n  - @media all and (orientation:portrait) { … }\n\n```css\n/***----- media -----***/\n/*** media max1024 ***/\n\n@media (max-width: 1024px) {\n}\n\n/*** screen and media max800 ***/\n\n@media screen and (max-width: 800px) {\n}\n\n/*** media max800 ***/\n\n@media (max-width: 800px) {\n}\n\n/*** media max768 ***/\n\n@media (max-width: 768px) {\n}\n\n/*** media min768 ***/\n@media (min-width: 768px) {\n}\n\n/*** media max640 ***/\n\n@media (max-width: 640px) {\n}\n\n/*** media max480 ***/\n\n@media (max-width: 480px) {\n}\n\n/*** media max320 ***/\n\n@media (max-width: 320px) {\n}\n```\n","tocContent":"- [CSS 學習筆記](#css-學習筆記)\n  - [後裔選擇器](#後裔選擇器)\n    - [基本類型](#基本類型)\n    - [複合型](#複合型)\n  - [屬性選擇器`[]`](#屬性選擇器)\n  - [表格](#表格)\n  - [偽元素](#偽元素)\n  - [`display:none`和`visibility:hidden`的差別](#displaynone和visibilityhidden的差別)\n  - [Background](#background)\n    - [attachment 固定樣式](#attachment-固定樣式)\n    - [blend-mode 圖層混合模式](#blend-mode-圖層混合模式)\n    - [clip 定義背景延伸的範圍](#clip-定義背景延伸的範圍)\n    - [color 背景顏色](#color-背景顏色)\n    - [image 背景圖片](#image-背景圖片)\n    - [origin 設定背景起使位置](#origin-設定背景起使位置)\n    - [position 設定背景圖片的位置](#position-設定背景圖片的位置)\n    - [repeat 重複](#repeat-重複)\n    - [size 背景圖片尺寸](#size-背景圖片尺寸)\n  - [Display](#display)\n    - [Display Outside](#display-outside)\n      - [Block 區塊元素](#block-區塊元素)\n      - [Inline 行內元素](#inline-行內元素)\n    - [Display Inside](#display-inside)\n      - [Table](#table)\n      - [Flex](#flex)\n        - [Flex-direction 方向性](#flex-direction-方向性)\n        - [justify-content 調整內容](#justify-content-調整內容)\n        - [align-items 對齊物件](#align-items-對齊物件)\n        - [align-self 自身對齊](#align-self-自身對齊)\n      - [Wrap 斷行](#wrap-斷行)\n    - [Global 全域屬性](#global-全域屬性)\n      - [inherit 跟隨父層屬性](#inherit-跟隨父層屬性)\n      - [initial 變回原本屬性](#initial-變回原本屬性)\n    - [Display-Box 影響用箱子裝起來的所有元素](#display-box-影響用箱子裝起來的所有元素)\n      - [none](#none)\n    - [Display-Legacy 此屬性繼承兩者的特性](#display-legacy-此屬性繼承兩者的特性)\n      - [inline-block](#inline-block)\n      - [inline-table](#inline-table)\n      - [inline-flex](#inline-flex)\n  - [HTML 佈局](#html-佈局)\n    - [盒子模型](#盒子模型)\n    - [Position](#position)\n      - [Static](#static)\n      - [Relative](#relative)\n      - [Absolute](#absolute)\n      - [Fixed](#fixed)\n      - [sticky](#sticky)\n    - [float](#float)\n    - [float 和 position 的兼容問題](#float-和-position-的兼容問題)\n  - [CSS 簡易暗黑模式](#css-簡易暗黑模式)\n  - [變數宣告](#變數宣告)\n  - [RWD 範例](#rwd-範例)"}