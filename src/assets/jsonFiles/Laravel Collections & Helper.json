{"name":"Laravel Collections & Helper.md","content":"# Laravel Collections & Helper\r\n\r\n>\r\n\r\n## Collections 集合\r\n\r\n> 參考資料\r\n>\r\n> [Laravel — Collection 用途大解析](https://medium.com/johnliu-%E7%9A%84%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E6%80%9D%E7%B6%AD/laravel-collection-%E7%94%A8%E9%80%94%E5%A4%A7%E8%A7%A3%E6%9E%90-1e2dbc6e2c93)\r\n\r\n### 運算類\r\n\r\n方便進行數學運算，或是判斷是否含有特定值，也能比較兩個 collection 之間的不同\r\n\r\n#### Integer\r\n\r\n##### `count` 計數\r\n\r\n```php\r\n$collection = collect([1, 2, 3, 4]);\r\n\r\n$collection->count();\r\n\r\n// 4\r\n```\r\n\r\n#### Boolean\r\n\r\n##### `contains` 判斷集合是否包含指定的條件\r\n\r\n傳入值\r\n\r\n```php\r\n$collection = collect(['name' => 'Desk', 'price' => 100]);\r\n\r\n$collection->contains('Desk');\r\n\r\n// true\r\n\r\n$collection->contains('New York');\r\n\r\n// false\r\n```\r\n\r\n傳入陣列\r\n\r\n```php\r\n$collection = collect([\r\n    ['product' => 'Desk', 'price' => 200],\r\n    ['product' => 'Chair', 'price' => 100],\r\n]);\r\n\r\n$collection->contains('product', 'Bookcase');\r\n\r\n// false\r\n```\r\n\r\n傳遞匿名函數\r\n\r\n```php\r\n$collection = collect([1, 2, 3, 4, 5]);\r\n\r\n$collection->contains(function ($value, $key) {\r\n    return $value > 5;\r\n});\r\n\r\n// false\r\n```\r\n\r\n- `containsStrict()` 方法和 `contains()` 類似，但他在比較時更嚴格。\r\n\r\n#### Array\r\n\r\n##### `diff` 比較集合或陣列的值\r\n\r\n返回不存在此方法參數中的值\r\n\r\n```php\r\n$diff = collect([1, 2, 3, 4, 5])->diff([2, 4, 6, 8]);\r\n$diff->all();\r\n\r\n// 返回[1, 3, 5]，原集合內與diff方法中相同的數值被剔除。\r\n```\r\n\r\n### 迭代類\r\n\r\n#### `filter` 傳入匿名函式篩選集合\r\n\r\n返回通過篩選的項目\r\n\r\n```php\r\n$filtered = collect([1, 2, 3, 4])->filter(function (item) {\r\n    return $item > 2\r\n});\r\n\r\n$filtered->all();\r\n\r\n// [3, 4]\r\n```\r\n\r\n#### `map` 遍歷集合\r\n\r\n將集合的值透過傳入的匿名函數修改並返回，生成修改過的新集合\r\n\r\n```php\r\n$collection = collect([1, 2, 3, 4, 5]);\r\n\r\n$multiplied = $collection->map(function ($item, $key) {\r\n    return $item * 2;\r\n});\r\n\r\n$multiplied->all();\r\n\r\n// [2, 4, 6, 8, 10]\r\n```\r\n\r\n### 分組類\r\n\r\n#### `countBy` 計算指定數值\r\n\r\n```php\r\n$collection = collect([1, 2, 2, 2, 3]);\r\n\r\n$counted = $collection->countBy();\r\n\r\n$counted->all();\r\n\r\n// [1 => 1, 2 => 3, 3 => 1]\r\n```\r\n\r\n可以傳入匿名函數來自訂要計數的值\r\n\r\n```php\r\n$collection = collect(['alice@gmail.com', 'bob@yahoo.com', 'carlos@gmail.com']);\r\n\r\n$counted = $collection->countBy(function ($email) {\r\n    return substr(strrchr($email, \"@\"), 1);\r\n});\r\n\r\n$counted->all();\r\n\r\n// ['gmail.com' => 2, 'yahoo.com' => 1]\r\n```\r\n\r\n### 變形類\r\n\r\n將 collection 改變資料結構\r\n\r\n#### 維度與順序\r\n\r\n##### `collapse` , `flatten`\r\n\r\n兩者都是將維度從多維降為一維，collapse 較適用 Array 形式的資料，flatten 更適合有 Key-Value 形式的資料。\r\n兩個函式的用途，都是將例如 [[1,2,3], [4,5,6]] 轉變成 [1,2,3,4,5,6]\r\n\r\n##### `sort` 將陣列重新排列\r\n\r\n```php\r\nuse Illuminate\\Support\\Arr;\r\n\r\n$array = ['Desk', 'Table', 'Chair'];\r\n\r\n$sorted = Arr::sort($array);\r\n\r\n// ['Chair', 'Desk', 'Table']\r\n```\r\n\r\n根據傳入匿名函數返回的結果，對陣列進行排序\r\n\r\n```php\r\nuse Illuminate\\Support\\Arr;\r\n\r\n$array = [\r\n    ['name' => 'Desk'],\r\n    ['name' => 'Table'],\r\n    ['name' => 'Chair'],\r\n];\r\n\r\n$sorted = array_values(Arr::sort($array, function ($value) {\r\n    return $value['name'];\r\n}));\r\n\r\n/*\r\n    [\r\n        ['name' => 'Chair'],\r\n        ['name' => 'Desk'],\r\n        ['name' => 'Table'],\r\n    ]\r\n*/\r\n```\r\n\r\n利用 key 值替陣列排序\r\n\r\n```php\r\n$list = [\r\n  5 => 1\r\n  4 => 2\r\n  2 => 4\r\n  1 => 5\r\n  6 => 6\r\n];\r\n\r\nArr::sort($list, function ($value, $key) {\r\n    return $key;\r\n})\r\n```\r\n\r\n輸出\r\n\r\n```txt\r\narray:5 [\r\n  1 => 5\r\n  2 => 4\r\n  4 => 2\r\n  5 => 1\r\n  6 => 6\r\n]\r\n```\r\n\r\n#### 組合\r\n\r\n##### `combine` 將一個集合的值作為 key，用來和另一陣列或集合的值進行組合\r\n\r\n```php\r\n$collection = collect(['name', 'age']);\r\n\r\n$combined = $collection->combine(['George', 29]);\r\n\r\n$combined->all();\r\n\r\n// ['name' => 'George', 'age' => 29]\r\n```\r\n\r\n##### `merge` 合併指定的陣列或是集合到原集合\r\n\r\n若傳入的集合中的 key 值與原集合中的 key 值相同，則傳入的值將會將原集合中的值覆蓋。\r\n\r\n```php\r\n$collection = collect(['product_id' => 1, 'price' => 100]);\r\n\r\n$merged = $collection->merge(['price' => 200, 'discount' => false]);\r\n\r\n$merged->all();\r\n\r\n// ['product_id' => 1, 'price' => 200, 'discount' => false]\r\n```\r\n\r\n若傳入的集合項為數字，則這些值將會追加在集合的最後面。\r\n\r\n```php\r\n$collection = collect(['Desk', 'Chair']);\r\n\r\n$merged = $collection->merge(['Bookcase', 'Door']);\r\n\r\n$merged->all();\r\n\r\n// ['Desk', 'Chair', 'Bookcase', 'Door']\r\n```\r\n\r\n##### `concat` 將傳入的值追加到集合的末端\r\n\r\n```php\r\n$collection = collect(['John Doe']);\r\n\r\n$concatenated = $collection->concat(['Jane Doe'])->concat(['name' => 'Johnny Doe']);\r\n\r\n$concatenated->all();\r\n\r\n// ['John Doe', 'Jane Doe', 'Johnny Doe']\r\n```\r\n\r\n##### `push` 把指定的值加入集合的末端\r\n\r\n```php\r\n$collection = collect([1, 2, 3, 4]);\r\n$collection->push(5);\r\n$collection->all();\r\n\r\n// [1, 2, 3, 4, 5]\r\n```\r\n\r\n##### `prepend` 將指定的值加入集合的開頭\r\n\r\n```php\r\n$collection = collect([1, 2, 3, 4, 5]);\r\n\r\n$collection->prepend(0);\r\n\r\n$collection->all();\r\n\r\n// [0, 1, 2, 3, 4, 5]\r\n```\r\n\r\n#### 擷取\r\n\r\n##### `except` 擷取除了 a, b 以外的\r\n\r\n##### `only` 只擷取 a, b\r\n\r\n##### `get` 取得特定 key 的值\r\n\r\n##### `forget` 直接刪除指定 key 值對應的 value\r\n\r\n##### `pull` 和 `get` 雷同，會修改原本的 collection\r\n\r\n##### `pluck` 取得集合中所有陣列的 key 值\r\n\r\n```php\r\n$collection = collect([\r\n    ['product_id' => 'prod-100', 'name' => 'Desk'],\r\n    ['product_id' => 'prod-200', 'name' => 'Chair'],\r\n])\r\n\r\n$picked = $collection->pluck('name');\r\n\r\n$pluck->all();\r\n\r\n// ['Desk', 'Chair']\r\n```\r\n\r\n##### `intersect` 從原集合中移除在指定陣列中或集合中不存在的值\r\n\r\n```php\r\n$collection = collect(['a', 'b', 'c']);\r\n$intersect = $collection->intersect(['a', 'c', 'e', 'f']);\r\n$intersect->all(); // [0 => 'a', 2 => 'c']\r\n```\r\n\r\n##### `keys`, `values` 取出集合中的 key 或 value\r\n\r\n#### 轉型\r\n\r\n##### `toArray`, `toJson` 提供轉成陣列或是 json 等常用格式\r\n\r\n### Where\r\n\r\ncollection 和 laravel 本身的 ORM 系統 Eloquent 密不可分，因此也配合支援許多 where 語法，使用方法類似 MySQL。\r\n\r\n#### 'first' 返回陣列中指令條件的第一元素\r\n\r\n```php\r\ncollect([1, 2, 3, 4, 5, 6])->first(function ($value, $key) {\r\n    return $value > 2;\r\n});\r\n\r\n// 3\r\n```\r\n\r\n若 `first` 方法不傳入參數，則返回集合中第一元素。若集合為空，則返回 `null`\r\n\r\n```php\r\ncollect([1, 2])->first();\r\n\r\n// 1\r\n```\r\n\r\n### 軟體操作類\r\n\r\n#### `collect` 複製一個新的 collection，記憶體位置不衝突\r\n\r\n## Helper 輔助函數\r\n\r\n### `Arr::add` 將數值加入陣列\r\n\r\n```php\r\nuse Illuminate\\Support\\Arr;\r\n\r\n$array = Arr::add(['name' => 'Desk'], 'price', 100);\r\n\r\n// ['name' => 'Desk', 'price' => 100]\r\n\r\n$array = Arr::add(['name' => 'Desk', 'price' => null], 'price', 100);\r\n\r\n// ['name' => 'Desk', 'price' => 100]\r\n\r\n```\r\n\r\n### `after` 返回傳入的字串的值後面所有的內容\r\n\r\n如果傳入的值不存在，將返回整個字串\r\n\r\n```php\r\nuse Illuminate\\Support\\Str;\r\n\r\n$slice = Str::of('This is my name')->after('This is');\r\n\r\n// ' my name'\r\n```\r\n","tocContent":"- [Laravel Collections \\& Helper](#laravel-collections--helper)\r\n  - [Collections 集合](#collections-集合)\r\n    - [運算類](#運算類)\r\n      - [Integer](#integer)\r\n        - [`count` 計數](#count-計數)\r\n      - [Boolean](#boolean)\r\n        - [`contains` 判斷集合是否包含指定的條件](#contains-判斷集合是否包含指定的條件)\r\n      - [Array](#array)\r\n        - [`diff` 比較集合或陣列的值](#diff-比較集合或陣列的值)\r\n    - [迭代類](#迭代類)\r\n      - [`filter` 傳入匿名函式篩選集合](#filter-傳入匿名函式篩選集合)\r\n      - [`map` 遍歷集合](#map-遍歷集合)\r\n    - [分組類](#分組類)\r\n      - [`countBy` 計算指定數值](#countby-計算指定數值)\r\n    - [變形類](#變形類)\r\n      - [維度與順序](#維度與順序)\r\n        - [`collapse` , `flatten`](#collapse--flatten)\r\n        - [`sort` 將陣列重新排列](#sort-將陣列重新排列)\r\n      - [組合](#組合)\r\n        - [`combine` 將一個集合的值作為 key，用來和另一陣列或集合的值進行組合](#combine-將一個集合的值作為-key用來和另一陣列或集合的值進行組合)\r\n        - [`merge` 合併指定的陣列或是集合到原集合](#merge-合併指定的陣列或是集合到原集合)\r\n        - [`concat` 將傳入的值追加到集合的末端](#concat-將傳入的值追加到集合的末端)\r\n        - [`push` 把指定的值加入集合的末端](#push-把指定的值加入集合的末端)\r\n        - [`prepend` 將指定的值加入集合的開頭](#prepend-將指定的值加入集合的開頭)\r\n      - [擷取](#擷取)\r\n        - [`except` 擷取除了 a, b 以外的](#except-擷取除了-a-b-以外的)\r\n        - [`only` 只擷取 a, b](#only-只擷取-a-b)\r\n        - [`get` 取得特定 key 的值](#get-取得特定-key-的值)\r\n        - [`forget` 直接刪除指定 key 值對應的 value](#forget-直接刪除指定-key-值對應的-value)\r\n        - [`pull` 和 `get` 雷同，會修改原本的 collection](#pull-和-get-雷同會修改原本的-collection)\r\n        - [`pluck` 取得集合中所有陣列的 key 值](#pluck-取得集合中所有陣列的-key-值)\r\n        - [`intersect` 從原集合中移除在指定陣列中或集合中不存在的值](#intersect-從原集合中移除在指定陣列中或集合中不存在的值)\r\n        - [`keys`, `values` 取出集合中的 key 或 value](#keys-values-取出集合中的-key-或-value)\r\n      - [轉型](#轉型)\r\n        - [`toArray`, `toJson` 提供轉成陣列或是 json 等常用格式](#toarray-tojson-提供轉成陣列或是-json-等常用格式)\r\n    - [Where](#where)\r\n      - ['first' 返回陣列中指令條件的第一元素](#first-返回陣列中指令條件的第一元素)\r\n    - [軟體操作類](#軟體操作類)\r\n      - [`collect` 複製一個新的 collection，記憶體位置不衝突](#collect-複製一個新的-collection記憶體位置不衝突)\r\n  - [Helper 輔助函數](#helper-輔助函數)\r\n    - [`Arr::add` 將數值加入陣列](#arradd-將數值加入陣列)\r\n    - [`after` 返回傳入的字串的值後面所有的內容](#after-返回傳入的字串的值後面所有的內容)"}