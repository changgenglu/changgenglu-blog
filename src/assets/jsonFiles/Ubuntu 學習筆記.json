{"name":"Ubuntu 學習筆記.md","content":"# ubuntu 學習筆記\r\n\r\n>\r\n\r\n## ubuntu 檔案結構\r\n\r\n- `/bin` 存放 linux / ubuntu 系統啟動和運行時會使用到的執行檔\r\n- `/boot` linux 核心和 RAM disk Image 存放的地方，同時為啟動選單設定檔存放的地方\r\n- `/dev` 所有 linux 核心有認識的設備和裝置的資訊都存放在此資料夾\r\n- `/etc` 所有影響到系統運作的設定檔\r\n- `/home` 系統上所有使用者的家目錄都會放在此資料夾下的資料夾\r\n- `/lib` 此資料夾存放 linux / ubuntu 系統會用到的程式庫及核心模組\r\n- `/lost+found` 若 ubuntu 的檔案系統掛掉了，系統回復後，會將所有無法正確回復的資料放進此資料夾中\r\n- `/media` 作為隨身碟或 CD 之類的可移除裝置的掛載點\r\n- `/mnt` 早期 linux 版本所使用的可移除裝置的掛載點，在 ubuntu 上用來專門做掛載暫時性的檔案系統用\r\n- `/opt` 無法透過套件安裝的軟體，會將程式安裝在此資料夾\r\n- `/proc` 此為一個虛擬的檔案系統，裡面放的是系統正在運行的程序，linux 核心透過此資料夾內的檔案來傳送訊息給執行中的程序\r\n- `/root` 此為 root 帳號的家目錄\r\n- `/sbin` 此資料夾內的檔案大多是超級使用者或 root 可以使用的管理用指令程式\r\n- `/tmp` 系統、軟體和程式用來存放暫時性資料的地方\r\n- `/usr/bin` 無論是 ubuntu 預載的或是使用者自己安裝的程式或軟體，都會被安裝到此資料夾\r\n- `/usr/lib` 此資料夾文存放 /usr/bin 的程式會用到的程式庫\r\n- `/usr/local` 通常透過自己編譯案安裝的程式會被放到此資料夾之下\r\n- `/usr/share` 此資料夾用來存放 /usr/bin 的程式的共用資料\r\n- `/usr/share/doc` 所有軟體的說明文件會放在這邊\r\n- `/var` 用來存放系統上的動態資料，像是網站、log 和郵件類型的資料\r\n- `/selinux` 此資料夾用來存放 SELinux 套件，預設並沒有安裝，因此為空\r\n- `/srv` 為相容 FHS 標準，因此會需要將架網站或 FTP server 等網路服務改放到此資料夾\r\n- `/sys` 此資料夾和 /proc 一樣為虛擬的檔案系統，用途為提供目前系統的各項資訊\r\n\r\n## 權限\r\n\r\n> [參考資料](https://shian420.pixnet.net/blog/post/344938711-%5Blinux%5D-chmod-****%E6%AA%94%E6%A1%88%E6%AC%8A%E9%99%90%E5%A4%A7%E7%B5%B1%E6%95%B4!)\r\n\r\n### 概述\r\n\r\nLinux 為多用戶系統，可同時間讓與多用戶使用。\r\n\r\n每個文件和目錄都分配了三種類型的身分\r\n\r\n- `owner` 創建檔案的人\r\n- `group` 一個 group 可以有很多 user，如果這個 group 的權限為讀跟寫，那此 group 中的 user 都可以讀跟寫\r\n- `others` 所有人\r\n\r\n與三種權限\r\n\r\n- `r` 可以開啟和讀取檔案。若為資料夾，則可以查看目錄下的內容，但無法修改(重新命名、移動、剪下、刪除)\r\n- `w` 可以新增、刪除、修改檔案。若檔案有 write 的權限，但資料夾沒有，則只能修改檔案內容，無法更改資料夾結構(修改檔名，移動檔案、刪除檔案)\r\n- `x` 執行程式碼的權限。windows 系統中，只要副檔名為 `.exe` 就可以執行，但在 linux 中需要有 execute permission。read 和 write 權限僅能修改程式碼\r\n- `-` 無權限\r\n\r\n```bash\r\nroot@rexlitemqtt://home/rexlite_public# ll\r\ntotal 80\r\ndrwxr-xr-x 6 rexlite_public rexlite_public  4096 Aug 30 05:34 ./\r\ndrwxr-xr-x 4 root           root            4096 Dec 16  2020 ../\r\n-rw------- 1 rexlite_public rexlite_public 14451 Sep  2 01:38 .bash_history\r\n-rw-r--r-- 1 rexlite_public rexlite_public   220 Feb 25  2020 .bash_logout\r\n-rw-r--r-- 1 rexlite_public rexlite_public  3771 Feb 25  2020 .bashrc\r\ndrwx------ 3 rexlite_public rexlite_public  4096 Apr 12  2021 .cache/\r\ndrwxrwxr-x 3 rexlite_public rexlite_public  4096 Apr 12  2021 .config/\r\ndrwxrwxr-x 3 rexlite_public rexlite_public  4096 Apr 12  2021 .local/\r\n-rw------- 1 rexlite_public rexlite_public   102 Dec 16  2020 .mysql_history\r\n-rw-r--r-- 1 rexlite_public rexlite_public   807 Feb 25  2020 .profile\r\ndrwx------ 2 rexlite_public rexlite_public  4096 Sep  2 01:10 .ssh/\r\n-rw------- 1 rexlite_public rexlite_public  3994 Aug 29 06:15 .viminfo\r\n-rw-rw-r-- 1 rexlite_public rexlite_public   584 May 19 10:15 README.md\r\n-rw-rw-r-- 1 rexlite_public rexlite_public  6774 Dec 16  2021 max-system.fishbonetw.com.zip\r\n-rw-rw-r-- 1 rexlite_public rexlite_public  4275 Jul 26  2021 max-system.japhne.com-bluehost.zip\r\n-rw-r--r-- 1 root           root               0 Dec 16  2020 var_log.json\r\n```\r\n\r\n第一個字元， `d` 代表 directory，`-` 代表 file\r\n\r\n接下來為三個字元一組，分別代表 `user(owner)`、`group`、`other` 及其擁有的權限\r\n\r\n- 各權限的分數\r\n\r\n  | 字元 | 分數 |\r\n  | :--: | :--: |\r\n  |  r   |  4   |\r\n  |  w   |  2   |\r\n  |  x   |  1   |\r\n  |  -   |  0   |\r\n\r\n  分數是累加的，例如 `-rwxrwx---`\r\n\r\n  |  字元  | 權限 |  分數   |\r\n  | :----: | :--: | :-----: |\r\n  | owner  | rwx  | 4+2+1=7 |\r\n  | group  | rwx  | 4+2+1=7 |\r\n  | others | ---  | 0+0+0=0 |\r\n\r\n  所以該檔的權限數字為 770\r\n\r\n第一個帳號為擁有者，第二個群組\r\n\r\n### 指令\r\n\r\n#### `chown` 更改檔案所有權給其他使用者\r\n\r\n- `-R` 針對檔案或是目錄下檔案做遞歸處理(整個目錄下每一個檔案不遺漏處理)\r\n\r\n- 將 home 底下 video 目錄所有者，改為 user\r\n\r\n  ```bash\r\n  chown user /home/video\r\n  ```\r\n\r\n- 將 home 底下 video 目錄的所有者，改成 user，擁有群組改為 video\r\n\r\n  ```bash\r\n  chown user:video /home/video\r\n  ```\r\n\r\n- 將 home 底下 video 目錄與目錄裡面所有檔案，擁有者改為 user\r\n\r\n  ```bash\r\n  chown -R user /home/video\r\n  ```\r\n\r\n#### `chmod` 更改檔案權限\r\n\r\n- 用數字類型改變檔案權限\r\n\r\n  ```bash\r\n  chmod -R xyz < filename | directory >\r\n  ```\r\n\r\n  - 若要將.bashrc 這個檔案所有權限都設為啟用\r\n\r\n    ```bash\r\n    chmod 777 .bashrc\r\n    ```\r\n\r\n  - 若要將檔案權限，改為可執行檔，且不開放修改。  \r\n    則權限為 `-rwxr-xr-x` ，其分數為 755。\r\n\r\n  - 若要檔案不希望其他人看到。  \r\n    其權限為 `-rwxr-----`，分數為 740。\r\n\r\n- 符號類型改變檔案權限\r\n\r\n  - `+` 加入\r\n  - `-` 除去\r\n  - `=` 設定\r\n\r\n  ```bash\r\n  chmod [ u | g | o | a ] [ + | - | = ] [ r | w | x ] < filename | directory >\r\n  ```\r\n\r\n  - 若要將 `.bashrc` 權限設為 `-rwxr-xr-x`\r\n\r\n    - `user` 可讀、可寫、可執行\r\n    - `group` | `others` 可讀、可執行\r\n\r\n    ```bash\r\n    chmod u=rwx, go=rx .bashrc\r\n    ```\r\n\r\n  - 若權限為 `-rwxr-xr--`\r\n\r\n    ```bash\r\n    chmod u=rwx, g=rx, o=r < filename >\r\n    ```\r\n\r\n  - 若不知道此檔案的權限，但想要將此檔案設定為全部人都可以寫入  \r\n    `chmod a+w < filename >`\r\n  - 若要將權限去除，而不更動其他已存在的權限  \r\n    `chmod a-x < filename >`\r\n\r\n## 安裝 php\r\n\r\n```bash\r\napt install -y php7.4 php7.4-cli php7.4-fpm php7.4-mbstring php7.4-xml php7.4-bcmath php7.4-curl php7.4-gd php7.4-mysql php7.4-opcache php7.4-zip php7.4-sqlite3\r\n```\r\n\r\n- 查看是否安裝成功\r\n\r\n  ```bash\r\n  php -v\r\n  ```\r\n\r\n- 安裝最新版 php\r\n\r\n由於通常 ubuntu 的套件資訊不會包含最新版本的 php，若需要最新版本，需添加第三方的套件資訊\r\n\r\n```bash\r\napt install -y software-properties-common\r\n```\r\n\r\n將第三方套件資訊加入 ubuntu 套件資訊庫\r\n\r\n```bash\r\nadd-apt-repository -y ppa:ondrej/php\r\n```\r\n\r\n更新套件資訊\r\n\r\n```bash\r\napt-get update\r\n```\r\n\r\n更新後即可安裝最新的 php\r\n\r\n## 安裝 MySQL\r\n\r\n### 更新軟體庫\r\n\r\n```zsh\r\napt update\r\n```\r\n\r\n### 升級軟體庫\r\n\r\n```zsh\r\napt upgrade\r\n```\r\n\r\n### 安裝指令\r\n\r\n```zsh\r\napt install mysql-server -y\r\n```\r\n\r\n### 查看 MySQL 版本\r\n\r\n```zsh\r\nmysql --version\r\n# output\r\nmysql  Ver 8.0.31-0ubuntu0.22.04.1 for Linux on x86_64 ((Ubuntu))\r\n```\r\n\r\n### 設定 root 密碼\r\n\r\n```zsh\r\nroot@DESKTOP-O8SANAT ~ sudo service mysql start\r\n\r\nroot@DESKTOP-O8SANAT ~ sudo mysql\r\n\r\nmysql>  ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'SetRootPasswordHere';\r\nQuery OK, 0 rows affected (0.01 sec)\r\n\r\nmysql> exit\r\nBye\r\n\r\nroot@DESKTOP-O8SANAT ~ sudo mysql_secure_installation\r\nEnter password for user root:\r\n# 輸入：SetRootPasswordHere\r\n```\r\n\r\n- [設定 root 帳號與初始權限](https://www.albert-yu.com/blog/mysql%E8%A8%AD%E5%AE%9Aroot%E5%B8%B3%E8%99%9F%E5%AF%86%E7%A2%BC%E8%88%87%E5%88%9D%E5%A7%8B%E6%AC%8A%E9%99%90ubuntu-20-04/)\r\n\r\n### 移除 MySQL\r\n\r\n- 移除 MySQL\r\n\r\n```bash\r\napt-get purge --auto-remove mysql-common mysql-server mariadb-server\r\napt-get autoremove\r\napt-get autoclean\r\n```\r\n\r\n- 刪除 mysql 使用者\r\n\r\n```bash\r\nkillall -9 mysql (或 killall -9 mysqld) userdel mysql\r\n```\r\n\r\n- 刪除設定檔\r\n\r\n```bash\r\nrm -rf /etc/mysql rm -rf /var/lib/mysql\r\n```\r\n\r\n## nginx\r\n\r\n### service nginx restart 執行出現 fail\r\n\r\n[參考資料](https://weijutu.github.io/2019/03/12/web/ubuntu-nginx-restart-fail/)\r\n\r\n### 完全移除 nginx\r\n\r\n- 停止 nginx 服務\r\n\r\n```bash\r\nsudo service nginx stop\r\n```\r\n\r\n- 刪除 nginx 及設定文件\r\n\r\n```bash\r\nsudo apt-get purge nginx\r\n```\r\n\r\n- 自動刪除不使用的軟體包\r\n\r\n```bash\r\nsudo apt-get autoremove\r\n```\r\n\r\n- 列出與 nginx 相關的軟體，並刪除\r\n\r\n```bash\r\ndpkg --get-selections | grep nginx\r\n\r\nsudo apt-get purge nginx\r\nsudo apt-get purge nginx-common\r\nsudo apt-get purge nginx-full\r\n```\r\n\r\n- 確認 nginx 是否完全刪除\r\n\r\n```bash\r\nwhich nginx\r\n```\r\n\r\n## 找不到 sudo\r\n\r\n- 先檢查 `/etc/sudoers.d` 檔案是否在，若無則下安裝命令\r\n\r\n```bash\r\napt-get install sudo\r\n```\r\n\r\n- 若系統中已經存在 `/etc/sudoers.d` 檔案，表示系統已經安裝 sudo 但尚未設定環境。\r\n  - 用文件編輯器 (vim) 開啟 `/etc/sudoers.d`，找到 `secure_path` 添加路徑\r\n\r\n```bash\r\nDefaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin\r\n```\r\n\r\n## 安裝 composer\r\n\r\n> 安裝前須先安裝 PHP Command-Line Interface（PHP-CLI)\r\n\r\n### 更新系統的套件資訊\r\n\r\n```bash\r\nsudo apt-get update && sudo apt-get upgrade -y\r\n```\r\n\r\n### 下載 composer 並將其設定為全域可執行的指令\r\n\r\n- 從官網下載 composer 安裝檔至 tmp 資料夾\r\n\r\n  ```bash\r\n  php -r \"copy('https://getcomposer.org/installer', '/tmp/composer-setup.php')\"\r\n  ```\r\n\r\n- 驗證下載的安裝檔\r\n\r\n  使用 composer 官方提供的 SHA-384 簽章來驗證安裝檔 [Composer Public Keys / Checksums](https://composer.github.io/pubkeys.html)\r\n\r\n  輸入驗證的簽章\r\n\r\n  ```bash\r\n  php -r \"if (hash_file('SHA384', '/tmp/composer-setup.php') === '55ce33d7678c5a611085589f1f3ddf8b3c52d662cd01d4ba75c0ee0459970c2200a51f492d557530c71c15d8dba01eae') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('/tmp/composer-setup.php'); } echo PHP_EOL;\"\r\n  ```\r\n\r\n- 安裝 composer\r\n  為了要讓 composer 在全域中使用，所以要將 composer 安裝到 `usr/local/bin` 的資料夾中，以及將 `Composer` 重新命名為 `composer`。\r\n\r\n  ```bash\r\n  sudo php /tmp/composer-setup.php --install-dir=/usr/local/bin --filename=composer\r\n  ```\r\n\r\n- 查看 composer 版本\r\n\r\n  ```bash\r\n  composer -V\r\n  ```\r\n\r\n- 刪除 composer 的安裝檔\r\n\r\n  ```bash\r\n  rm /tmp/composer-setup.php\r\n  ```\r\n\r\n## 安裝 Git\r\n\r\n```bash\r\nsudo apt-get install git\r\n```\r\n\r\n## 安裝 Docker\r\n\r\n```bash\r\nsudo apt install docker.io\r\n```\r\n\r\n確認安裝\r\n\r\n```bash\r\ndocker --version\r\n```\r\n\r\n啟動 docker\r\n\r\n```bash\r\nsudo systemctl start docker\r\n\r\n# 啟動時運行\r\nsudo systemctl enable docker\r\n```\r\n\r\n## logrotate 記錄檔管理工具\r\n\r\n### 安裝\r\n\r\n一般而言 linux 發行版都會安裝好 logrotate\r\n\r\n```bash\r\n# 安裝 logrotate（Ubuntu/Debian）\r\nsudo apt install logrotate\r\n\r\n# 安裝 logrotate（RHEL/CentOS）\r\nsudo yum install logrotate\r\n```\r\n\r\n### 設定檔\r\n\r\nlogrotate 設定檔位於 `/etc/logrotate.conf`，裡面會包含一些預設的設定值，例如紀錄檔的輪替頻率，保留數量等等\r\n\r\n```bash\r\n# 每週進行一次記錄檔輪替\r\nweekly\r\n\r\n# 記錄檔擁有者與群組為 root 與 syslog\r\nsu root syslog\r\n\r\n# 保留 4 次輪替的記錄檔\r\nrotate 4\r\n\r\n# 輪替之後，自動建立新的記錄檔\r\ncreate\r\n\r\n# 壓縮輪替後的記錄檔\r\ncompress\r\n\r\n# 套用一般套件的記錄檔設定\r\ninclude /etc/logrotate.d\r\n\r\n# ...\r\n```\r\n\r\n個別套件或服務的紀錄檔設定會放在`/etc/logrotate.d` 目錄中，透過這裡的 `include` 來套用個別套件的紀錄檔設定。\r\n\r\n```bash\r\n# nginx 記錄檔輪替設定\r\n/var/log/nginx/*.log { # 記錄檔位置\r\n    daily                # 每日輪替一次\r\n    missingok            # 忽略記錄檔不存在問題\r\n    rotate 14            # 保留 14 次輪替的記錄檔\r\n    compress             # 壓縮輪替後的記錄檔\r\n    delaycompress        # 延遲壓縮記錄檔\r\n    notifempty           # 不輪替空的記錄檔\r\n    create 0640 www-data adm # 記錄檔擁有者/群組為 www-data/adm，權限為 0640\r\n    sharedscripts        # 所有記錄檔輪替，只執行一次 prerotate 與 postrotate 指令稿\r\n    prerotate            # 輪替前指令稿\r\n        if [ -d /etc/logrotate.d/httpd-prerotate ]; then \\\r\n            run-parts /etc/logrotate.d/httpd-prerotate; \\\r\n        fi \\\r\n    endscript\r\n    postrotate           # 輪替後指令稿\r\n        invoke-rc.d nginx rotate >/dev/null 2>&1\r\n    endscript\r\n}\r\n```\r\n\r\n若在個別服務設定中沒有指定的話，就會套用 `/etc/logrotate.conf` 中預設的設定。\r\n\r\n### 基本設定\r\n\r\n| 指令           | 說明                                |\r\n| -------------- | ----------------------------------- |\r\n| su root syslog | 紀錄檔擁有者與群組為 root 與 syslog |\r\n| missingok      | 忽略紀錄檔不存在的問題              |\r\n| notifempty     | 不輪替空檔案                        |\r\n| ifempty        | 輪替空檔案                          |\r\n| rotate 7       | 保留七次輪替紀錄                    |\r\n\r\n### 紀錄檔輪替頻率設定\r\n\r\n| 指令      | 說明            |\r\n| --------- | --------------- |\r\n| daily     | 每日輪替        |\r\n| weekly    | 每週輪替        |\r\n| monthly   | 每月輪替        |\r\n| yearly    | 每年輪替        |\r\n| size 100k | 當檔案超過 100K |\r\n| size 2m   | 當檔案超過 2M   |\r\n| size 1G   | 當檔案超過 1G   |\r\n\r\n進階設定\r\n\r\n| 指令         | 說明                                                            |\r\n| ------------ | --------------------------------------------------------------- |\r\n| minage 3     | 三天以內建立的檔案不輪替                                        |\r\n| maxage 30    | 不保留三十天以前的紀錄檔                                        |\r\n| maxsize 100k | 搭配 daily 等間隔條件使用，檔案超過 100k 或達到間隔條件時輪替   |\r\n| minsize 100k | 搭配 daily 等間隔條件使用，檔案超過 100k 同時達到間隔條件時輪替 |\r\n\r\n### 紀錄檔壓縮\r\n\r\n| 指令            | 說明                 |\r\n| --------------- | -------------------- |\r\n| compress        | 壓縮輪替後的舊紀錄檔 |\r\n| nocompress      | 不壓縮輪替後的檔案   |\r\n| delaycompress   | 延遲壓縮紀錄檔       |\r\n| nodelaycompress | 不延遲壓縮紀錄檔     |\r\n\r\n### 測試 logrotate 設定\r\n\r\n修改完設定後，可以用以下指令測試設定檔是否正確\r\n\r\n```bash\r\n# 測試 logrotate 設定\r\nsudo logrotate -d /etc/logrotate.conf\r\n```\r\n\r\n如果沒出現錯誤訊息，就完成了\r\n\r\nlogrotate 是透過 cron 來觸發的，通常是寫在 /etc/cron.daily/logrotate 中，所以更改 logrotate 設定檔之後，只要確認設定無誤，就會自動生效，不需要重新載入設定檔的動作。\r\n\r\n## 安全性設定\r\n\r\n> 參考資料\r\n>\r\n> [Ubuntu VPS 第一步：安全性設定](https://blog.jsy.tw/2124/ubuntu-vps-security-settings/)\r\n>\r\n> 目前只能透過 GCP 的瀏覽器 ssh 指定 2022 port 連線到虛擬機\r\n\r\n### 登入伺服器建立自訂帳號\r\n\r\n為了避免駭客直接用 root 連線進來，應該要限制 root 使用 ssh。\r\n\r\n首先使用 root 建立一個新的帳號\r\n\r\n1. 用 ssh 登入 root 帳號\r\n\r\n   ```bash\r\n    ssh root@<server-ip>\r\n   ```\r\n\r\n2. 修改 root 密碼\r\n\r\n   ```bash\r\n    passwd\r\n   ```\r\n\r\n3. 新增帳號\r\n\r\n   ```bash\r\n    adduser <new-account>\r\n   ```\r\n\r\n4. 允許此帳號使用 sudo 權限\r\n\r\n   ```bash\r\n    usermod -aG sudo <new-account>\r\n   ```\r\n\r\n### 開啟安全性更新\r\n\r\n一般若開啟自動更新，容易增加網站運作上的不穩定，所以有些人會選擇關閉。但這邊會開啟最基本的安全更新。\r\n\r\n1. 更新 ubuntu\r\n\r\n   ```bash\r\n    apt update\r\n    apt dist-upgrade\r\n   ```\r\n\r\n2. 更新完成後，重新啟動 ubuntu\r\n\r\n   ```bash\r\n    reboot\r\n   ```\r\n\r\n3. 開啟 ubuntu 的 unattended-upgrades 設定檔\r\n\r\n   ```bash\r\n    sudo vim /etc/apt/apt.conf.d/50unattended-upgrades\r\n   ```\r\n\r\n4. 將安全性更新以外的全部註解\r\n\r\n   ```txt\r\n   Unattended-Upgrade::Allowed-Origins {\r\n   //      \"${distro_id}:${distro_codename}\";  // 發行版的預設軟體源\r\n        \"${distro_id}:${distro_codename}-security\";  // 安全性更新\r\n        \"${distro_id}ESM:${distro_codename}\";  // 針對過期的 LTS 版提供的付費延展安全性更新\r\n   //      \"${distro_id}:${distro_codename}-updates\"; // 官方建議的軟體更新（功能更新、Bug 修復等）\r\n   //      \"${distro_id}:${distro_codename}-proposed\";  // 尚未官方建議的軟體更新\r\n   //      \"${distro_id}:${distro_codename}-backports\";  // 針對舊版 Ubuntu 提供的新軟體更新\r\n   };\r\n   ```\r\n\r\n5. 開啟 ubuntu 的 auto-upgrades\r\n\r\n   ```bash\r\n    vim /etc/apt/apt.conf.d/20auto-upgrades\r\n   ```\r\n\r\n6. 修改指令\r\n\r\n   ```bash\r\n   // 指定自動更新套件庫清單 (apt update) 的週期，單位是天。\r\n   APT::Periodic::Update-Package-Lists \"1\";\r\n   // 指定自動把可更新的套件下載下來 (apt upgrade -d) 的週期，單位是天。\r\n   APT::Periodic::Download-Upgradeable-Packages \"1\";\r\n   // 指定自動把目前已經不可下載，但是先前已經被下載下來的套件清除 (apt autoclean) 的週期，單位是天。\r\n   APT::Periodic::AutocleanInterval \"7\";\r\n   // 與套件「unattended-upgrades」互相搭配使用。可以指定要自動下載並安裝套件 (類似 apt upgrade) 的週期，單位是天。\r\n   APT::Periodic::Unattended-Upgrade \"1\";\r\n   ```\r\n\r\n### 修改 ssh port\r\n\r\n修改 SSH 預設的 22 port。\r\n\r\n1. 列出哪一些 port 是可以使用的\r\n\r\n   ```bash\r\n    ss -tulpn | grep LISTEN\r\n   ```\r\n\r\n2. 開啟 ssh 設定檔\r\n\r\n   ```bash\r\n    vim /etc/ssh/sshd_config\r\n   ```\r\n\r\n3. 找到以 Port 開頭的那一行，並更改成你想要的 port\r\n\r\n   ```text\r\n   Port <ur-new-port>\r\n   ```\r\n\r\n4. 在檔案任一處加入下方指令，以限制 SSH 永遠使用 Protocol 2。這會使 SSH 連線更加安全\r\n\r\n   ```text\r\n   protocol 2\r\n   ```\r\n\r\n5. 重新啟動 ssh\r\n\r\n   ```bash\r\n    sudo systemctl restart ssh\r\n   ```\r\n\r\n### 關閉 root 的 SSH 權限，允許 SSH 登入帳號\r\n\r\n1. 測試要允許登入的帳號是否具有 sudo 的權限\r\n\r\n   ```bash\r\n    sudo -v\r\n   ```\r\n\r\n2. 開啟 ssh 設定檔\r\n\r\n   ```bash\r\n    sudo vim /etc/ssh/sshd_config\r\n   ```\r\n\r\n3. 關閉 root 登入並新增登入的帳號\r\n\r\n   ```text\r\n   PermitRootLogin no\r\n   AllowUsers <your_user_account>\r\n   ```\r\n\r\n4. 重新啟動 ssh\r\n\r\n### 設定 SSH 免密碼登入\r\n\r\n使用 ssh key 機制來達成免密碼登入，利用演算法建構出複雜的公私鑰(題目與密碼)，將公鑰放在伺服器上，每次登入時系統自動將本地端的私鑰去對應伺服器上面的公鑰，來確認是否為本人以達成免本人輸入密碼的登入。\r\n\r\n除了方便以外，極為複雜且加密過的鑰匙，也可以讓被暴力破解的機會降低。\r\n\r\n### 關閉 SSH 密碼登入功能\r\n\r\n為了降低 ssh 的連線風險，接著要進一步將 SSH 密碼登入功能關閉。\r\n\r\n1. 開啟 SSH 設定檔\r\n\r\n   ```bash\r\n    sudo vim /etc/ssh/sshd_config\r\n   ```\r\n\r\n2. 將 `PasswordAuthentication` 的數值改為 `no`\r\n3. 重新啟動 ssh\r\n\r\n## 常用指令\r\n\r\n### `&` 背景執行程式\r\n\r\n- 在執行程式後面加上 `&` 使程式可以在背景執行\r\n\r\n```bash\r\nphp subscribe_with_auth.php &\r\n```\r\n\r\n### `jobs` 檢視任務\r\n\r\n```bash\r\njobs -l\r\n[1]+ 1040421 Running php subscribe_with_auth.php &\r\n```\r\n\r\n### `fg` 將任務切換至前景執行，`bg` 將任務切換至背景執行\r\n\r\n```bash\r\njobs -l\r\n[1]+ 1040421 Running php subscribe_with_auth.php &\r\n```\r\n\r\n### `disown` 卸除目前預設的背景行程\r\n\r\n- `disown -a` 卸除所有工作，無論其狀態是否在執行中或是暫停\r\n- `disown -ar` 僅卸除所有執行中的工作\r\n- `disown -h` 不要卸除工作，只是單純讓程式可以在登出後繼續執行。\r\n\r\n```bash\r\njobs -l\r\n[1]+ 1040421 Running php subscribe_with_auth.php &\r\n```\r\n\r\n### `ps aux | less` 顯示所有正在執行中的進程\r\n\r\n### `kill 10000` 刪除執行中的進程，`kill` 加上 PID 的數字即可\r\n\r\n```bash\r\nUSER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\r\nroot           1  0.0  0.3 173272 12812 ?        Ss    2022  85:07 /lib/systemd/systemd --system --deserialize 23\r\nroot           2  0.0  0.0      0     0 ?        S     2022   0:06 [kthreadd]\r\nroot           3  0.0  0.0      0     0 ?        I<    2022   0:00 [rcu_gp]\r\nroot           4  0.0  0.0      0     0 ?        I<    2022   0:00 [rcu_par_gp]\r\nroot           5  0.0  0.0      0     0 ?        I<    2022   0:00 [netns]\r\nroot           7  0.0  0.0      0     0 ?        I<    2022   0:00 [kworker/0:0H-events_highpri]\r\nroot           9  0.0  0.0      0     0 ?        I<    2022   2:45 [kworker/0:1H-events_highpri]\r\n```\r\n\r\n### `nohup` 讓程式可以在離線或是登出系統後繼續執行\r\n\r\n當 Linux 使用者登出系統後正在執行的程式會接收到 SIGHUP(hangup) 信號，收到信號的程式會立刻停止執行。\r\n\r\n```bash\r\nnohup /path/my_program &\r\n```\r\n","tocContent":"- [ubuntu 學習筆記](#ubuntu-學習筆記)\r\n  - [ubuntu 檔案結構](#ubuntu-檔案結構)\r\n  - [權限](#權限)\r\n    - [概述](#概述)\r\n    - [指令](#指令)\r\n      - [`chown` 更改檔案所有權給其他使用者](#chown-更改檔案所有權給其他使用者)\r\n      - [`chmod` 更改檔案權限](#chmod-更改檔案權限)\r\n  - [安裝 php](#安裝-php)\r\n  - [安裝 MySQL](#安裝-mysql)\r\n    - [更新軟體庫](#更新軟體庫)\r\n    - [升級軟體庫](#升級軟體庫)\r\n    - [安裝指令](#安裝指令)\r\n    - [查看 MySQL 版本](#查看-mysql-版本)\r\n    - [設定 root 密碼](#設定-root-密碼)\r\n    - [移除 MySQL](#移除-mysql)\r\n  - [nginx](#nginx)\r\n    - [service nginx restart 執行出現 fail](#service-nginx-restart-執行出現-fail)\r\n    - [完全移除 nginx](#完全移除-nginx)\r\n  - [找不到 sudo](#找不到-sudo)\r\n  - [安裝 composer](#安裝-composer)\r\n    - [更新系統的套件資訊](#更新系統的套件資訊)\r\n    - [下載 composer 並將其設定為全域可執行的指令](#下載-composer-並將其設定為全域可執行的指令)\r\n  - [安裝 Git](#安裝-git)\r\n  - [安裝 Docker](#安裝-docker)\r\n  - [logrotate 記錄檔管理工具](#logrotate-記錄檔管理工具)\r\n    - [安裝](#安裝)\r\n    - [設定檔](#設定檔)\r\n    - [基本設定](#基本設定)\r\n    - [紀錄檔輪替頻率設定](#紀錄檔輪替頻率設定)\r\n    - [紀錄檔壓縮](#紀錄檔壓縮)\r\n    - [測試 logrotate 設定](#測試-logrotate-設定)\r\n  - [安全性設定](#安全性設定)\r\n    - [登入伺服器建立自訂帳號](#登入伺服器建立自訂帳號)\r\n    - [開啟安全性更新](#開啟安全性更新)\r\n    - [修改 ssh port](#修改-ssh-port)\r\n    - [關閉 root 的 SSH 權限，允許 SSH 登入帳號](#關閉-root-的-ssh-權限允許-ssh-登入帳號)\r\n    - [設定 SSH 免密碼登入](#設定-ssh-免密碼登入)\r\n    - [關閉 SSH 密碼登入功能](#關閉-ssh-密碼登入功能)\r\n  - [常用指令](#常用指令)\r\n    - [`&` 背景執行程式](#-背景執行程式)\r\n    - [`jobs` 檢視任務](#jobs-檢視任務)\r\n    - [`fg` 將任務切換至前景執行，`bg` 將任務切換至背景執行](#fg-將任務切換至前景執行bg-將任務切換至背景執行)\r\n    - [`disown` 卸除目前預設的背景行程](#disown-卸除目前預設的背景行程)\r\n    - [`ps aux | less` 顯示所有正在執行中的進程](#ps-aux--less-顯示所有正在執行中的進程)\r\n    - [`kill 10000` 刪除執行中的進程，`kill` 加上 PID 的數字即可](#kill-10000-刪除執行中的進程kill-加上-pid-的數字即可)\r\n    - [`nohup` 讓程式可以在離線或是登出系統後繼續執行](#nohup-讓程式可以在離線或是登出系統後繼續執行)"}