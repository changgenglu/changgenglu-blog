{"name":"Docker 學習筆記.md","content":"# Docker 學習筆記\n\n>\n\n> 參考資料：\n>\n> [Docker 基本知識 以及 Docker Compose 實戰經驗](https://hackmd.io/@leonsnoopy/Sya_DevI7#Docker-%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AD%98-%E4%BB%A5%E5%8F%8A-Docker-Compose%E5%AF%A6%E6%88%B0%E7%B6%93%E9%A9%97)\n>\n> [基礎系統及 docker hub 指令](https://joshhu.gitbooks.io/dockercommands/content/Basics/Basics.html)\n>\n> [How to Deploy Laravel with Docker on Ubuntu 18.04](https://help.clouding.io/hc/en-us/articles/360010679999-How-to-Deploy-Laravel-with-Docker-on-Ubuntu-18-04)\n>\n> [Laravel 實戰經驗分享 - Day26 Dockerize 你的 Laravel 專案](https://ithelp.ithome.com.tw/articles/10251844)\n\n## 安裝 Docker: Docker for Windows\n\n> Windows 10\n> 需啟用 Hyper-v\n> 控制台 -> 程式和功能 -> 開啟或關閉 Windows 功能\n> 將\"Hyper-v\"和\"容器\"設為開啟\n\n- 下載[Docker for Windows](https://docs.docker.com/desktop/get-started/)\n\n## 基本概念\n\n- docker 主要元件：\n  - `image` 映像檔\n  - `container` 容器\n  - `repository` 倉庫\n\n執行 docker 的主機稱為 Host，當 Host 執行 `docker run` 指令時，Docker 會操作這三個元素。\n\n- Image、container、repository 之間的關係就像光碟一樣：早期世紀帝國等光碟遊戲，會需要搭配其他可讀寫空間（如硬碟），才有辦法執行。\n  - image 像光碟片，唯獨且無法獨立執行。\n  - container 像硬碟，可讀可寫可執行。\n  - repository 像光碟盒，儲存 image。\n  - registry 則是光碟零售商。\n\n### Image\n\n- image 包裝了一個執行特定環境所需要的資源。\n  每個 image 都有獨一無二的 digest，這是從 image 內容作 sha256 產生的。這個是能讓 image 無法隨意更變內容，維持資料的一致性。\n\n雖然 image 裡有必要的資源，但他無法獨立執行，必須靠 container 間接執行。\n\n### Container\n\n- 基於 image 可以建立出 Container。\n  他的概念像是建立一個可讀寫內容的外層，架在 image 之上。實際存取 container 會經過可讀寫層與 image，因此看到的內容會是兩者合併後的結果。\n\nContainer 特性與 image 不一樣，因為有可讀寫層，所以 container 可以讀寫，也可以拿來執行。\n\n### Repository\n\n- repository 是存放 image 的空間\n  docker 的設計類似`分散式版本控制`的方法來存的方法來存放各種 image，而分散式架構就會有類似 git 的 pull/push 行為，實際做的事情也跟 git 類似：為了要跟遠端的 repository 同步。\n\n另一個與 repository 很像，但容易混用的詞為 Registry。Registry 涵蓋範圍更廣，包含了更多 repository 與身分驗證功能等，通常比較常討論的也是 registry。\n\n目前 docker 上面預設的 registry 為 DockerHub，大多數程式或服務的 image 都可以在上面找到。\n\n## Hello World\n\n```bash\n$ docker run hello-world\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\n0e03bdcc26d7: Pull complete\nDigest: sha256:7f0a9f93b4aa3022c3a4c147a449bf11e0941a1fd0bf4a8e6c9408b2600777c5\nStatus: Downloaded newer image for hello-world:latest\n\nHello from Docker!\n```\n\n- `docker run <image name>` 會建立一個 container 並執行，而因為 container 需要基於 image 建立，所以 docker run 有一個必要參數為 `image name`。\n\n### 確認 Image 存在於 Repository\n\n首先先確認 `hello-world` 是否存在於本機的 repository，本機找不到的話，就需要從遠端的 repository 下載。\n\n```bash\nUnable to find image 'hello-world:latest' locally\nlatest: Pulling from library/hello-world\n0e03bdcc26d7: Pull complete\nDigest: sha256:7f0a9f93b4aa3022c3a4c147a449bf11e0941a1fd0bf4a8e6c9408b2600777c5\nStatus: Downloaded newer image for hello-world:latest\n```\n\n### 建立 Container 並執行\n\n確認 image 存在後，即可建立 container 並執行。\n\n- `docker run` 預設的行為是：\n  1. 前景建立並執行 container\n  2. 等待執行程式結束後，會回到前景的命令提示字元\n  3. 該 container 會被標記為結束狀態。\n\n### 列出所有已建立的 container\n\n```bash\ndocker ps -a\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES\n6d7e00198a56        hello-world         \"/hello\"            12 seconds ago      Exited (0) 11 seconds ago                       relaxed_bhabha\n```\n\n`STATUS` 表示 container 的狀態，`Exited(0)` 後面的數字為程式結束後回傳的狀態碼，通常 0 為正常結束，非 0 則唯有錯誤。\n\n`CONTAINER ID` 和 `NAMES` 為獨一無二，執行多次 `docker run` 後，會生不一樣名字的 container。\n\n### 移除 container\n\n若一直執行 `docker run` 會使 container 數量不斷增加，一般而言沒有再用到的 container 就會將他移除\n\n```bash\n# 移除時使用 CONTAINER ID 和 NAMES 都可以。\ndocker rm 6d7e00198a56\n\n#移除後再檢查一次\ndocker ps -a\n```\n\n## ubuntu\n\n### pull\n\n```bash\n# 搜尋 ubuntu\ndocker search ubuntu\n# 將 ubuntu 的 image pull 下來\ndocker pull ubuntu\n```\n\n查看 docker 的 image，應可以看到最新版本的 ubuntu\n\n```bash\ndocker images\n```\n\n| REPOSITORY | TAG    | IMAGE ID     | CREATED     | SIZE   |\n| ---------- | ------ | ------------ | ----------- | ------ |\n| ubuntu     | latest | 6b7dfa7e8fdb | 3 weeks ago | 77.8MB |\n\n### 啟動\n\n```bash\n> docker run -itd --name ubuntu-test ubuntu\n6ffebdd2bce193afe7e3fbaa53c6f2e1dffa845e2c8ec55fef899ba191470dbc\n```\n\n進入容器\n\n```bash\n> docker exec -it ubuntu-test bash\nroot@6ffebdd2bce1:/#\n```\n\n## For Laravel: Laradock\n\n### 環境要求\n\n> Git\n> docker\n> docker-compose\n\n- 將 laradock 的 repository clone 下來\n\n  ```bash\n  git clone https://github.com/Laradock/laradock.git Laradock\n  ```\n\n### 資料結構\n\n#### laradock/.env\n\n- 在 laradock 的資料夾中複製 .env.example 並改名為 .env\n\n  ```bash\n  cp .env.example .env\n  ```\n\n- 編輯 .env 中的設定\n\n```vim\n### Paths #################################################\n# Point to the path of your applications code on your host\n# 專案要放在本機的哪個資料夾中\n# 這邊放在與 laradock 同層級的 test 資料夾中\nAPP_CODE_PATH_HOST=../test\n\n# Point to where the `APP_CODE_PATH_HOST` should be in the container\n# 設定專案要同步到 container 中的哪一個路徑，預設為 /var/www\nAPP_CODE_PATH_CONTAINER=/var/www\n\n# You may add flags to the path `:cached`, `:delegated`. When using Docker Sync add `:nocopy`\nAPP_CODE_CONTAINER_FLAG=:cached\n\n# Choose storage path on your machine. For all storage systems\n# 設定你的儲存資料(ex. database, redis 內的數據)要存放在哪。\n# 這邊是放在跟 laradock 專案同層級的 data 資料夾中\nDATA_PATH_HOST=../data\n```\n\n#### mysql\n\n若 PhpMyAdmin 登不進去，可能是版本問題\n\n```vim\n# 預設值\nMYSQL_VERSION=latest\n\n# 改為\nMYSQL_VERSION=5.7\n```\n\n#### PhpMyAdmin\n\n```vim\n### PHP MY ADMIN ##########################################\n\n# Accepted values: mariadb - mysql\n# 連接的 BD (預設為 mysql)\nPMA_DB_ENGINE=mysql\n\n# Credentials/Port:\n\n# 預設的使用者\nPMA_USER=default\n# 預設密碼\nPMA_PASSWORD=secret\n# sql root 帳號的密碼\nPMA_ROOT_PASSWORD=secret\n# phpMyAdmin 執行的 port 號\nPMA_PORT=8081\nPMA_MAX_EXECUTION_TIME=600\nPMA_MEMORY_LIMIT=256M\nPMA_UPLOAD_LIMIT=2G\n```\n\n#### apache2\n\n#### nginx\n\n### 啟動\n\n- 啟動 laradock\n\n```bash\ndocker-compose up -d apache2 phpMyAdmin nginx ...想啟動的服務\n```\n\nLaradock 會自動啟動包括 php-fpm 在內的 php-fpm 及 workspace，啟動 phpMyAdmin 時也會連帶啟動 mysql\n\n- 進入 laravel 專案\n\n在啟動 laradock 之後，會建立一個 workspace 的 container，此時進入 workspace 建立 laravel 專案\n\n```bash\ndocker-compose exec workspace bash\n```\n\n進入後，terminal 會顯示自己在 `/var/www` 中，此時 `/var/www` 是連接我們在 .env 中設定的資料夾 `../test`\n","tocContent":"- [Docker 學習筆記](#docker-學習筆記)\n  - [安裝 Docker: Docker for Windows](#安裝-docker-docker-for-windows)\n  - [基本概念](#基本概念)\n    - [Image](#image)\n    - [Container](#container)\n    - [Repository](#repository)\n  - [Hello World](#hello-world)\n    - [確認 Image 存在於 Repository](#確認-image-存在於-repository)\n    - [建立 Container 並執行](#建立-container-並執行)\n    - [列出所有已建立的 container](#列出所有已建立的-container)\n    - [移除 container](#移除-container)\n  - [ubuntu](#ubuntu)\n    - [pull](#pull)\n    - [啟動](#啟動)\n  - [For Laravel: Laradock](#for-laravel-laradock)\n    - [環境要求](#環境要求)\n    - [資料結構](#資料結構)\n      - [laradock/.env](#laradockenv)\n      - [mysql](#mysql)\n      - [PhpMyAdmin](#phpmyadmin)\n      - [apache2](#apache2)\n      - [nginx](#nginx)\n    - [啟動](#啟動-1)"}